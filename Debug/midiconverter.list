
midiconverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075b8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08007788  08007788  00008788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077fc  080077fc  00009334  2**0
                  CONTENTS
  4 .ARM          00000008  080077fc  080077fc  000087fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007804  08007804  00009334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007804  08007804  00008804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007808  08007808  00008808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0800780c  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000067d8  20000338  08007b40  00009338  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006b10  08007b40  00009b10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0c7  00000000  00000000  00009364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000500c  00000000  00000000  0002642b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  0002b438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001195  00000000  00000000  0002cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230ea  00000000  00000000  0002dc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016aa5  00000000  00000000  00050d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6997  00000000  00000000  0006780c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000001e  00000000  00000000  0013e1a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000560c  00000000  00000000  0013e1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000001b9  00000000  00000000  001437d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00001ab2  00000000  00000000  00143989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b90:	f000 b80c 	b.w	8000bac <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f006 fc98 	bl	80074d0 <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__do_global_dtors_aux>:
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	4c05      	ldr	r4, [pc, #20]	@ (8000bc8 <__do_global_dtors_aux+0x18>)
 8000bb4:	7823      	ldrb	r3, [r4, #0]
 8000bb6:	b933      	cbnz	r3, 8000bc6 <__do_global_dtors_aux+0x16>
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <__do_global_dtors_aux+0x1c>)
 8000bba:	b113      	cbz	r3, 8000bc2 <__do_global_dtors_aux+0x12>
 8000bbc:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <__do_global_dtors_aux+0x20>)
 8000bbe:	f3af 8000 	nop.w
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	7023      	strb	r3, [r4, #0]
 8000bc6:	bd10      	pop	{r4, pc}
 8000bc8:	20000338 	.word	0x20000338
 8000bcc:	00000000 	.word	0x00000000
 8000bd0:	08007770 	.word	0x08007770

08000bd4 <frame_dummy>:
 8000bd4:	b508      	push	{r3, lr}
 8000bd6:	4b03      	ldr	r3, [pc, #12]	@ (8000be4 <frame_dummy+0x10>)
 8000bd8:	b11b      	cbz	r3, 8000be2 <frame_dummy+0xe>
 8000bda:	4903      	ldr	r1, [pc, #12]	@ (8000be8 <frame_dummy+0x14>)
 8000bdc:	4803      	ldr	r0, [pc, #12]	@ (8000bec <frame_dummy+0x18>)
 8000bde:	f3af 8000 	nop.w
 8000be2:	bd08      	pop	{r3, pc}
 8000be4:	00000000 	.word	0x00000000
 8000be8:	2000033c 	.word	0x2000033c
 8000bec:	08007770 	.word	0x08007770

08000bf0 <_power2p>:
#ifndef DBL_MAX
#define DBL_MAX 1.79769e+308
#endif

// returns 1 if power of 2
int _power2p(int value) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	if (value == 0) return 1;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <_power2p+0x12>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e011      	b.n	8000c26 <_power2p+0x36>
	if (value == 2) return 1;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d101      	bne.n	8000c0c <_power2p+0x1c>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e00c      	b.n	8000c26 <_power2p+0x36>
	if (value & 0x1) return 0;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <_power2p+0x2a>
 8000c16:	2300      	movs	r3, #0
 8000c18:	e005      	b.n	8000c26 <_power2p+0x36>
	return (_power2p(value >> 1));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	105b      	asrs	r3, r3, #1
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ffe6 	bl	8000bf0 <_power2p>
 8000c24:	4603      	mov	r3, r0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_bitcount>:

// count number of bits
int _bitcount(int value) {
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
	if (value == 0) return 0;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <_bitcount+0x12>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e010      	b.n	8000c62 <_bitcount+0x34>
	if (value == 1) return 1;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d101      	bne.n	8000c4a <_bitcount+0x1c>
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00b      	b.n	8000c62 <_bitcount+0x34>
	if (value == 2) return 2;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d101      	bne.n	8000c54 <_bitcount+0x26>
 8000c50:	2302      	movs	r3, #2
 8000c52:	e006      	b.n	8000c62 <_bitcount+0x34>
	return _bitcount(value >> 1) + 1;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	105b      	asrs	r3, r3, #1
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ffe8 	bl	8000c2e <_bitcount>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	3301      	adds	r3, #1
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_ceil_power2>:

// closest power of 2 above or equal
int _ceil_power2(int value) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	if (_power2p(value)) return value;
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffbc 	bl	8000bf0 <_power2p>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <_ceil_power2+0x18>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	e018      	b.n	8000cb4 <_ceil_power2+0x4a>
	
	if (value == 1) return 2;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d101      	bne.n	8000c8c <_ceil_power2+0x22>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e013      	b.n	8000cb4 <_ceil_power2+0x4a>
	int j, i = _bitcount(value);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ffce 	bl	8000c2e <_bitcount>
 8000c92:	60f8      	str	r0, [r7, #12]
	int res = 1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
	for (j = 0; j < i; j++) res <<= 1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e005      	b.n	8000caa <_ceil_power2+0x40>
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dbf5      	blt.n	8000c9e <_ceil_power2+0x34>
	return res;
 8000cb2:	693b      	ldr	r3, [r7, #16]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_floor_power2>:

// closest power of 2 below or equal
int _floor_power2(int value) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	if (_power2p(value)) return value;
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff93 	bl	8000bf0 <_power2p>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <_floor_power2+0x18>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	e006      	b.n	8000ce2 <_floor_power2+0x26>
	return _ceil_power2(value)/2;
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ffc8 	bl	8000c6a <_ceil_power2>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	0fda      	lsrs	r2, r3, #31
 8000cde:	4413      	add	r3, r2
 8000ce0:	105b      	asrs	r3, r3, #1
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_iabs>:

// abs value
int _iabs(int x) {
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
	if (x >= 0) return x;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db01      	blt.n	8000cfc <_iabs+0x12>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	e001      	b.n	8000d00 <_iabs+0x16>
	return -x;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	425b      	negs	r3, r3
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_2power>:

// 2 power
int _2power(int i) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	int res = 1, j;
 8000d14:	2301      	movs	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
	for (j = 0; j < i; j++) res <<= 1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	e005      	b.n	8000d2a <_2power+0x1e>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	3301      	adds	r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	dbf5      	blt.n	8000d1e <_2power+0x12>
	return res;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <_dywapitch_computeWaveletPitch>:
typedef struct _minmax {
	int index;
	struct _minmax *next;
} minmax;

double _dywapitch_computeWaveletPitch(double * samples, int startsample, int samplecount) {
 8000d40:	b5b0      	push	{r4, r5, r7, lr}
 8000d42:	b0c6      	sub	sp, #280	@ 0x118
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6278      	str	r0, [r7, #36]	@ 0x24
 8000d48:	6239      	str	r1, [r7, #32]
 8000d4a:	61fa      	str	r2, [r7, #28]
	double pitchF = 0.0;
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	
	int i, j;
	double si, si1;
	
	// must be a power of 2
	samplecount = _floor_power2(samplecount);
 8000d58:	69f8      	ldr	r0, [r7, #28]
 8000d5a:	f7ff ffaf 	bl	8000cbc <_floor_power2>
 8000d5e:	61f8      	str	r0, [r7, #28]
	
	double *sam = (double *)malloc(sizeof(double)*samplecount);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	4618      	mov	r0, r3
 8000d66:	f005 fefd 	bl	8006b64 <malloc>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	memcpy(sam, samples + startsample, sizeof(double)*samplecount);
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d76:	18d1      	adds	r1, r2, r3
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000d82:	f006 f809 	bl	8006d98 <memcpy>
	int curSamNb = samplecount;
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	
	int *distances = (int *)malloc(sizeof(int)*samplecount);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f005 fee7 	bl	8006b64 <malloc>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	int *mins = (int *)malloc(sizeof(int)*samplecount);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f005 fedf 	bl	8006b64 <malloc>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	int *maxs = (int *)malloc(sizeof(int)*samplecount);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f005 fed7 	bl	8006b64 <malloc>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	int nbMins, nbMaxs;
	
	// algorithm parameters
	int maxFLWTlevels = 6;
 8000dbc:	2306      	movs	r3, #6
 8000dbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	double maxF = 3000.;
 8000dc2:	a37c      	add	r3, pc, #496	@ (adr r3, 8000fb4 <_dywapitch_computeWaveletPitch+0x274>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	int differenceLevelsN = 3;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	677b      	str	r3, [r7, #116]	@ 0x74
	double maximaThresholdRatio = 0.75;
 8000dd0:	f04f 0200 	mov.w	r2, #0
 8000dd4:	4b74      	ldr	r3, [pc, #464]	@ (8000fa8 <_dywapitch_computeWaveletPitch+0x268>)
 8000dd6:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	
	double ampltitudeThreshold;  
	double theDC = 0.0;
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	
	{ // compute ampltitudeThreshold and theDC
		//first compute the DC and maxAMplitude
		double maxValue = -DBL_MAX;
 8000de6:	a368      	add	r3, pc, #416	@ (adr r3, 8000f88 <_dywapitch_computeWaveletPitch+0x248>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
		double minValue = DBL_MAX;
 8000df0:	a367      	add	r3, pc, #412	@ (adr r3, 8000f90 <_dywapitch_computeWaveletPitch+0x250>)
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
		for (i = 0; i < samplecount;i++) {
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000e00:	e032      	b.n	8000e68 <_dywapitch_computeWaveletPitch+0x128>
			si = sam[i];
 8000e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000e0c:	4413      	add	r3, r2
 8000e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e12:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			theDC = theDC + si;
 8000e16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000e1a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8000e1e:	f7ff fa35 	bl	800028c <__adddf3>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
			if (si > maxValue) maxValue = si;
 8000e2a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8000e2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000e32:	f7ff fe71 	bl	8000b18 <__aeabi_dcmpgt>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <_dywapitch_computeWaveletPitch+0x104>
 8000e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000e40:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
			if (si < minValue) minValue = si;
 8000e44:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8000e48:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000e4c:	f7ff fe46 	bl	8000adc <__aeabi_dcmplt>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <_dywapitch_computeWaveletPitch+0x11e>
 8000e56:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000e5a:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
		for (i = 0; i < samplecount;i++) {
 8000e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e62:	3301      	adds	r3, #1
 8000e64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000e68:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	dbc7      	blt.n	8000e02 <_dywapitch_computeWaveletPitch+0xc2>
		}
		theDC = theDC/samplecount;
 8000e72:	69f8      	ldr	r0, [r7, #28]
 8000e74:	f7ff fb56 	bl	8000524 <__aeabi_i2d>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8000e80:	f7ff fce4 	bl	800084c <__aeabi_ddiv>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
		maxValue = maxValue - theDC;
 8000e8c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8000e90:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8000e94:	f7ff f9f8 	bl	8000288 <__aeabi_dsub>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
		minValue = minValue - theDC;
 8000ea0:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8000ea4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8000ea8:	f7ff f9ee 	bl	8000288 <__aeabi_dsub>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
		double amplitudeMax = (maxValue > -minValue ? maxValue : -minValue);
 8000eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000ebe:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ec8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8000ecc:	f7ff fe24 	bl	8000b18 <__aeabi_dcmpgt>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <_dywapitch_computeWaveletPitch+0x19c>
 8000ed6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8000eda:	e005      	b.n	8000ee8 <_dywapitch_computeWaveletPitch+0x1a8>
 8000edc:	f8d7 40e0 	ldr.w	r4, [r7, #224]	@ 0xe0
 8000ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000ee4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8000ee8:	e9c7 4518 	strd	r4, r5, [r7, #96]	@ 0x60
		
		ampltitudeThreshold = amplitudeMax*maximaThresholdRatio;
 8000eec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000ef0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8000ef4:	f7ff fb80 	bl	80005f8 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		//asLog("dywapitch theDC=%f ampltitudeThreshold=%f\n", theDC, ampltitudeThreshold);
		
	}
	
	// levels, start without downsampling..
	int curLevel = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	double curModeDistance = -1.;
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <_dywapitch_computeWaveletPitch+0x26c>)
 8000f0c:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
	int delta;
	
	while(1) {
		
		// delta
		delta = 44100./(_2power(curLevel)*maxF);
 8000f10:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000f14:	f7ff fefa 	bl	8000d0c <_2power>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fb02 	bl	8000524 <__aeabi_i2d>
 8000f20:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000f24:	f7ff fb68 	bl	80005f8 <__aeabi_dmul>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	a11a      	add	r1, pc, #104	@ (adr r1, 8000f98 <_dywapitch_computeWaveletPitch+0x258>)
 8000f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f32:	f7ff fc8b 	bl	800084c <__aeabi_ddiv>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f7ff fdf5 	bl	8000b2c <__aeabi_d2iz>
 8000f42:	4603      	mov	r3, r0
 8000f44:	657b      	str	r3, [r7, #84]	@ 0x54
		//("dywapitch doing level=%ld delta=%ld\n", curLevel, delta);
		
		if (curSamNb < 2) goto cleanup;
 8000f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	f340 8350 	ble.w	80015f0 <_dywapitch_computeWaveletPitch+0x8b0>
		
		// compute the first maximums and minumums after zero-crossing
		// store if greater than the min threshold
		// and if at a greater distance than delta
		double dv, previousDV = -1000;
 8000f50:	a313      	add	r3, pc, #76	@ (adr r3, 8000fa0 <_dywapitch_computeWaveletPitch+0x260>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
		nbMins = nbMaxs = 0;   
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000f64:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
		int lastMinIndex = -1000000;
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <_dywapitch_computeWaveletPitch+0x270>)
 8000f6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		int lastmaxIndex = -1000000;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <_dywapitch_computeWaveletPitch+0x270>)
 8000f70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		int findMax = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
		int findMin = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		for (i = 1; i < curSamNb; i++) {
 8000f80:	2301      	movs	r3, #1
 8000f82:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000f86:	e121      	b.n	80011cc <_dywapitch_computeWaveletPitch+0x48c>
 8000f88:	57ca82ae 	.word	0x57ca82ae
 8000f8c:	ffeffffc 	.word	0xffeffffc
 8000f90:	57ca82ae 	.word	0x57ca82ae
 8000f94:	7feffffc 	.word	0x7feffffc
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	40e58880 	.word	0x40e58880
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	c08f4000 	.word	0xc08f4000
 8000fa8:	3fe80000 	.word	0x3fe80000
 8000fac:	bff00000 	.word	0xbff00000
 8000fb0:	fff0bdc0 	.word	0xfff0bdc0
 8000fb4:	00000000 	.word	0x00000000
 8000fb8:	40a77000 	.word	0x40a77000
			si = sam[i] - theDC;
 8000fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000fc6:	4413      	add	r3, r2
 8000fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fcc:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8000fd0:	f7ff f95a 	bl	8000288 <__aeabi_dsub>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			si1 = sam[i-1] - theDC;
 8000fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000fe0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000fec:	4413      	add	r3, r2
 8000fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff2:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8000ff6:	f7ff f947 	bl	8000288 <__aeabi_dsub>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			
			if (si1 <= 0 && si > 0) {findMax = 1; findMin = 0; }
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800100e:	f7ff fd6f 	bl	8000af0 <__aeabi_dcmple>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d010      	beq.n	800103a <_dywapitch_computeWaveletPitch+0x2fa>
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001024:	f7ff fd78 	bl	8000b18 <__aeabi_dcmpgt>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <_dywapitch_computeWaveletPitch+0x2fa>
 800102e:	2301      	movs	r3, #1
 8001030:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			if (si1 >= 0 && si < 0) {findMin = 1; findMax = 0; }
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001046:	f7ff fd5d 	bl	8000b04 <__aeabi_dcmpge>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d010      	beq.n	8001072 <_dywapitch_computeWaveletPitch+0x332>
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800105c:	f7ff fd3e 	bl	8000adc <__aeabi_dcmplt>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <_dywapitch_computeWaveletPitch+0x332>
 8001066:	2301      	movs	r3, #1
 8001068:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			
			// min or max ?
			dv = si - si1;
 8001072:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001076:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800107a:	f7ff f905 	bl	8000288 <__aeabi_dsub>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			
			if (previousDV > -1000) {
 8001086:	f20f 53bc 	addw	r3, pc, #1468	@ 0x5bc
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001092:	f7ff fd41 	bl	8000b18 <__aeabi_dcmpgt>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 808e 	beq.w	80011ba <_dywapitch_computeWaveletPitch+0x47a>
				
				if (findMin && previousDV < 0 && dv >= 0) { 
 800109e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d042      	beq.n	800112c <_dywapitch_computeWaveletPitch+0x3ec>
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	f04f 0300 	mov.w	r3, #0
 80010ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80010b2:	f7ff fd13 	bl	8000adc <__aeabi_dcmplt>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d037      	beq.n	800112c <_dywapitch_computeWaveletPitch+0x3ec>
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	f04f 0300 	mov.w	r3, #0
 80010c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80010c8:	f7ff fd1c 	bl	8000b04 <__aeabi_dcmpge>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d02c      	beq.n	800112c <_dywapitch_computeWaveletPitch+0x3ec>
					// minimum
					if (fabs(si1) >= ampltitudeThreshold) {
 80010d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80010e6:	f7ff fd03 	bl	8000af0 <__aeabi_dcmple>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d01d      	beq.n	800112c <_dywapitch_computeWaveletPitch+0x3ec>
						if (i - 1 > lastMinIndex + delta) {
 80010f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80010f4:	1e5a      	subs	r2, r3, #1
 80010f6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 80010fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010fc:	440b      	add	r3, r1
 80010fe:	429a      	cmp	r2, r3
 8001100:	dd14      	ble.n	800112c <_dywapitch_computeWaveletPitch+0x3ec>
							mins[nbMins++] = i - 1;
 8001102:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001112:	4413      	add	r3, r2
 8001114:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001118:	3a01      	subs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]
							lastMinIndex = i - 1;
 800111c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001120:	3b01      	subs	r3, #1
 8001122:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
							findMin = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
						// if DEBUGG then put "min "&abs(si)&" < thresh = "&ampltitudeThreshold
						//--
					}
				}
				
				if (findMax && previousDV > 0 && dv <= 0) {
 800112c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001130:	2b00      	cmp	r3, #0
 8001132:	d042      	beq.n	80011ba <_dywapitch_computeWaveletPitch+0x47a>
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001140:	f7ff fcea 	bl	8000b18 <__aeabi_dcmpgt>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d037      	beq.n	80011ba <_dywapitch_computeWaveletPitch+0x47a>
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001156:	f7ff fccb 	bl	8000af0 <__aeabi_dcmple>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d02c      	beq.n	80011ba <_dywapitch_computeWaveletPitch+0x47a>
					// maximum
					if (fabs(si1) >= ampltitudeThreshold) {
 8001160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001166:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001170:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001174:	f7ff fcbc 	bl	8000af0 <__aeabi_dcmple>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d01d      	beq.n	80011ba <_dywapitch_computeWaveletPitch+0x47a>
						if (i -1 > lastmaxIndex + delta) {
 800117e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8001188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800118a:	440b      	add	r3, r1
 800118c:	429a      	cmp	r2, r3
 800118e:	dd14      	ble.n	80011ba <_dywapitch_computeWaveletPitch+0x47a>
							maxs[nbMaxs++] = i - 1;
 8001190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80011a0:	4413      	add	r3, r2
 80011a2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80011a6:	3a01      	subs	r2, #1
 80011a8:	601a      	str	r2, [r3, #0]
							lastmaxIndex = i - 1;
 80011aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
							findMax = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
						//--
					}
				}
			}
			
			previousDV = dv;
 80011ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80011be:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
		for (i = 1; i < curSamNb; i++) {
 80011c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011c6:	3301      	adds	r3, #1
 80011c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80011cc:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80011d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f6ff aef1 	blt.w	8000fbc <_dywapitch_computeWaveletPitch+0x27c>
		}
		
		if (nbMins == 0 && nbMaxs == 0) {
 80011da:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d104      	bne.n	80011ec <_dywapitch_computeWaveletPitch+0x4ac>
 80011e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8204 	beq.w	80015f4 <_dywapitch_computeWaveletPitch+0x8b4>
		//if DEBUGG then put count(maxs)&&"maxs &"&&count(mins)&&"mins"
		
		// maxs = [5, 20, 100,...]
		// compute distances
		int d;
		memset(distances, 0, samplecount*sizeof(int));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	461a      	mov	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80011f8:	f005 fd8a 	bl	8006d10 <memset>
		for (i = 0 ; i < nbMins ; i++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001202:	e03e      	b.n	8001282 <_dywapitch_computeWaveletPitch+0x542>
			for (j = 1; j < differenceLevelsN; j++) {
 8001204:	2301      	movs	r3, #1
 8001206:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800120a:	e030      	b.n	800126e <_dywapitch_computeWaveletPitch+0x52e>
				if (i+j < nbMins) {
 800120c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001210:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001214:	4413      	add	r3, r2
 8001216:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800121a:	429a      	cmp	r2, r3
 800121c:	dd22      	ble.n	8001264 <_dywapitch_computeWaveletPitch+0x524>
					d = _iabs(mins[i] - mins[i+j]);
 800121e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001228:	4413      	add	r3, r2
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8001230:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001234:	440b      	add	r3, r1
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800123c:	440b      	add	r3, r1
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fd51 	bl	8000cea <_iabs>
 8001248:	6438      	str	r0, [r7, #64]	@ 0x40
					//asLog("dywapitch i=%ld j=%ld d=%ld\n", i, j, d);
					distances[d] = distances[d] + 1;
 800124a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001252:	4413      	add	r3, r2
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800125e:	440b      	add	r3, r1
 8001260:	3201      	adds	r2, #1
 8001262:	601a      	str	r2, [r3, #0]
			for (j = 1; j < differenceLevelsN; j++) {
 8001264:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001268:	3301      	adds	r3, #1
 800126a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800126e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001272:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001274:	429a      	cmp	r2, r3
 8001276:	dbc9      	blt.n	800120c <_dywapitch_computeWaveletPitch+0x4cc>
		for (i = 0 ; i < nbMins ; i++) {
 8001278:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800127c:	3301      	adds	r3, #1
 800127e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001282:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001286:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800128a:	429a      	cmp	r2, r3
 800128c:	dbba      	blt.n	8001204 <_dywapitch_computeWaveletPitch+0x4c4>
				}
			}
		}
		for (i = 0 ; i < nbMaxs ; i++) {
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001294:	e03e      	b.n	8001314 <_dywapitch_computeWaveletPitch+0x5d4>
			for (j = 1; j < differenceLevelsN; j++) {
 8001296:	2301      	movs	r3, #1
 8001298:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800129c:	e030      	b.n	8001300 <_dywapitch_computeWaveletPitch+0x5c0>
				if (i+j < nbMaxs) {
 800129e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80012a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80012a6:	4413      	add	r3, r2
 80012a8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dd22      	ble.n	80012f6 <_dywapitch_computeWaveletPitch+0x5b6>
					d = _iabs(maxs[i] - maxs[i+j]);
 80012b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80012ba:	4413      	add	r3, r2
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 80012c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80012c6:	440b      	add	r3, r1
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80012ce:	440b      	add	r3, r1
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fd08 	bl	8000cea <_iabs>
 80012da:	6438      	str	r0, [r7, #64]	@ 0x40
					//asLog("dywapitch i=%ld j=%ld d=%ld\n", i, j, d);
					distances[d] = distances[d] + 1;
 80012dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80012e4:	4413      	add	r3, r2
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80012f0:	440b      	add	r3, r1
 80012f2:	3201      	adds	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
			for (j = 1; j < differenceLevelsN; j++) {
 80012f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80012fa:	3301      	adds	r3, #1
 80012fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001300:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001304:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001306:	429a      	cmp	r2, r3
 8001308:	dbc9      	blt.n	800129e <_dywapitch_computeWaveletPitch+0x55e>
		for (i = 0 ; i < nbMaxs ; i++) {
 800130a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800130e:	3301      	adds	r3, #1
 8001310:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001314:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8001318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800131c:	429a      	cmp	r2, r3
 800131e:	dbba      	blt.n	8001296 <_dywapitch_computeWaveletPitch+0x556>
				}
			}
		}
		
		// find best summed distance
		int bestDistance = -1;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001324:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		int bestValue = -1;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800132c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		for (i = 0; i< curSamNb; i++) {
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001336:	e055      	b.n	80013e4 <_dywapitch_computeWaveletPitch+0x6a4>
			int summed = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			for (j = -delta ; j <= delta ; j++) {
 800133e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001340:	425b      	negs	r3, r3
 8001342:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001346:	e023      	b.n	8001390 <_dywapitch_computeWaveletPitch+0x650>
				if (i+j >=0 && i+j < curSamNb)
 8001348:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800134c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001350:	4413      	add	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	db17      	blt.n	8001386 <_dywapitch_computeWaveletPitch+0x646>
 8001356:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800135a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800135e:	4413      	add	r3, r2
 8001360:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001364:	429a      	cmp	r2, r3
 8001366:	dd0e      	ble.n	8001386 <_dywapitch_computeWaveletPitch+0x646>
					summed += distances[i+j];
 8001368:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800136c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001378:	4413      	add	r3, r2
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001380:	4413      	add	r3, r2
 8001382:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			for (j = -delta ; j <= delta ; j++) {
 8001386:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800138a:	3301      	adds	r3, #1
 800138c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001390:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001396:	429a      	cmp	r2, r3
 8001398:	ddd6      	ble.n	8001348 <_dywapitch_computeWaveletPitch+0x608>
			}
			//asLog("dywapitch i=%ld summed=%ld bestDistance=%ld\n", i, summed, bestDistance);
			if (summed == bestValue) {
 800139a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800139e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d10b      	bne.n	80013be <_dywapitch_computeWaveletPitch+0x67e>
				if (i == 2*bestDistance)
 80013a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d112      	bne.n	80013da <_dywapitch_computeWaveletPitch+0x69a>
					bestDistance = i;
 80013b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80013bc:	e00d      	b.n	80013da <_dywapitch_computeWaveletPitch+0x69a>
				
			} else if (summed > bestValue) {
 80013be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80013c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dd07      	ble.n	80013da <_dywapitch_computeWaveletPitch+0x69a>
				bestValue = summed;
 80013ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
				bestDistance = i;
 80013d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		for (i = 0; i< curSamNb; i++) {
 80013da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013de:	3301      	adds	r3, #1
 80013e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80013e4:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80013e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dba3      	blt.n	8001338 <_dywapitch_computeWaveletPitch+0x5f8>
			}
		}
		//asLog("dywapitch bestDistance=%ld\n", bestDistance);
		
		// averaging
		double distAvg = 0.0;
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		double nbDists = 0;
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		for (j = -delta ; j <= delta ; j++) {
 8001408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800140a:	425b      	negs	r3, r3
 800140c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001410:	e043      	b.n	800149a <_dywapitch_computeWaveletPitch+0x75a>
			if (bestDistance+j >=0 && bestDistance+j < samplecount) {
 8001412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001416:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800141a:	4413      	add	r3, r2
 800141c:	2b00      	cmp	r3, #0
 800141e:	db37      	blt.n	8001490 <_dywapitch_computeWaveletPitch+0x750>
 8001420:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001424:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001428:	4413      	add	r3, r2
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	429a      	cmp	r2, r3
 800142e:	dd2f      	ble.n	8001490 <_dywapitch_computeWaveletPitch+0x750>
				int nbDist = distances[bestDistance+j];
 8001430:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001434:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001440:	4413      	add	r3, r2
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	647b      	str	r3, [r7, #68]	@ 0x44
				if (nbDist > 0) {
 8001446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001448:	2b00      	cmp	r3, #0
 800144a:	dd21      	ble.n	8001490 <_dywapitch_computeWaveletPitch+0x750>
					nbDists += nbDist;
 800144c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800144e:	f7ff f869 	bl	8000524 <__aeabi_i2d>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800145a:	f7fe ff17 	bl	800028c <__adddf3>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
					distAvg += (bestDistance+j)*nbDist;
 8001466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800146a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800146e:	4413      	add	r3, r2
 8001470:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f854 	bl	8000524 <__aeabi_i2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001484:	f7fe ff02 	bl	800028c <__adddf3>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		for (j = -delta ; j <= delta ; j++) {
 8001490:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001494:	3301      	adds	r3, #1
 8001496:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800149a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800149e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014a0:	429a      	cmp	r2, r3
 80014a2:	ddb6      	ble.n	8001412 <_dywapitch_computeWaveletPitch+0x6d2>
				}
			}
		}
		// this is our mode distance !
		distAvg /= nbDists;
 80014a4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80014a8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80014ac:	f7ff f9ce 	bl	800084c <__aeabi_ddiv>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		//asLog("dywapitch distAvg=%f\n", distAvg);
		
		// continue the levels ?
		if (curModeDistance > -1.) {
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b60      	ldr	r3, [pc, #384]	@ (8001640 <_dywapitch_computeWaveletPitch+0x900>)
 80014be:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80014c2:	f7ff fb29 	bl	8000b18 <__aeabi_dcmpgt>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d03c      	beq.n	8001546 <_dywapitch_computeWaveletPitch+0x806>
			double similarity = fabs(distAvg*2 - curModeDistance);
 80014cc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	f7fe feda 	bl	800028c <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80014e4:	f7fe fed0 	bl	8000288 <__aeabi_dsub>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4611      	mov	r1, r2
 80014ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80014f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
			if (similarity <= 2*delta) {
 80014f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f812 	bl	8000524 <__aeabi_i2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001508:	f7ff faf2 	bl	8000af0 <__aeabi_dcmple>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d019      	beq.n	8001546 <_dywapitch_computeWaveletPitch+0x806>
				//if DEBUGG then put "similarity="&similarity&&"delta="&delta&&"ok"
 				//asLog("dywapitch similarity=%f OK !\n", similarity);
				// two consecutive similar mode distances : ok !
				pitchF = 44100./(_2power(curLevel-1)*curModeDistance);
 8001512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001516:	3b01      	subs	r3, #1
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fbf7 	bl	8000d0c <_2power>
 800151e:	4603      	mov	r3, r0
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ffff 	bl	8000524 <__aeabi_i2d>
 8001526:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800152a:	f7ff f865 	bl	80005f8 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	a141      	add	r1, pc, #260	@ (adr r1, 8001638 <_dywapitch_computeWaveletPitch+0x8f8>)
 8001534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001538:	f7ff f988 	bl	800084c <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
				goto cleanup;
 8001544:	e05b      	b.n	80015fe <_dywapitch_computeWaveletPitch+0x8be>
			}
			//if DEBUGG then put "similarity="&similarity&&"delta="&delta&&"not"
		}
		
		// not similar, continue next level
		curModeDistance = distAvg;
 8001546:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800154a:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
		
		curLevel = curLevel + 1;
 800154e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001552:	3301      	adds	r3, #1
 8001554:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (curLevel >= maxFLWTlevels) {
 8001558:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800155c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001560:	429a      	cmp	r2, r3
 8001562:	da49      	bge.n	80015f8 <_dywapitch_computeWaveletPitch+0x8b8>
 			//asLog("dywapitch max levels reached, exiting\n");
			goto cleanup;
		}
		
		// downsample
		if (curSamNb < 2) {
 8001564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001568:	2b01      	cmp	r3, #1
 800156a:	dd47      	ble.n	80015fc <_dywapitch_computeWaveletPitch+0x8bc>
 			//asLog("dywapitch not enough samples, exiting\n");
			goto cleanup;
		}
		for (i = 0; i < curSamNb/2; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001572:	e02b      	b.n	80015cc <_dywapitch_computeWaveletPitch+0x88c>
			sam[i] = (sam[2*i] + sam[2*i + 1])/2.;
 8001574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800157e:	4413      	add	r3, r2
 8001580:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	3308      	adds	r3, #8
 800158c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001590:	4413      	add	r3, r2
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7fe fe79 	bl	800028c <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80015ac:	18d4      	adds	r4, r2, r3
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015b6:	f7ff f949 	bl	800084c <__aeabi_ddiv>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	e9c4 2300 	strd	r2, r3, [r4]
		for (i = 0; i < curSamNb/2; i++) {
 80015c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80015c6:	3301      	adds	r3, #1
 80015c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80015cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80015d0:	0fda      	lsrs	r2, r3, #31
 80015d2:	4413      	add	r3, r2
 80015d4:	105b      	asrs	r3, r3, #1
 80015d6:	461a      	mov	r2, r3
 80015d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80015dc:	4293      	cmp	r3, r2
 80015de:	dbc9      	blt.n	8001574 <_dywapitch_computeWaveletPitch+0x834>
		}
		curSamNb /= 2;
 80015e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80015e4:	0fda      	lsrs	r2, r3, #31
 80015e6:	4413      	add	r3, r2
 80015e8:	105b      	asrs	r3, r3, #1
 80015ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	while(1) {
 80015ee:	e48f      	b.n	8000f10 <_dywapitch_computeWaveletPitch+0x1d0>
		if (curSamNb < 2) goto cleanup;
 80015f0:	bf00      	nop
 80015f2:	e004      	b.n	80015fe <_dywapitch_computeWaveletPitch+0x8be>
			goto cleanup;
 80015f4:	bf00      	nop
 80015f6:	e002      	b.n	80015fe <_dywapitch_computeWaveletPitch+0x8be>
			goto cleanup;
 80015f8:	bf00      	nop
 80015fa:	e000      	b.n	80015fe <_dywapitch_computeWaveletPitch+0x8be>
			goto cleanup;
 80015fc:	bf00      	nop
	}
	
	///
cleanup:
	free(distances);
 80015fe:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001602:	f005 fab7 	bl	8006b74 <free>
	free(mins);
 8001606:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800160a:	f005 fab3 	bl	8006b74 <free>
	free(maxs);
 800160e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001612:	f005 faaf 	bl	8006b74 <free>
	free(sam);
 8001616:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800161a:	f005 faab 	bl	8006b74 <free>
	
	return pitchF;
 800161e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001622:	ec43 2b17 	vmov	d7, r2, r3
}
 8001626:	eeb0 0a47 	vmov.f32	s0, s14
 800162a:	eef0 0a67 	vmov.f32	s1, s15
 800162e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001632:	46bd      	mov	sp, r7
 8001634:	bdb0      	pop	{r4, r5, r7, pc}
 8001636:	bf00      	nop
 8001638:	00000000 	.word	0x00000000
 800163c:	40e58880 	.word	0x40e58880
 8001640:	bff00000 	.word	0xbff00000
 8001644:	00000000 	.word	0x00000000
 8001648:	c08f4000 	.word	0xc08f4000
 800164c:	00000000 	.word	0x00000000

08001650 <_dywapitch_dynamicprocess>:
 algorithm side-effect : divide it or double it by 2. 
 - a lonely voiced pitch cannot happen, nor can a sudden drop in the middle
 of a voiced segment. Smooth the plot. 
***/

double _dywapitch_dynamicprocess(dywapitchtracker *pitchtracker, double pitch) {
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b08a      	sub	sp, #40	@ 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	ed87 0b00 	vstr	d0, [r7]
	
	// equivalence
	if (pitch == 0.0) pitch = -1.0;
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001668:	f7ff fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <_dywapitch_dynamicprocess+0x2c>
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	4ba0      	ldr	r3, [pc, #640]	@ (80018f8 <_dywapitch_dynamicprocess+0x2a8>)
 8001678:	e9c7 2300 	strd	r2, r3, [r7]
	
	//
	double estimatedPitch = -1;
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b9d      	ldr	r3, [pc, #628]	@ (80018f8 <_dywapitch_dynamicprocess+0x2a8>)
 8001682:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double acceptedError = 0.2f;
 8001686:	a39a      	add	r3, pc, #616	@ (adr r3, 80018f0 <_dywapitch_dynamicprocess+0x2a0>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int maxConfidence = 5;
 8001690:	2305      	movs	r3, #5
 8001692:	617b      	str	r3, [r7, #20]
	
	if (pitch != -1) {
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b97      	ldr	r3, [pc, #604]	@ (80018f8 <_dywapitch_dynamicprocess+0x2a8>)
 800169a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800169e:	f7ff fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 8103 	bne.w	80018b0 <_dywapitch_dynamicprocess+0x260>
		// I have a pitch here
		
		if (pitchtracker->_prevPitch == -1) {
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b90      	ldr	r3, [pc, #576]	@ (80018f8 <_dywapitch_dynamicprocess+0x2a8>)
 80016b6:	f7ff fa07 	bl	8000ac8 <__aeabi_dcmpeq>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00c      	beq.n	80016da <_dywapitch_dynamicprocess+0x8a>
			// no previous
			estimatedPitch = pitch;
 80016c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
			pitchtracker->_prevPitch = pitch;
 80016c8:	68f9      	ldr	r1, [r7, #12]
 80016ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ce:	e9c1 2300 	strd	r2, r3, [r1]
			pitchtracker->_pitchConfidence = 1;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2201      	movs	r2, #1
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	e120      	b.n	800191c <_dywapitch_dynamicprocess+0x2cc>
			
		} else if (abs(pitchtracker->_prevPitch - pitch)/pitch < acceptedError) {
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016e4:	f7fe fdd0 	bl	8000288 <__aeabi_dsub>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa1c 	bl	8000b2c <__aeabi_d2iz>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bfb8      	it	lt
 80016fa:	425b      	neglt	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff11 	bl	8000524 <__aeabi_i2d>
 8001702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001706:	f7ff f8a1 	bl	800084c <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001712:	f7ff fa01 	bl	8000b18 <__aeabi_dcmpgt>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d015      	beq.n	8001748 <_dywapitch_dynamicprocess+0xf8>
			// similar : remember and increment pitch
			pitchtracker->_prevPitch = pitch;
 800171c:	68f9      	ldr	r1, [r7, #12]
 800171e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001722:	e9c1 2300 	strd	r2, r3, [r1]
			estimatedPitch = pitch;
 8001726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800172a:	e9c7 2308 	strd	r2, r3, [r7, #32]
			pitchtracker->_pitchConfidence = min(maxConfidence, pitchtracker->_pitchConfidence + 1); // maximum 3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	dd03      	ble.n	8001740 <_dywapitch_dynamicprocess+0xf0>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	3301      	adds	r3, #1
 800173e:	e000      	b.n	8001742 <_dywapitch_dynamicprocess+0xf2>
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	6093      	str	r3, [r2, #8]
 8001746:	e0e9      	b.n	800191c <_dywapitch_dynamicprocess+0x2cc>
			
		} else if ((pitchtracker->_pitchConfidence >= maxConfidence-2) && abs(pitchtracker->_prevPitch - 2.*pitch)/(2.*pitch) < acceptedError) {
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3b02      	subs	r3, #2
 8001750:	429a      	cmp	r2, r3
 8001752:	db42      	blt.n	80017da <_dywapitch_dynamicprocess+0x18a>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	e9d3 4500 	ldrd	r4, r5, [r3]
 800175a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	f7fe fd93 	bl	800028c <__adddf3>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4620      	mov	r0, r4
 800176c:	4629      	mov	r1, r5
 800176e:	f7fe fd8b 	bl	8000288 <__aeabi_dsub>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff f9d7 	bl	8000b2c <__aeabi_d2iz>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	bfb8      	it	lt
 8001784:	425b      	neglt	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fecc 	bl	8000524 <__aeabi_i2d>
 800178c:	4604      	mov	r4, r0
 800178e:	460d      	mov	r5, r1
 8001790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	f7fe fd78 	bl	800028c <__adddf3>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7ff f852 	bl	800084c <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017b0:	f7ff f9b2 	bl	8000b18 <__aeabi_dcmpgt>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00f      	beq.n	80017da <_dywapitch_dynamicprocess+0x18a>
			// close to half the last pitch, which is trusted
			estimatedPitch = 2.*pitch;
 80017ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	f7fe fd63 	bl	800028c <__adddf3>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
			pitchtracker->_prevPitch = estimatedPitch;
 80017ce:	68f9      	ldr	r1, [r7, #12]
 80017d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017d4:	e9c1 2300 	strd	r2, r3, [r1]
 80017d8:	e0a0      	b.n	800191c <_dywapitch_dynamicprocess+0x2cc>
			
		} else if ((pitchtracker->_pitchConfidence >= maxConfidence-2) && abs(pitchtracker->_prevPitch - 0.5*pitch)/(0.5*pitch) < acceptedError) {
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3b02      	subs	r3, #2
 80017e2:	429a      	cmp	r2, r3
 80017e4:	db45      	blt.n	8001872 <_dywapitch_dynamicprocess+0x222>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b42      	ldr	r3, [pc, #264]	@ (80018fc <_dywapitch_dynamicprocess+0x2ac>)
 80017f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017f6:	f7fe feff 	bl	80005f8 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4620      	mov	r0, r4
 8001800:	4629      	mov	r1, r5
 8001802:	f7fe fd41 	bl	8000288 <__aeabi_dsub>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f98d 	bl	8000b2c <__aeabi_d2iz>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	bfb8      	it	lt
 8001818:	425b      	neglt	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe82 	bl	8000524 <__aeabi_i2d>
 8001820:	4604      	mov	r4, r0
 8001822:	460d      	mov	r5, r1
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	4b34      	ldr	r3, [pc, #208]	@ (80018fc <_dywapitch_dynamicprocess+0x2ac>)
 800182a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800182e:	f7fe fee3 	bl	80005f8 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4620      	mov	r0, r4
 8001838:	4629      	mov	r1, r5
 800183a:	f7ff f807 	bl	800084c <__aeabi_ddiv>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001846:	f7ff f967 	bl	8000b18 <__aeabi_dcmpgt>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d010      	beq.n	8001872 <_dywapitch_dynamicprocess+0x222>
			// close to twice the last pitch, which is trusted
			estimatedPitch = 0.5*pitch;
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <_dywapitch_dynamicprocess+0x2ac>)
 8001856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185a:	f7fe fecd 	bl	80005f8 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	e9c7 2308 	strd	r2, r3, [r7, #32]
			pitchtracker->_prevPitch = estimatedPitch;
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800186c:	e9c1 2300 	strd	r2, r3, [r1]
 8001870:	e054      	b.n	800191c <_dywapitch_dynamicprocess+0x2cc>
			
		} else {
			// nothing like this : very different value
			if (pitchtracker->_pitchConfidence >= 1) {
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	dd0d      	ble.n	8001896 <_dywapitch_dynamicprocess+0x246>
				// previous trusted : keep previous
				estimatedPitch = pitchtracker->_prevPitch;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	e9c7 2308 	strd	r2, r3, [r7, #32]
				pitchtracker->_pitchConfidence = max(0, pitchtracker->_pitchConfidence - 1);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	bfb8      	it	lt
 800188c:	2301      	movlt	r3, #1
 800188e:	1e5a      	subs	r2, r3, #1
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	e042      	b.n	800191c <_dywapitch_dynamicprocess+0x2cc>
			} else {
				// previous not trusted : take current
				estimatedPitch = pitch;
 8001896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800189a:	e9c7 2308 	strd	r2, r3, [r7, #32]
				pitchtracker->_prevPitch = pitch;
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018a4:	e9c1 2300 	strd	r2, r3, [r1]
				pitchtracker->_pitchConfidence = 1;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2201      	movs	r2, #1
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	e035      	b.n	800191c <_dywapitch_dynamicprocess+0x2cc>
			}
		}
		
	} else {
		// no pitch now
		if (pitchtracker->_prevPitch != -1) {
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <_dywapitch_dynamicprocess+0x2a8>)
 80018bc:	f7ff f904 	bl	8000ac8 <__aeabi_dcmpeq>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d12a      	bne.n	800191c <_dywapitch_dynamicprocess+0x2cc>
			// was pitch before
			if (pitchtracker->_pitchConfidence >= 1) {
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	dd18      	ble.n	8001900 <_dywapitch_dynamicprocess+0x2b0>
				// continue previous
				estimatedPitch = pitchtracker->_prevPitch;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
				pitchtracker->_pitchConfidence = max(0, pitchtracker->_pitchConfidence - 1);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	bfb8      	it	lt
 80018e0:	2301      	movlt	r3, #1
 80018e2:	1e5a      	subs	r2, r3, #1
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	e018      	b.n	800191c <_dywapitch_dynamicprocess+0x2cc>
 80018ea:	bf00      	nop
 80018ec:	f3af 8000 	nop.w
 80018f0:	a0000000 	.word	0xa0000000
 80018f4:	3fc99999 	.word	0x3fc99999
 80018f8:	bff00000 	.word	0xbff00000
 80018fc:	3fe00000 	.word	0x3fe00000
			} else {
				pitchtracker->_prevPitch = -1;
 8001900:	68f9      	ldr	r1, [r7, #12]
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <_dywapitch_dynamicprocess+0x320>)
 8001908:	e9c1 2300 	strd	r2, r3, [r1]
				estimatedPitch = -1.;
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <_dywapitch_dynamicprocess+0x320>)
 8001912:	e9c7 2308 	strd	r2, r3, [r7, #32]
				pitchtracker->_pitchConfidence = 0;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
			}
		}
	}
	
	// put "_pitchConfidence="&pitchtracker->_pitchConfidence
	if (pitchtracker->_pitchConfidence >= 1) {
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	dd04      	ble.n	800192e <_dywapitch_dynamicprocess+0x2de>
		// ok
		pitch = estimatedPitch;
 8001924:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001928:	e9c7 2300 	strd	r2, r3, [r7]
 800192c:	e004      	b.n	8001938 <_dywapitch_dynamicprocess+0x2e8>
	} else {
		pitch = -1;
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <_dywapitch_dynamicprocess+0x320>)
 8001934:	e9c7 2300 	strd	r2, r3, [r7]
	}
	
	// equivalence
	if (pitch == -1) pitch = 0.0;
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <_dywapitch_dynamicprocess+0x320>)
 800193e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001942:	f7ff f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <_dywapitch_dynamicprocess+0x308>
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	e9c7 2300 	strd	r2, r3, [r7]
	
	return pitch;
 8001958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800195c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001960:	eeb0 0a47 	vmov.f32	s0, s14
 8001964:	eef0 0a67 	vmov.f32	s1, s15
 8001968:	3728      	adds	r7, #40	@ 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bdb0      	pop	{r4, r5, r7, pc}
 800196e:	bf00      	nop
 8001970:	bff00000 	.word	0xbff00000

08001974 <dywapitch_inittracking>:

// ************************************
// the API main entry points
// ************************************

void dywapitch_inittracking(dywapitchtracker *pitchtracker) {
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	pitchtracker->_prevPitch = -1.;
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <dywapitch_inittracking+0x28>)
 8001984:	e9c1 2300 	strd	r2, r3, [r1]
	pitchtracker->_pitchConfidence = -1;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800198e:	609a      	str	r2, [r3, #8]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	bff00000 	.word	0xbff00000

080019a0 <dywapitch_computepitch>:

double dywapitch_computepitch(dywapitchtracker *pitchtracker, double * samples, int startsample, int samplecount) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
	double raw_pitch = _dywapitch_computeWaveletPitch(samples, startsample, samplecount);
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	68b8      	ldr	r0, [r7, #8]
 80019b4:	f7ff f9c4 	bl	8000d40 <_dywapitch_computeWaveletPitch>
 80019b8:	ed87 0b04 	vstr	d0, [r7, #16]
	return _dywapitch_dynamicprocess(pitchtracker, raw_pitch);
 80019bc:	ed97 0b04 	vldr	d0, [r7, #16]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff fe45 	bl	8001650 <_dywapitch_dynamicprocess>
 80019c6:	eeb0 7a40 	vmov.f32	s14, s0
 80019ca:	eef0 7a60 	vmov.f32	s15, s1
}
 80019ce:	eeb0 0a47 	vmov.f32	s0, s14
 80019d2:	eef0 0a67 	vmov.f32	s1, s15
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_SPI_RxHalfCpltCallback>:
//	if ((buffer_index % BURSTSIZE) == 0) {
//		run_conversion();
//	}
//}

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef* hspi) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 2048; i++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e011      	b.n	8001a0e <HAL_SPI_RxHalfCpltCallback+0x32>
		buffer[i] = (double) lilbuf[i];
 80019ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001a24 <HAL_SPI_RxHalfCpltCallback+0x48>)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fd96 	bl	8000524 <__aeabi_i2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	480a      	ldr	r0, [pc, #40]	@ (8001a28 <HAL_SPI_RxHalfCpltCallback+0x4c>)
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	00c9      	lsls	r1, r1, #3
 8001a02:	4401      	add	r1, r0
 8001a04:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 2048; i++) {
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a14:	dbe9      	blt.n	80019ea <HAL_SPI_RxHalfCpltCallback+0xe>
	}

	run_conversion();
 8001a16:	f000 f85b 	bl	8001ad0 <run_conversion>
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200049ac 	.word	0x200049ac
 8001a28:	200009a8 	.word	0x200009a8

08001a2c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef* hspi) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
		//++buffer_index;
	//}

	//buffer_index %= BUFSIZE;

	for (int i = 0; i < 2048; i++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e013      	b.n	8001a62 <HAL_SPI_RxCpltCallback+0x36>
		buffer[i] = (double) lilbuf[i + 2048];
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a40:	4a0d      	ldr	r2, [pc, #52]	@ (8001a78 <HAL_SPI_RxCpltCallback+0x4c>)
 8001a42:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd6c 	bl	8000524 <__aeabi_i2d>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	480a      	ldr	r0, [pc, #40]	@ (8001a7c <HAL_SPI_RxCpltCallback+0x50>)
 8001a52:	68f9      	ldr	r1, [r7, #12]
 8001a54:	00c9      	lsls	r1, r1, #3
 8001a56:	4401      	add	r1, r0
 8001a58:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 2048; i++) {
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a68:	dbe7      	blt.n	8001a3a <HAL_SPI_RxCpltCallback+0xe>
	}

	run_conversion();
 8001a6a:	f000 f831 	bl	8001ad0 <run_conversion>
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200049ac 	.word	0x200049ac
 8001a7c:	200009a8 	.word	0x200009a8

08001a80 <absd>:

int sign (int n) {
	return n < 0 ? -1 : 1;
}

double absd (double n) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	ed87 0b00 	vstr	d0, [r7]
  if (n < 0) n = 0 - n;
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a96:	f7ff f821 	bl	8000adc <__aeabi_dcmplt>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00b      	beq.n	8001ab8 <absd+0x38>
 8001aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	f7fe fbec 	bl	8000288 <__aeabi_dsub>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	e9c7 2300 	strd	r2, r3, [r7]
  return n;
 8001ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001abc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ac0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac4:	eef0 0a67 	vmov.f32	s1, s15
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <run_conversion>:

void run_conversion() {
 8001ad0:	b5b0      	push	{r4, r5, r7, lr}
 8001ad2:	b092      	sub	sp, #72	@ 0x48
 8001ad4:	af00      	add	r7, sp, #0
//		i--;
//	}
//
//	HAL_UART_Transmit (&huart2, cdata, 7, 10);

	double pitch = dywapitch_computepitch(&tracker, buffer, buffer_index, BUFSIZE);
 8001ad6:	4b77      	ldr	r3, [pc, #476]	@ (8001cb4 <run_conversion+0x1e4>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ade:	4976      	ldr	r1, [pc, #472]	@ (8001cb8 <run_conversion+0x1e8>)
 8001ae0:	4876      	ldr	r0, [pc, #472]	@ (8001cbc <run_conversion+0x1ec>)
 8001ae2:	f7ff ff5d 	bl	80019a0 <dywapitch_computepitch>
 8001ae6:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	// Vpp approach to estimating volume
	double max = 0;
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double min = 0;
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	for (int i = 0; i < BUFSIZE; i++) {
 8001b02:	2300      	movs	r3, #0
 8001b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b06:	e02c      	b.n	8001b62 <run_conversion+0x92>
		if (buffer[i] > max) max = buffer[i];
 8001b08:	4a6b      	ldr	r2, [pc, #428]	@ (8001cb8 <run_conversion+0x1e8>)
 8001b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001b18:	f7fe ffe0 	bl	8000adc <__aeabi_dcmplt>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <run_conversion+0x62>
 8001b22:	4a65      	ldr	r2, [pc, #404]	@ (8001cb8 <run_conversion+0x1e8>)
 8001b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (buffer[i] < min) min = buffer[i];
 8001b32:	4a61      	ldr	r2, [pc, #388]	@ (8001cb8 <run_conversion+0x1e8>)
 8001b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001b42:	f7fe ffe9 	bl	8000b18 <__aeabi_dcmpgt>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <run_conversion+0x8c>
 8001b4c:	4a5a      	ldr	r2, [pc, #360]	@ (8001cb8 <run_conversion+0x1e8>)
 8001b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	for (int i = 0; i < BUFSIZE; i++) {
 8001b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b5e:	3301      	adds	r3, #1
 8001b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b68:	dbce      	blt.n	8001b08 <run_conversion+0x38>
	}

	double vol = max - min;
 8001b6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b6e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001b72:	f7fe fb89 	bl	8000288 <__aeabi_dsub>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	// figure out what note it probably is
	int note = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	633b      	str	r3, [r7, #48]	@ 0x30
	if (absd(pitch) < 1.0 || vol < VOLUME_CUTOFF) note = -1;
 8001b82:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001b86:	f7ff ff7b 	bl	8001a80 <absd>
 8001b8a:	ec51 0b10 	vmov	r0, r1, d0
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc0 <run_conversion+0x1f0>)
 8001b94:	f7fe ffa2 	bl	8000adc <__aeabi_dcmplt>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d109      	bne.n	8001bb2 <run_conversion+0xe2>
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b48      	ldr	r3, [pc, #288]	@ (8001cc4 <run_conversion+0x1f4>)
 8001ba4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ba8:	f7fe ff98 	bl	8000adc <__aeabi_dcmplt>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <run_conversion+0xea>
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bb8:	e03d      	b.n	8001c36 <run_conversion+0x166>
	else while (note + 1 < pitches_len && absd(pitch - pitches[note + 1]) < absd(pitch - pitches[note])) {
 8001bba:	e002      	b.n	8001bc2 <run_conversion+0xf2>
		note++;
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	633b      	str	r3, [r7, #48]	@ 0x30
	else while (note + 1 < pitches_len && absd(pitch - pitches[note + 1]) < absd(pitch - pitches[note])) {
 8001bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	4b40      	ldr	r3, [pc, #256]	@ (8001cc8 <run_conversion+0x1f8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	da33      	bge.n	8001c36 <run_conversion+0x166>
 8001bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8001ccc <run_conversion+0x1fc>)
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001be0:	f7fe fb52 	bl	8000288 <__aeabi_dsub>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	ec43 2b17 	vmov	d7, r2, r3
 8001bec:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf0:	eef0 0a67 	vmov.f32	s1, s15
 8001bf4:	f7ff ff44 	bl	8001a80 <absd>
 8001bf8:	ec55 4b10 	vmov	r4, r5, d0
 8001bfc:	4a33      	ldr	r2, [pc, #204]	@ (8001ccc <run_conversion+0x1fc>)
 8001bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c0c:	f7fe fb3c 	bl	8000288 <__aeabi_dsub>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	ec43 2b17 	vmov	d7, r2, r3
 8001c18:	eeb0 0a47 	vmov.f32	s0, s14
 8001c1c:	eef0 0a67 	vmov.f32	s1, s15
 8001c20:	f7ff ff2e 	bl	8001a80 <absd>
 8001c24:	ec53 2b10 	vmov	r2, r3, d0
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe ff56 	bl	8000adc <__aeabi_dcmplt>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1c2      	bne.n	8001bbc <run_conversion+0xec>

	char usart_message[30];

	// TODO - debounce? unsure if needed

	if (note != prev_note) {
 8001c36:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <run_conversion+0x200>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d031      	beq.n	8001ca4 <run_conversion+0x1d4>
		// Turn off the previous note, then turn on the new one.
		// TODO - velocity? volume?
		// MIDI_note_off(prev_note + 24, 20);
		if (prev_note != -1) {
 8001c40:	4b23      	ldr	r3, [pc, #140]	@ (8001cd0 <run_conversion+0x200>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c48:	d014      	beq.n	8001c74 <run_conversion+0x1a4>
			sprintf(usart_message, "Note off: %s\r\n", note_names[prev_note]);
 8001c4a:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <run_conversion+0x200>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4a20      	ldr	r2, [pc, #128]	@ (8001cd4 <run_conversion+0x204>)
 8001c52:	441a      	add	r2, r3
 8001c54:	463b      	mov	r3, r7
 8001c56:	4920      	ldr	r1, [pc, #128]	@ (8001cd8 <run_conversion+0x208>)
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f005 f839 	bl	8006cd0 <siprintf>
			HAL_UART_Transmit(&huart2, usart_message, strlen(usart_message), 10);
 8001c5e:	463b      	mov	r3, r7
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fab5 	bl	80001d0 <strlen>
 8001c66:	4603      	mov	r3, r0
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	4639      	mov	r1, r7
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	481b      	ldr	r0, [pc, #108]	@ (8001cdc <run_conversion+0x20c>)
 8001c70:	f004 f907 	bl	8005e82 <HAL_UART_Transmit>
		}
		if (note != -1) {
 8001c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c7a:	d013      	beq.n	8001ca4 <run_conversion+0x1d4>
			// MIDI_note_on(note + 24, 20);
			sprintf(usart_message, "Note on: %s\r\n", note_names[note]);
 8001c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4a14      	ldr	r2, [pc, #80]	@ (8001cd4 <run_conversion+0x204>)
 8001c82:	441a      	add	r2, r3
 8001c84:	463b      	mov	r3, r7
 8001c86:	4916      	ldr	r1, [pc, #88]	@ (8001ce0 <run_conversion+0x210>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f005 f821 	bl	8006cd0 <siprintf>
			HAL_UART_Transmit(&huart2, usart_message, strlen(usart_message), 10);
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fa9d 	bl	80001d0 <strlen>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4639      	mov	r1, r7
 8001c9c:	230a      	movs	r3, #10
 8001c9e:	480f      	ldr	r0, [pc, #60]	@ (8001cdc <run_conversion+0x20c>)
 8001ca0:	f004 f8ef 	bl	8005e82 <HAL_UART_Transmit>

	// Volume debugging, useful to figure out what your threshold should be
	// sprintf(usart_message, "Vol: %i\r\n", (int) vol);
	// HAL_UART_Transmit(&huart2, usart_message, strlen(usart_message), 10);

	prev_note = note;
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <run_conversion+0x200>)
 8001ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca8:	6013      	str	r3, [r2, #0]

}
 8001caa:	bf00      	nop
 8001cac:	3748      	adds	r7, #72	@ 0x48
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200049a8 	.word	0x200049a8
 8001cb8:	200009a8 	.word	0x200009a8
 8001cbc:	200069b0 	.word	0x200069b0
 8001cc0:	3ff00000 	.word	0x3ff00000
 8001cc4:	40990000 	.word	0x40990000
 8001cc8:	200001e0 	.word	0x200001e0
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	200001e4 	.word	0x200001e4
 8001cd4:	200001e8 	.word	0x200001e8
 8001cd8:	08007788 	.word	0x08007788
 8001cdc:	20000454 	.word	0x20000454
 8001ce0:	08007798 	.word	0x08007798

08001ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ce8:	f000 fc78 	bl	80025dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cec:	f000 f824 	bl	8001d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf0:	f000 f9b2 	bl	8002058 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cf4:	f000 f990 	bl	8002018 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001cf8:	f000 f936 	bl	8001f68 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001cfc:	f000 f888 	bl	8001e10 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001d00:	f000 f8ba 	bl	8001e78 <MX_TIM3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d04:	f000 f95a 	bl	8001fbc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001d08:	2108      	movs	r1, #8
 8001d0a:	4807      	ldr	r0, [pc, #28]	@ (8001d28 <main+0x44>)
 8001d0c:	f003 fa8e 	bl	800522c <HAL_TIM_PWM_Start>

  dywapitch_inittracking(&tracker);
 8001d10:	4806      	ldr	r0, [pc, #24]	@ (8001d2c <main+0x48>)
 8001d12:	f7ff fe2f 	bl	8001974 <dywapitch_inittracking>

  HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) lilbuf, LILBUFSIZE);
 8001d16:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d1a:	4905      	ldr	r1, [pc, #20]	@ (8001d30 <main+0x4c>)
 8001d1c:	4805      	ldr	r0, [pc, #20]	@ (8001d34 <main+0x50>)
 8001d1e:	f002 fded 	bl	80048fc <HAL_SPI_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d22:	bf00      	nop
 8001d24:	e7fd      	b.n	8001d22 <main+0x3e>
 8001d26:	bf00      	nop
 8001d28:	2000040c 	.word	0x2000040c
 8001d2c:	200069b0 	.word	0x200069b0
 8001d30:	200049ac 	.word	0x200049ac
 8001d34:	20000354 	.word	0x20000354

08001d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b094      	sub	sp, #80	@ 0x50
 8001d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	2234      	movs	r2, #52	@ 0x34
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 ffe2 	bl	8006d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	4b29      	ldr	r3, [pc, #164]	@ (8001e08 <SystemClock_Config+0xd0>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	4a28      	ldr	r2, [pc, #160]	@ (8001e08 <SystemClock_Config+0xd0>)
 8001d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d6c:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <SystemClock_Config+0xd0>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <SystemClock_Config+0xd4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d84:	4a21      	ldr	r2, [pc, #132]	@ (8001e0c <SystemClock_Config+0xd4>)
 8001d86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <SystemClock_Config+0xd4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001da0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da2:	2302      	movs	r3, #2
 8001da4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001da6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001daa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dac:	2304      	movs	r3, #4
 8001dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001db0:	2348      	movs	r3, #72	@ 0x48
 8001db2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001db4:	2302      	movs	r3, #2
 8001db6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001db8:	2303      	movs	r3, #3
 8001dba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 fa71 	bl	80042ac <HAL_RCC_OscConfig>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001dd0:	f000 f9a8 	bl	8002124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001de0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	2102      	movs	r1, #2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 fbe7 	bl	80035c4 <HAL_RCC_ClockConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001dfc:	f000 f992 	bl	8002124 <Error_Handler>
  }
}
 8001e00:	bf00      	nop
 8001e02:	3750      	adds	r7, #80	@ 0x50
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40007000 	.word	0x40007000

08001e10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e14:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <MX_SPI1_Init+0x60>)
 8001e16:	4a17      	ldr	r2, [pc, #92]	@ (8001e74 <MX_SPI1_Init+0x64>)
 8001e18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <MX_SPI1_Init+0x60>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <MX_SPI1_Init+0x60>)
 8001e22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <MX_SPI1_Init+0x60>)
 8001e2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <MX_SPI1_Init+0x60>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <MX_SPI1_Init+0x60>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <MX_SPI1_Init+0x60>)
 8001e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e42:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e44:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <MX_SPI1_Init+0x60>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4a:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <MX_SPI1_Init+0x60>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e50:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <MX_SPI1_Init+0x60>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <MX_SPI1_Init+0x60>)
 8001e58:	220a      	movs	r2, #10
 8001e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e5c:	4804      	ldr	r0, [pc, #16]	@ (8001e70 <MX_SPI1_Init+0x60>)
 8001e5e:	f002 fcc3 	bl	80047e8 <HAL_SPI_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8001e68:	f000 f95c 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000354 	.word	0x20000354
 8001e74:	40013000 	.word	0x40013000

08001e78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08e      	sub	sp, #56	@ 0x38
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	f107 0320 	add.w	r3, r7, #32
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
 8001ea4:	615a      	str	r2, [r3, #20]
 8001ea6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f60 <MX_TIM3_Init+0xe8>)
 8001eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8001f64 <MX_TIM3_Init+0xec>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001eae:	4b2c      	ldr	r3, [pc, #176]	@ (8001f60 <MX_TIM3_Init+0xe8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f60 <MX_TIM3_Init+0xe8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400;
 8001eba:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <MX_TIM3_Init+0xe8>)
 8001ebc:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001ec0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b27      	ldr	r3, [pc, #156]	@ (8001f60 <MX_TIM3_Init+0xe8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ec8:	4b25      	ldr	r3, [pc, #148]	@ (8001f60 <MX_TIM3_Init+0xe8>)
 8001eca:	2280      	movs	r2, #128	@ 0x80
 8001ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ece:	4824      	ldr	r0, [pc, #144]	@ (8001f60 <MX_TIM3_Init+0xe8>)
 8001ed0:	f003 f904 	bl	80050dc <HAL_TIM_Base_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001eda:	f000 f923 	bl	8002124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ee4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	481d      	ldr	r0, [pc, #116]	@ (8001f60 <MX_TIM3_Init+0xe8>)
 8001eec:	f003 fb28 	bl	8005540 <HAL_TIM_ConfigClockSource>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001ef6:	f000 f915 	bl	8002124 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001efa:	4819      	ldr	r0, [pc, #100]	@ (8001f60 <MX_TIM3_Init+0xe8>)
 8001efc:	f003 f93d 	bl	800517a <HAL_TIM_PWM_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001f06:	f000 f90d 	bl	8002124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f12:	f107 0320 	add.w	r3, r7, #32
 8001f16:	4619      	mov	r1, r3
 8001f18:	4811      	ldr	r0, [pc, #68]	@ (8001f60 <MX_TIM3_Init+0xe8>)
 8001f1a:	f003 fee9 	bl	8005cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f24:	f000 f8fe 	bl	8002124 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f28:	2360      	movs	r3, #96	@ 0x60
 8001f2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1800;
 8001f2c:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001f30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4807      	ldr	r0, [pc, #28]	@ (8001f60 <MX_TIM3_Init+0xe8>)
 8001f42:	f003 fa3b 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f4c:	f000 f8ea 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f50:	4803      	ldr	r0, [pc, #12]	@ (8001f60 <MX_TIM3_Init+0xe8>)
 8001f52:	f000 f9b3 	bl	80022bc <HAL_TIM_MspPostInit>

}
 8001f56:	bf00      	nop
 8001f58:	3738      	adds	r7, #56	@ 0x38
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000040c 	.word	0x2000040c
 8001f64:	40000400 	.word	0x40000400

08001f68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	@ (8001fb8 <MX_USART2_UART_Init+0x50>)
 8001f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f8e:	220c      	movs	r2, #12
 8001f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9e:	4805      	ldr	r0, [pc, #20]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001fa0:	f003 ff22 	bl	8005de8 <HAL_UART_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001faa:	f000 f8bb 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000454 	.word	0x20000454
 8001fb8:	40004400 	.word	0x40004400

08001fbc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fc2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001fc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fca:	2206      	movs	r2, #6
 8001fcc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001fce:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fdc:	2202      	movs	r2, #2
 8001fde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001fec:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	@ (8002014 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002000:	f001 f998 	bl	8003334 <HAL_PCD_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800200a:	f000 f88b 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000498 	.word	0x20000498

08002018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_DMA_Init+0x3c>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a0b      	ldr	r2, [pc, #44]	@ (8002054 <MX_DMA_Init+0x3c>)
 8002028:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_DMA_Init+0x3c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	2038      	movs	r0, #56	@ 0x38
 8002040:	f000 fc3d 	bl	80028be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002044:	2038      	movs	r0, #56	@ 0x38
 8002046:	f000 fc56 	bl	80028f6 <HAL_NVIC_EnableIRQ>

}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	4b2a      	ldr	r3, [pc, #168]	@ (800211c <MX_GPIO_Init+0xc4>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	4a29      	ldr	r2, [pc, #164]	@ (800211c <MX_GPIO_Init+0xc4>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	6313      	str	r3, [r2, #48]	@ 0x30
 800207e:	4b27      	ldr	r3, [pc, #156]	@ (800211c <MX_GPIO_Init+0xc4>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b23      	ldr	r3, [pc, #140]	@ (800211c <MX_GPIO_Init+0xc4>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	4a22      	ldr	r2, [pc, #136]	@ (800211c <MX_GPIO_Init+0xc4>)
 8002094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002098:	6313      	str	r3, [r2, #48]	@ 0x30
 800209a:	4b20      	ldr	r3, [pc, #128]	@ (800211c <MX_GPIO_Init+0xc4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b1c      	ldr	r3, [pc, #112]	@ (800211c <MX_GPIO_Init+0xc4>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <MX_GPIO_Init+0xc4>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b6:	4b19      	ldr	r3, [pc, #100]	@ (800211c <MX_GPIO_Init+0xc4>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b15      	ldr	r3, [pc, #84]	@ (800211c <MX_GPIO_Init+0xc4>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	4a14      	ldr	r2, [pc, #80]	@ (800211c <MX_GPIO_Init+0xc4>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d2:	4b12      	ldr	r3, [pc, #72]	@ (800211c <MX_GPIO_Init+0xc4>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	480a      	ldr	r0, [pc, #40]	@ (8002120 <MX_GPIO_Init+0xc8>)
 80020f6:	f000 ff89 	bl	800300c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020fa:	2308      	movs	r3, #8
 80020fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4619      	mov	r1, r3
 800210e:	4804      	ldr	r0, [pc, #16]	@ (8002120 <MX_GPIO_Init+0xc8>)
 8002110:	f000 ff7c 	bl	800300c <HAL_GPIO_Init>

}
 8002114:	bf00      	nop
 8002116:	3728      	adds	r7, #40	@ 0x28
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40023800 	.word	0x40023800
 8002120:	40020800 	.word	0x40020800

08002124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002128:	b672      	cpsid	i
}
 800212a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <Error_Handler+0x8>

08002130 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	4b10      	ldr	r3, [pc, #64]	@ (800217c <HAL_MspInit+0x4c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	4a0f      	ldr	r2, [pc, #60]	@ (800217c <HAL_MspInit+0x4c>)
 8002140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002144:	6453      	str	r3, [r2, #68]	@ 0x44
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HAL_MspInit+0x4c>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	4b09      	ldr	r3, [pc, #36]	@ (800217c <HAL_MspInit+0x4c>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	4a08      	ldr	r2, [pc, #32]	@ (800217c <HAL_MspInit+0x4c>)
 800215c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002160:	6413      	str	r3, [r2, #64]	@ 0x40
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_MspInit+0x4c>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800216e:	2007      	movs	r0, #7
 8002170:	f000 fb9a 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40023800 	.word	0x40023800

08002180 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	@ 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a31      	ldr	r2, [pc, #196]	@ (8002264 <HAL_SPI_MspInit+0xe4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d15c      	bne.n	800225c <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	4b30      	ldr	r3, [pc, #192]	@ (8002268 <HAL_SPI_MspInit+0xe8>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002268 <HAL_SPI_MspInit+0xe8>)
 80021ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <HAL_SPI_MspInit+0xe8>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b29      	ldr	r3, [pc, #164]	@ (8002268 <HAL_SPI_MspInit+0xe8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a28      	ldr	r2, [pc, #160]	@ (8002268 <HAL_SPI_MspInit+0xe8>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b26      	ldr	r3, [pc, #152]	@ (8002268 <HAL_SPI_MspInit+0xe8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021da:	23a0      	movs	r3, #160	@ 0xa0
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ea:	2305      	movs	r3, #5
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	481d      	ldr	r0, [pc, #116]	@ (800226c <HAL_SPI_MspInit+0xec>)
 80021f6:	f000 ff09 	bl	800300c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80021fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 80021fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002274 <HAL_SPI_MspInit+0xf4>)
 80021fe:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002200:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 8002202:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002206:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002208:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800220e:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 8002210:	2200      	movs	r2, #0
 8002212:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002214:	4b16      	ldr	r3, [pc, #88]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 8002216:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800221a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800221c:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 800221e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002222:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 8002226:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800222a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800222c:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 800222e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002232:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002234:	4b0e      	ldr	r3, [pc, #56]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 8002236:	2200      	movs	r2, #0
 8002238:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800223a:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 800223c:	2200      	movs	r2, #0
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002240:	480b      	ldr	r0, [pc, #44]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 8002242:	f000 fb73 	bl	800292c <HAL_DMA_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 800224c:	f7ff ff6a 	bl	8002124 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a07      	ldr	r2, [pc, #28]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 8002254:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002256:	4a06      	ldr	r2, [pc, #24]	@ (8002270 <HAL_SPI_MspInit+0xf0>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	@ 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40013000 	.word	0x40013000
 8002268:	40023800 	.word	0x40023800
 800226c:	40020000 	.word	0x40020000
 8002270:	200003ac 	.word	0x200003ac
 8002274:	40026410 	.word	0x40026410

08002278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d10d      	bne.n	80022a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <HAL_TIM_Base_MspInit+0x40>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <HAL_TIM_Base_MspInit+0x40>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	4b07      	ldr	r3, [pc, #28]	@ (80022b8 <HAL_TIM_Base_MspInit+0x40>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a12      	ldr	r2, [pc, #72]	@ (8002324 <HAL_TIM_MspPostInit+0x68>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d11e      	bne.n	800231c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_TIM_MspPostInit+0x6c>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a10      	ldr	r2, [pc, #64]	@ (8002328 <HAL_TIM_MspPostInit+0x6c>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_TIM_MspPostInit+0x6c>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800230c:	2302      	movs	r3, #2
 800230e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	4619      	mov	r1, r3
 8002316:	4805      	ldr	r0, [pc, #20]	@ (800232c <HAL_TIM_MspPostInit+0x70>)
 8002318:	f000 fe78 	bl	800300c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800231c:	bf00      	nop
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40000400 	.word	0x40000400
 8002328:	40023800 	.word	0x40023800
 800232c:	40020800 	.word	0x40020800

08002330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	@ 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a19      	ldr	r2, [pc, #100]	@ (80023b4 <HAL_UART_MspInit+0x84>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d12b      	bne.n	80023aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	4b18      	ldr	r3, [pc, #96]	@ (80023b8 <HAL_UART_MspInit+0x88>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	4a17      	ldr	r2, [pc, #92]	@ (80023b8 <HAL_UART_MspInit+0x88>)
 800235c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002360:	6413      	str	r3, [r2, #64]	@ 0x40
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_UART_MspInit+0x88>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_UART_MspInit+0x88>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4a10      	ldr	r2, [pc, #64]	@ (80023b8 <HAL_UART_MspInit+0x88>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6313      	str	r3, [r2, #48]	@ 0x30
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <HAL_UART_MspInit+0x88>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800238a:	230c      	movs	r3, #12
 800238c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800239a:	2307      	movs	r3, #7
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	4805      	ldr	r0, [pc, #20]	@ (80023bc <HAL_UART_MspInit+0x8c>)
 80023a6:	f000 fe31 	bl	800300c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023aa:	bf00      	nop
 80023ac:	3728      	adds	r7, #40	@ 0x28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40004400 	.word	0x40004400
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020000 	.word	0x40020000

080023c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b0a0      	sub	sp, #128	@ 0x80
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	225c      	movs	r2, #92	@ 0x5c
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f004 fc95 	bl	8006d10 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ee:	d141      	bne.n	8002474 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80023f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80023f6:	2300      	movs	r3, #0
 80023f8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 f9fa 	bl	80037f8 <HAL_RCCEx_PeriphCLKConfig>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800240a:	f7ff fe8b 	bl	8002124 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <HAL_PCD_MspInit+0xbc>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	4a19      	ldr	r2, [pc, #100]	@ (800247c <HAL_PCD_MspInit+0xbc>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6313      	str	r3, [r2, #48]	@ 0x30
 800241e:	4b17      	ldr	r3, [pc, #92]	@ (800247c <HAL_PCD_MspInit+0xbc>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800242a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800242e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800243c:	230a      	movs	r3, #10
 800243e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002444:	4619      	mov	r1, r3
 8002446:	480e      	ldr	r0, [pc, #56]	@ (8002480 <HAL_PCD_MspInit+0xc0>)
 8002448:	f000 fde0 	bl	800300c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800244c:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <HAL_PCD_MspInit+0xbc>)
 800244e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002450:	4a0a      	ldr	r2, [pc, #40]	@ (800247c <HAL_PCD_MspInit+0xbc>)
 8002452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002456:	6353      	str	r3, [r2, #52]	@ 0x34
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	4b07      	ldr	r3, [pc, #28]	@ (800247c <HAL_PCD_MspInit+0xbc>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002460:	4a06      	ldr	r2, [pc, #24]	@ (800247c <HAL_PCD_MspInit+0xbc>)
 8002462:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002466:	6453      	str	r3, [r2, #68]	@ 0x44
 8002468:	4b04      	ldr	r3, [pc, #16]	@ (800247c <HAL_PCD_MspInit+0xbc>)
 800246a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002474:	bf00      	nop
 8002476:	3780      	adds	r7, #128	@ 0x80
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	40020000 	.word	0x40020000

08002484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <NMI_Handler+0x4>

0800248c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <HardFault_Handler+0x4>

08002494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <MemManage_Handler+0x4>

0800249c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <UsageFault_Handler+0x4>

080024ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024da:	f000 f8d1 	bl	8002680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80024e8:	4802      	ldr	r0, [pc, #8]	@ (80024f4 <DMA2_Stream0_IRQHandler+0x10>)
 80024ea:	f000 fb25 	bl	8002b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200003ac 	.word	0x200003ac

080024f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002500:	4a14      	ldr	r2, [pc, #80]	@ (8002554 <_sbrk+0x5c>)
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <_sbrk+0x60>)
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800250c:	4b13      	ldr	r3, [pc, #76]	@ (800255c <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <_sbrk+0x64>)
 8002516:	4a12      	ldr	r2, [pc, #72]	@ (8002560 <_sbrk+0x68>)
 8002518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800251a:	4b10      	ldr	r3, [pc, #64]	@ (800255c <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	429a      	cmp	r2, r3
 8002526:	d207      	bcs.n	8002538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002528:	f004 fc0a 	bl	8006d40 <__errno>
 800252c:	4603      	mov	r3, r0
 800252e:	220c      	movs	r2, #12
 8002530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002536:	e009      	b.n	800254c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002538:	4b08      	ldr	r3, [pc, #32]	@ (800255c <_sbrk+0x64>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800253e:	4b07      	ldr	r3, [pc, #28]	@ (800255c <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	4a05      	ldr	r2, [pc, #20]	@ (800255c <_sbrk+0x64>)
 8002548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20020000 	.word	0x20020000
 8002558:	00000400 	.word	0x00000400
 800255c:	200069c0 	.word	0x200069c0
 8002560:	20006b10 	.word	0x20006b10

08002564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002568:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <SystemInit+0x20>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256e:	4a05      	ldr	r2, [pc, #20]	@ (8002584 <SystemInit+0x20>)
 8002570:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002574:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002588:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800258c:	480d      	ldr	r0, [pc, #52]	@ (80025c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800258e:	490e      	ldr	r1, [pc, #56]	@ (80025c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002590:	4a0e      	ldr	r2, [pc, #56]	@ (80025cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002594:	e002      	b.n	800259c <LoopCopyDataInit>

08002596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259a:	3304      	adds	r3, #4

0800259c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800259c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a0:	d3f9      	bcc.n	8002596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a2:	4a0b      	ldr	r2, [pc, #44]	@ (80025d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025a4:	4c0b      	ldr	r4, [pc, #44]	@ (80025d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a8:	e001      	b.n	80025ae <LoopFillZerobss>

080025aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ac:	3204      	adds	r2, #4

080025ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b0:	d3fb      	bcc.n	80025aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025b2:	f7ff ffd7 	bl	8002564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025b6:	f004 fbc9 	bl	8006d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ba:	f7ff fb93 	bl	8001ce4 <main>
  bx  lr    
 80025be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c8:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 80025cc:	0800780c 	.word	0x0800780c
  ldr r2, =_sbss
 80025d0:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 80025d4:	20006b10 	.word	0x20006b10

080025d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d8:	e7fe      	b.n	80025d8 <ADC_IRQHandler>
	...

080025dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e0:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <HAL_Init+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0d      	ldr	r2, [pc, #52]	@ (800261c <HAL_Init+0x40>)
 80025e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025ec:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <HAL_Init+0x40>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0a      	ldr	r2, [pc, #40]	@ (800261c <HAL_Init+0x40>)
 80025f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f8:	4b08      	ldr	r3, [pc, #32]	@ (800261c <HAL_Init+0x40>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a07      	ldr	r2, [pc, #28]	@ (800261c <HAL_Init+0x40>)
 80025fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002604:	2003      	movs	r0, #3
 8002606:	f000 f94f 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260a:	2000      	movs	r0, #0
 800260c:	f000 f808 	bl	8002620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002610:	f7ff fd8e 	bl	8002130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023c00 	.word	0x40023c00

08002620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002628:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <HAL_InitTick+0x54>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b12      	ldr	r3, [pc, #72]	@ (8002678 <HAL_InitTick+0x58>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002636:	fbb3 f3f1 	udiv	r3, r3, r1
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f967 	bl	8002912 <HAL_SYSTICK_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e00e      	b.n	800266c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b0f      	cmp	r3, #15
 8002652:	d80a      	bhi.n	800266a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002654:	2200      	movs	r2, #0
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800265c:	f000 f92f 	bl	80028be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002660:	4a06      	ldr	r2, [pc, #24]	@ (800267c <HAL_InitTick+0x5c>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	200002d8 	.word	0x200002d8
 8002678:	200002e0 	.word	0x200002e0
 800267c:	200002dc 	.word	0x200002dc

08002680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <HAL_IncTick+0x20>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_IncTick+0x24>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4413      	add	r3, r2
 8002690:	4a04      	ldr	r2, [pc, #16]	@ (80026a4 <HAL_IncTick+0x24>)
 8002692:	6013      	str	r3, [r2, #0]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	200002e0 	.word	0x200002e0
 80026a4:	200069c4 	.word	0x200069c4

080026a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return uwTick;
 80026ac:	4b03      	ldr	r3, [pc, #12]	@ (80026bc <HAL_GetTick+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	200069c4 	.word	0x200069c4

080026c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff ffee 	bl	80026a8 <HAL_GetTick>
 80026cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026d8:	d005      	beq.n	80026e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026da:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <HAL_Delay+0x44>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026e6:	bf00      	nop
 80026e8:	f7ff ffde 	bl	80026a8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d8f7      	bhi.n	80026e8 <HAL_Delay+0x28>
  {
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200002e0 	.word	0x200002e0

08002708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273a:	4a04      	ldr	r2, [pc, #16]	@ (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	60d3      	str	r3, [r2, #12]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <__NVIC_GetPriorityGrouping+0x18>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0307 	and.w	r3, r3, #7
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0b      	blt.n	8002796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4907      	ldr	r1, [pc, #28]	@ (80027a4 <__NVIC_EnableIRQ+0x38>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2001      	movs	r0, #1
 800278e:	fa00 f202 	lsl.w	r2, r0, r2
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000e100 	.word	0xe000e100

080027a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	db0a      	blt.n	80027d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	490c      	ldr	r1, [pc, #48]	@ (80027f4 <__NVIC_SetPriority+0x4c>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	440b      	add	r3, r1
 80027cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d0:	e00a      	b.n	80027e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4908      	ldr	r1, [pc, #32]	@ (80027f8 <__NVIC_SetPriority+0x50>)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	3b04      	subs	r3, #4
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	440b      	add	r3, r1
 80027e6:	761a      	strb	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000e100 	.word	0xe000e100
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	@ 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f1c3 0307 	rsb	r3, r3, #7
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf28      	it	cs
 800281a:	2304      	movcs	r3, #4
 800281c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3304      	adds	r3, #4
 8002822:	2b06      	cmp	r3, #6
 8002824:	d902      	bls.n	800282c <NVIC_EncodePriority+0x30>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3b03      	subs	r3, #3
 800282a:	e000      	b.n	800282e <NVIC_EncodePriority+0x32>
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	401a      	ands	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002844:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	43d9      	mvns	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	4313      	orrs	r3, r2
         );
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	@ 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002874:	d301      	bcc.n	800287a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002876:	2301      	movs	r3, #1
 8002878:	e00f      	b.n	800289a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287a:	4a0a      	ldr	r2, [pc, #40]	@ (80028a4 <SysTick_Config+0x40>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002882:	210f      	movs	r1, #15
 8002884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002888:	f7ff ff8e 	bl	80027a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288c:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <SysTick_Config+0x40>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002892:	4b04      	ldr	r3, [pc, #16]	@ (80028a4 <SysTick_Config+0x40>)
 8002894:	2207      	movs	r2, #7
 8002896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff29 	bl	8002708 <__NVIC_SetPriorityGrouping>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d0:	f7ff ff3e 	bl	8002750 <__NVIC_GetPriorityGrouping>
 80028d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff8e 	bl	80027fc <NVIC_EncodePriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff5d 	bl	80027a8 <__NVIC_SetPriority>
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff31 	bl	800276c <__NVIC_EnableIRQ>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ffa2 	bl	8002864 <SysTick_Config>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff feb6 	bl	80026a8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e099      	b.n	8002a7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002968:	e00f      	b.n	800298a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800296a:	f7ff fe9d 	bl	80026a8 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b05      	cmp	r3, #5
 8002976:	d908      	bls.n	800298a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2203      	movs	r2, #3
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e078      	b.n	8002a7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e8      	bne.n	800296a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4b38      	ldr	r3, [pc, #224]	@ (8002a84 <HAL_DMA_Init+0x158>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d107      	bne.n	80029f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	4313      	orrs	r3, r2
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f023 0307 	bic.w	r3, r3, #7
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d117      	bne.n	8002a4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00e      	beq.n	8002a4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fa6f 	bl	8002f14 <DMA_CheckFifoParam>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2240      	movs	r2, #64	@ 0x40
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e016      	b.n	8002a7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa26 	bl	8002ea8 <DMA_CalcBaseAndBitshift>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a64:	223f      	movs	r2, #63	@ 0x3f
 8002a66:	409a      	lsls	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	f010803f 	.word	0xf010803f

08002a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_DMA_Start_IT+0x26>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e040      	b.n	8002b30 <HAL_DMA_Start_IT+0xa8>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d12f      	bne.n	8002b22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f9b8 	bl	8002e4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae0:	223f      	movs	r2, #63	@ 0x3f
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0216 	orr.w	r2, r2, #22
 8002af6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0208 	orr.w	r2, r2, #8
 8002b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e005      	b.n	8002b2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b44:	4b8e      	ldr	r3, [pc, #568]	@ (8002d80 <HAL_DMA_IRQHandler+0x248>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a8e      	ldr	r2, [pc, #568]	@ (8002d84 <HAL_DMA_IRQHandler+0x24c>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	0a9b      	lsrs	r3, r3, #10
 8002b50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b62:	2208      	movs	r2, #8
 8002b64:	409a      	lsls	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01a      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d013      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0204 	bic.w	r2, r2, #4
 8002b8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b90:	2208      	movs	r2, #8
 8002b92:	409a      	lsls	r2, r3
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	2201      	movs	r2, #1
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d012      	beq.n	8002bda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd2:	f043 0202 	orr.w	r2, r3, #2
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bde:	2204      	movs	r2, #4
 8002be0:	409a      	lsls	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d012      	beq.n	8002c10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00b      	beq.n	8002c10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c08:	f043 0204 	orr.w	r2, r3, #4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c14:	2210      	movs	r2, #16
 8002c16:	409a      	lsls	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d043      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d03c      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c32:	2210      	movs	r2, #16
 8002c34:	409a      	lsls	r2, r3
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d018      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d108      	bne.n	8002c68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d024      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
 8002c66:	e01f      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01b      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
 8002c78:	e016      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d107      	bne.n	8002c98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0208 	bic.w	r2, r2, #8
 8002c96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cac:	2220      	movs	r2, #32
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 808f 	beq.w	8002dd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 8087 	beq.w	8002dd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cce:	2220      	movs	r2, #32
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	d136      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0216 	bic.w	r2, r2, #22
 8002cf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <HAL_DMA_IRQHandler+0x1da>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0208 	bic.w	r2, r2, #8
 8002d20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d26:	223f      	movs	r2, #63	@ 0x3f
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d07e      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
        }
        return;
 8002d4e:	e079      	b.n	8002e44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01d      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10d      	bne.n	8002d88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d031      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	4798      	blx	r3
 8002d7c:	e02c      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x2a0>
 8002d7e:	bf00      	nop
 8002d80:	200002d8 	.word	0x200002d8
 8002d84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d023      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4798      	blx	r3
 8002d98:	e01e      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10f      	bne.n	8002dc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0210 	bic.w	r2, r2, #16
 8002db6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d032      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d022      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2205      	movs	r2, #5
 8002df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	3301      	adds	r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d307      	bcc.n	8002e20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f2      	bne.n	8002e04 <HAL_DMA_IRQHandler+0x2cc>
 8002e1e:	e000      	b.n	8002e22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	4798      	blx	r3
 8002e42:	e000      	b.n	8002e46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e44:	bf00      	nop
    }
  }
}
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b40      	cmp	r3, #64	@ 0x40
 8002e78:	d108      	bne.n	8002e8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e8a:	e007      	b.n	8002e9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	60da      	str	r2, [r3, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	3b10      	subs	r3, #16
 8002eb8:	4a14      	ldr	r2, [pc, #80]	@ (8002f0c <DMA_CalcBaseAndBitshift+0x64>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ec2:	4a13      	ldr	r2, [pc, #76]	@ (8002f10 <DMA_CalcBaseAndBitshift+0x68>)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d909      	bls.n	8002eea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ede:	f023 0303 	bic.w	r3, r3, #3
 8002ee2:	1d1a      	adds	r2, r3, #4
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ee8:	e007      	b.n	8002efa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	aaaaaaab 	.word	0xaaaaaaab
 8002f10:	080077c0 	.word	0x080077c0

08002f14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d11f      	bne.n	8002f6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d856      	bhi.n	8002fe2 <DMA_CheckFifoParam+0xce>
 8002f34:	a201      	add	r2, pc, #4	@ (adr r2, 8002f3c <DMA_CheckFifoParam+0x28>)
 8002f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3a:	bf00      	nop
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f5f 	.word	0x08002f5f
 8002f44:	08002f4d 	.word	0x08002f4d
 8002f48:	08002fe3 	.word	0x08002fe3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d046      	beq.n	8002fe6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5c:	e043      	b.n	8002fe6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f66:	d140      	bne.n	8002fea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6c:	e03d      	b.n	8002fea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f76:	d121      	bne.n	8002fbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d837      	bhi.n	8002fee <DMA_CheckFifoParam+0xda>
 8002f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <DMA_CheckFifoParam+0x70>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002f95 	.word	0x08002f95
 8002f88:	08002f9b 	.word	0x08002f9b
 8002f8c:	08002f95 	.word	0x08002f95
 8002f90:	08002fad 	.word	0x08002fad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      break;
 8002f98:	e030      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d025      	beq.n	8002ff2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002faa:	e022      	b.n	8002ff2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fb4:	d11f      	bne.n	8002ff6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fba:	e01c      	b.n	8002ff6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d903      	bls.n	8002fca <DMA_CheckFifoParam+0xb6>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d003      	beq.n	8002fd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fc8:	e018      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8002fce:	e015      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe0:	e00b      	b.n	8002ffa <DMA_CheckFifoParam+0xe6>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e00a      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e008      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002fea:	bf00      	nop
 8002fec:	e006      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e004      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e002      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002ffa:	bf00      	nop
    }
  } 
  
  return status; 
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	@ 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e165      	b.n	80032f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003028:	2201      	movs	r2, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	f040 8154 	bne.w	80032ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d005      	beq.n	800305e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800305a:	2b02      	cmp	r3, #2
 800305c:	d130      	bne.n	80030c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	2203      	movs	r2, #3
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003094:	2201      	movs	r2, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 0201 	and.w	r2, r3, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d017      	beq.n	80030fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d123      	bne.n	8003150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	08da      	lsrs	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3208      	adds	r2, #8
 800314a:	69b9      	ldr	r1, [r7, #24]
 800314c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0203 	and.w	r2, r3, #3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80ae 	beq.w	80032ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	4b5d      	ldr	r3, [pc, #372]	@ (800330c <HAL_GPIO_Init+0x300>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	4a5c      	ldr	r2, [pc, #368]	@ (800330c <HAL_GPIO_Init+0x300>)
 800319c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031a2:	4b5a      	ldr	r3, [pc, #360]	@ (800330c <HAL_GPIO_Init+0x300>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ae:	4a58      	ldr	r2, [pc, #352]	@ (8003310 <HAL_GPIO_Init+0x304>)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	3302      	adds	r3, #2
 80031b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003314 <HAL_GPIO_Init+0x308>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d025      	beq.n	8003226 <HAL_GPIO_Init+0x21a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003318 <HAL_GPIO_Init+0x30c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01f      	beq.n	8003222 <HAL_GPIO_Init+0x216>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4d      	ldr	r2, [pc, #308]	@ (800331c <HAL_GPIO_Init+0x310>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d019      	beq.n	800321e <HAL_GPIO_Init+0x212>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003320 <HAL_GPIO_Init+0x314>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_GPIO_Init+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003324 <HAL_GPIO_Init+0x318>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00d      	beq.n	8003216 <HAL_GPIO_Init+0x20a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003328 <HAL_GPIO_Init+0x31c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <HAL_GPIO_Init+0x206>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a49      	ldr	r2, [pc, #292]	@ (800332c <HAL_GPIO_Init+0x320>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_GPIO_Init+0x202>
 800320a:	2306      	movs	r3, #6
 800320c:	e00c      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 800320e:	2307      	movs	r3, #7
 8003210:	e00a      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 8003212:	2305      	movs	r3, #5
 8003214:	e008      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 8003216:	2304      	movs	r3, #4
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 800321a:	2303      	movs	r3, #3
 800321c:	e004      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 800321e:	2302      	movs	r3, #2
 8003220:	e002      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 8003226:	2300      	movs	r3, #0
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	f002 0203 	and.w	r2, r2, #3
 800322e:	0092      	lsls	r2, r2, #2
 8003230:	4093      	lsls	r3, r2
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003238:	4935      	ldr	r1, [pc, #212]	@ (8003310 <HAL_GPIO_Init+0x304>)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	3302      	adds	r3, #2
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003246:	4b3a      	ldr	r3, [pc, #232]	@ (8003330 <HAL_GPIO_Init+0x324>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800326a:	4a31      	ldr	r2, [pc, #196]	@ (8003330 <HAL_GPIO_Init+0x324>)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003270:	4b2f      	ldr	r3, [pc, #188]	@ (8003330 <HAL_GPIO_Init+0x324>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003294:	4a26      	ldr	r2, [pc, #152]	@ (8003330 <HAL_GPIO_Init+0x324>)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800329a:	4b25      	ldr	r3, [pc, #148]	@ (8003330 <HAL_GPIO_Init+0x324>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032be:	4a1c      	ldr	r2, [pc, #112]	@ (8003330 <HAL_GPIO_Init+0x324>)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003330 <HAL_GPIO_Init+0x324>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e8:	4a11      	ldr	r2, [pc, #68]	@ (8003330 <HAL_GPIO_Init+0x324>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3301      	adds	r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b0f      	cmp	r3, #15
 80032f8:	f67f ae96 	bls.w	8003028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	3724      	adds	r7, #36	@ 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	40013800 	.word	0x40013800
 8003314:	40020000 	.word	0x40020000
 8003318:	40020400 	.word	0x40020400
 800331c:	40020800 	.word	0x40020800
 8003320:	40020c00 	.word	0x40020c00
 8003324:	40021000 	.word	0x40021000
 8003328:	40021400 	.word	0x40021400
 800332c:	40021800 	.word	0x40021800
 8003330:	40013c00 	.word	0x40013c00

08003334 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003336:	b08f      	sub	sp, #60	@ 0x3c
 8003338:	af0a      	add	r7, sp, #40	@ 0x28
 800333a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e116      	b.n	8003574 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d106      	bne.n	8003366 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff f82d 	bl	80023c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2203      	movs	r2, #3
 800336a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f003 f952 	bl	800662e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	687e      	ldr	r6, [r7, #4]
 8003392:	466d      	mov	r5, sp
 8003394:	f106 0410 	add.w	r4, r6, #16
 8003398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800339a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800339c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800339e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80033a8:	1d33      	adds	r3, r6, #4
 80033aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ac:	6838      	ldr	r0, [r7, #0]
 80033ae:	f003 f8dd 	bl	800656c <USB_CoreInit>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0d7      	b.n	8003574 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f003 f940 	bl	8006650 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	e04a      	b.n	800346c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	333d      	adds	r3, #61	@ 0x3d
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	333c      	adds	r3, #60	@ 0x3c
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	b298      	uxth	r0, r3
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3344      	adds	r3, #68	@ 0x44
 8003412:	4602      	mov	r2, r0
 8003414:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	3340      	adds	r3, #64	@ 0x40
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3348      	adds	r3, #72	@ 0x48
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800343e:	7bfa      	ldrb	r2, [r7, #15]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	334c      	adds	r3, #76	@ 0x4c
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	3354      	adds	r3, #84	@ 0x54
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	3301      	adds	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	429a      	cmp	r2, r3
 8003474:	d3af      	bcc.n	80033d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]
 800347a:	e044      	b.n	8003506 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	3301      	adds	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	429a      	cmp	r2, r3
 800350e:	d3b5      	bcc.n	800347c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	687e      	ldr	r6, [r7, #4]
 8003518:	466d      	mov	r5, sp
 800351a:	f106 0410 	add.w	r4, r6, #16
 800351e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800352a:	e885 0003 	stmia.w	r5, {r0, r1}
 800352e:	1d33      	adds	r3, r6, #4
 8003530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003532:	6838      	ldr	r0, [r7, #0]
 8003534:	f003 f8d8 	bl	80066e8 <USB_DevInit>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e014      	b.n	8003574 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	2b01      	cmp	r3, #1
 8003560:	d102      	bne.n	8003568 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f80a 	bl	800357c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f003 fa96 	bl	8006a9e <USB_DevDisconnect>

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800357c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ae:	f043 0303 	orr.w	r3, r3, #3
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0cc      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d8:	4b68      	ldr	r3, [pc, #416]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d90c      	bls.n	8003600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b65      	ldr	r3, [pc, #404]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b63      	ldr	r3, [pc, #396]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0b8      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d020      	beq.n	800364e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003618:	4b59      	ldr	r3, [pc, #356]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4a58      	ldr	r2, [pc, #352]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003630:	4b53      	ldr	r3, [pc, #332]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a52      	ldr	r2, [pc, #328]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800363a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800363c:	4b50      	ldr	r3, [pc, #320]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	494d      	ldr	r1, [pc, #308]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d044      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	4b47      	ldr	r3, [pc, #284]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d119      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e07f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d003      	beq.n	8003682 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367e:	2b03      	cmp	r3, #3
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003682:	4b3f      	ldr	r3, [pc, #252]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e06f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003692:	4b3b      	ldr	r3, [pc, #236]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e067      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a2:	4b37      	ldr	r3, [pc, #220]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f023 0203 	bic.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4934      	ldr	r1, [pc, #208]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b4:	f7fe fff8 	bl	80026a8 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036bc:	f7fe fff4 	bl	80026a8 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e04f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 020c 	and.w	r2, r3, #12
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d1eb      	bne.n	80036bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e4:	4b25      	ldr	r3, [pc, #148]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d20c      	bcs.n	800370c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b22      	ldr	r3, [pc, #136]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b20      	ldr	r3, [pc, #128]	@ (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e032      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003718:	4b19      	ldr	r3, [pc, #100]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4916      	ldr	r1, [pc, #88]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003736:	4b12      	ldr	r3, [pc, #72]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	490e      	ldr	r1, [pc, #56]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800374a:	f000 fb7f 	bl	8003e4c <HAL_RCC_GetSysClockFreq>
 800374e:	4602      	mov	r2, r0
 8003750:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	490a      	ldr	r1, [pc, #40]	@ (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	5ccb      	ldrb	r3, [r1, r3]
 800375e:	fa22 f303 	lsr.w	r3, r2, r3
 8003762:	4a09      	ldr	r2, [pc, #36]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <HAL_RCC_ClockConfig+0x1c8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe ff58 	bl	8002620 <HAL_InitTick>

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023c00 	.word	0x40023c00
 8003780:	40023800 	.word	0x40023800
 8003784:	080077a8 	.word	0x080077a8
 8003788:	200002d8 	.word	0x200002d8
 800378c:	200002dc 	.word	0x200002dc

08003790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003794:	4b03      	ldr	r3, [pc, #12]	@ (80037a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	200002d8 	.word	0x200002d8

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037ac:	f7ff fff0 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0a9b      	lsrs	r3, r3, #10
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4903      	ldr	r1, [pc, #12]	@ (80037cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40023800 	.word	0x40023800
 80037cc:	080077b8 	.word	0x080077b8

080037d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037d4:	f7ff ffdc 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0b5b      	lsrs	r3, r3, #13
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4903      	ldr	r1, [pc, #12]	@ (80037f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	080077b8 	.word	0x080077b8

080037f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08c      	sub	sp, #48	@ 0x30
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d010      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003830:	4b6f      	ldr	r3, [pc, #444]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003836:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383e:	496c      	ldr	r1, [pc, #432]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800384e:	2301      	movs	r3, #1
 8003850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d010      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800385e:	4b64      	ldr	r3, [pc, #400]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003864:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	4960      	ldr	r1, [pc, #384]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800387c:	2301      	movs	r3, #1
 800387e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d017      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800388c:	4b58      	ldr	r3, [pc, #352]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800388e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003892:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	4955      	ldr	r1, [pc, #340]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038aa:	d101      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80038ac:	2301      	movs	r3, #1
 80038ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80038b8:	2301      	movs	r3, #1
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d017      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038c8:	4b49      	ldr	r3, [pc, #292]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d6:	4946      	ldr	r1, [pc, #280]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038e6:	d101      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80038e8:	2301      	movs	r3, #1
 80038ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80038f4:	2301      	movs	r3, #1
 80038f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 808a 	beq.w	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	4b39      	ldr	r3, [pc, #228]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	4a38      	ldr	r2, [pc, #224]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003914:	6413      	str	r3, [r2, #64]	@ 0x40
 8003916:	4b36      	ldr	r3, [pc, #216]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003922:	4b34      	ldr	r3, [pc, #208]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a33      	ldr	r2, [pc, #204]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800392c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800392e:	f7fe febb 	bl	80026a8 <HAL_GetTick>
 8003932:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003936:	f7fe feb7 	bl	80026a8 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e278      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003948:	4b2a      	ldr	r3, [pc, #168]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003954:	4b26      	ldr	r3, [pc, #152]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003958:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d02f      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800396c:	6a3a      	ldr	r2, [r7, #32]
 800396e:	429a      	cmp	r2, r3
 8003970:	d028      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003972:	4b1f      	ldr	r3, [pc, #124]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800397a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800397c:	4b1e      	ldr	r3, [pc, #120]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003982:	4b1d      	ldr	r3, [pc, #116]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003988:	4a19      	ldr	r2, [pc, #100]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800398e:	4b18      	ldr	r3, [pc, #96]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d114      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800399a:	f7fe fe85 	bl	80026a8 <HAL_GetTick>
 800399e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fe fe81 	bl	80026a8 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e240      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b8:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0ee      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039d0:	d114      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80039d2:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80039e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e6:	4902      	ldr	r1, [pc, #8]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	608b      	str	r3, [r1, #8]
 80039ec:	e00c      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40007000 	.word	0x40007000
 80039f8:	42470e40 	.word	0x42470e40
 80039fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a49      	ldr	r2, [pc, #292]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003a06:	6093      	str	r3, [r2, #8]
 8003a08:	4b47      	ldr	r3, [pc, #284]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a14:	4944      	ldr	r1, [pc, #272]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d004      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003a2e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4a:	4937      	ldr	r1, [pc, #220]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a5e:	4b32      	ldr	r3, [pc, #200]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a64:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a6c:	492e      	ldr	r1, [pc, #184]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d011      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a80:	4b29      	ldr	r3, [pc, #164]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a86:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8e:	4926      	ldr	r1, [pc, #152]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ab6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abe:	491a      	ldr	r1, [pc, #104]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d011      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003ad2:	4b15      	ldr	r3, [pc, #84]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae0:	4911      	ldr	r1, [pc, #68]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003af0:	d101      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003af2:	2301      	movs	r3, #1
 8003af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d005      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b04:	f040 80ff 	bne.w	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b08:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b0e:	f7fe fdcb 	bl	80026a8 <HAL_GetTick>
 8003b12:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b14:	e00e      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b16:	f7fe fdc7 	bl	80026a8 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d907      	bls.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e188      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	424711e0 	.word	0x424711e0
 8003b30:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b34:	4b7e      	ldr	r3, [pc, #504]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ea      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d028      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d124      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b68:	4b71      	ldr	r3, [pc, #452]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b6e:	0c1b      	lsrs	r3, r3, #16
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	3301      	adds	r3, #1
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b80:	0e1b      	lsrs	r3, r3, #24
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	019b      	lsls	r3, r3, #6
 8003b92:	431a      	orrs	r2, r3
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	061b      	lsls	r3, r3, #24
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	071b      	lsls	r3, r3, #28
 8003baa:	4961      	ldr	r1, [pc, #388]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d035      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bdc:	d130      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003bde:	4b54      	ldr	r3, [pc, #336]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	3301      	adds	r3, #1
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bf6:	0f1b      	lsrs	r3, r3, #28
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	019b      	lsls	r3, r3, #6
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	041b      	lsls	r3, r3, #16
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	071b      	lsls	r3, r3, #28
 8003c20:	4943      	ldr	r1, [pc, #268]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c28:	4b41      	ldr	r3, [pc, #260]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c2e:	f023 021f 	bic.w	r2, r3, #31
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c36:	3b01      	subs	r3, #1
 8003c38:	493d      	ldr	r1, [pc, #244]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d029      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c54:	d124      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c56:	4b36      	ldr	r3, [pc, #216]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	3301      	adds	r3, #1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c68:	4b31      	ldr	r3, [pc, #196]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c6e:	0f1b      	lsrs	r3, r3, #28
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	019b      	lsls	r3, r3, #6
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	041b      	lsls	r3, r3, #16
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	061b      	lsls	r3, r3, #24
 8003c92:	431a      	orrs	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	071b      	lsls	r3, r3, #28
 8003c98:	4925      	ldr	r1, [pc, #148]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d016      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	041b      	lsls	r3, r3, #16
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	071b      	lsls	r3, r3, #28
 8003cd2:	4917      	ldr	r1, [pc, #92]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cda:	4b16      	ldr	r3, [pc, #88]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ce0:	f7fe fce2 	bl	80026a8 <HAL_GetTick>
 8003ce4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ce8:	f7fe fcde 	bl	80026a8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e09f      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	f040 8095 	bne.w	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d14:	f7fe fcc8 	bl	80026a8 <HAL_GetTick>
 8003d18:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d1a:	e00f      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d1c:	f7fe fcc4 	bl	80026a8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d908      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e085      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	42470068 	.word	0x42470068
 8003d38:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d3c:	4b41      	ldr	r3, [pc, #260]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d48:	d0e8      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d02b      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d127      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003d72:	4b34      	ldr	r3, [pc, #208]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	3b01      	subs	r3, #1
 8003d96:	041b      	lsls	r3, r3, #16
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	061b      	lsls	r3, r3, #24
 8003da0:	4928      	ldr	r1, [pc, #160]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003da8:	4b26      	ldr	r3, [pc, #152]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	3b01      	subs	r3, #1
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	4922      	ldr	r1, [pc, #136]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01d      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dd6:	d118      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dde:	0e1b      	lsrs	r3, r3, #24
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	019b      	lsls	r3, r3, #6
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	041b      	lsls	r3, r3, #16
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	4910      	ldr	r1, [pc, #64]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e10:	f7fe fc4a 	bl	80026a8 <HAL_GetTick>
 8003e14:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e18:	f7fe fc46 	bl	80026a8 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e007      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e2a:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e36:	d1ef      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3730      	adds	r7, #48	@ 0x30
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	42470070 	.word	0x42470070

08003e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e50:	b0ae      	sub	sp, #184	@ 0xb8
 8003e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e72:	4bcb      	ldr	r3, [pc, #812]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b0c      	cmp	r3, #12
 8003e7c:	f200 8206 	bhi.w	800428c <HAL_RCC_GetSysClockFreq+0x440>
 8003e80:	a201      	add	r2, pc, #4	@ (adr r2, 8003e88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003ebd 	.word	0x08003ebd
 8003e8c:	0800428d 	.word	0x0800428d
 8003e90:	0800428d 	.word	0x0800428d
 8003e94:	0800428d 	.word	0x0800428d
 8003e98:	08003ec5 	.word	0x08003ec5
 8003e9c:	0800428d 	.word	0x0800428d
 8003ea0:	0800428d 	.word	0x0800428d
 8003ea4:	0800428d 	.word	0x0800428d
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	0800428d 	.word	0x0800428d
 8003eb0:	0800428d 	.word	0x0800428d
 8003eb4:	0800428d 	.word	0x0800428d
 8003eb8:	080040bd 	.word	0x080040bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ebc:	4bb9      	ldr	r3, [pc, #740]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003ec2:	e1e7      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ec4:	4bb8      	ldr	r3, [pc, #736]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003eca:	e1e3      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ecc:	4bb4      	ldr	r3, [pc, #720]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ed8:	4bb1      	ldr	r3, [pc, #708]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d071      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ee4:	4bae      	ldr	r3, [pc, #696]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	099b      	lsrs	r3, r3, #6
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ef0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	462b      	mov	r3, r5
 8003f0e:	f04f 0000 	mov.w	r0, #0
 8003f12:	f04f 0100 	mov.w	r1, #0
 8003f16:	0159      	lsls	r1, r3, #5
 8003f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f1c:	0150      	lsls	r0, r2, #5
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4621      	mov	r1, r4
 8003f24:	1a51      	subs	r1, r2, r1
 8003f26:	6439      	str	r1, [r7, #64]	@ 0x40
 8003f28:	4629      	mov	r1, r5
 8003f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	018b      	lsls	r3, r1, #6
 8003f40:	4641      	mov	r1, r8
 8003f42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f46:	4641      	mov	r1, r8
 8003f48:	018a      	lsls	r2, r1, #6
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	1a51      	subs	r1, r2, r1
 8003f4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f50:	4649      	mov	r1, r9
 8003f52:	eb63 0301 	sbc.w	r3, r3, r1
 8003f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003f64:	4649      	mov	r1, r9
 8003f66:	00cb      	lsls	r3, r1, #3
 8003f68:	4641      	mov	r1, r8
 8003f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f6e:	4641      	mov	r1, r8
 8003f70:	00ca      	lsls	r2, r1, #3
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	4622      	mov	r2, r4
 8003f7a:	189b      	adds	r3, r3, r2
 8003f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f7e:	462b      	mov	r3, r5
 8003f80:	460a      	mov	r2, r1
 8003f82:	eb42 0303 	adc.w	r3, r2, r3
 8003f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f94:	4629      	mov	r1, r5
 8003f96:	024b      	lsls	r3, r1, #9
 8003f98:	4621      	mov	r1, r4
 8003f9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	024a      	lsls	r2, r1, #9
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fb4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fb8:	f7fc fde0 	bl	8000b7c <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fc6:	e067      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc8:	4b75      	ldr	r3, [pc, #468]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fd4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003fd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003fe6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003fea:	4622      	mov	r2, r4
 8003fec:	462b      	mov	r3, r5
 8003fee:	f04f 0000 	mov.w	r0, #0
 8003ff2:	f04f 0100 	mov.w	r1, #0
 8003ff6:	0159      	lsls	r1, r3, #5
 8003ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ffc:	0150      	lsls	r0, r2, #5
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4621      	mov	r1, r4
 8004004:	1a51      	subs	r1, r2, r1
 8004006:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004008:	4629      	mov	r1, r5
 800400a:	eb63 0301 	sbc.w	r3, r3, r1
 800400e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800401c:	4649      	mov	r1, r9
 800401e:	018b      	lsls	r3, r1, #6
 8004020:	4641      	mov	r1, r8
 8004022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004026:	4641      	mov	r1, r8
 8004028:	018a      	lsls	r2, r1, #6
 800402a:	4641      	mov	r1, r8
 800402c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004030:	4649      	mov	r1, r9
 8004032:	eb63 0b01 	sbc.w	fp, r3, r1
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004042:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004046:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800404a:	4692      	mov	sl, r2
 800404c:	469b      	mov	fp, r3
 800404e:	4623      	mov	r3, r4
 8004050:	eb1a 0303 	adds.w	r3, sl, r3
 8004054:	623b      	str	r3, [r7, #32]
 8004056:	462b      	mov	r3, r5
 8004058:	eb4b 0303 	adc.w	r3, fp, r3
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800406a:	4629      	mov	r1, r5
 800406c:	028b      	lsls	r3, r1, #10
 800406e:	4621      	mov	r1, r4
 8004070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004074:	4621      	mov	r1, r4
 8004076:	028a      	lsls	r2, r1, #10
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004080:	2200      	movs	r2, #0
 8004082:	673b      	str	r3, [r7, #112]	@ 0x70
 8004084:	677a      	str	r2, [r7, #116]	@ 0x74
 8004086:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800408a:	f7fc fd77 	bl	8000b7c <__aeabi_uldivmod>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4613      	mov	r3, r2
 8004094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004098:	4b41      	ldr	r3, [pc, #260]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	3301      	adds	r3, #1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80040aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040ba:	e0eb      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040bc:	4b38      	ldr	r3, [pc, #224]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040c8:	4b35      	ldr	r3, [pc, #212]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d06b      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d4:	4b32      	ldr	r3, [pc, #200]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	099b      	lsrs	r3, r3, #6
 80040da:	2200      	movs	r2, #0
 80040dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80040e8:	2300      	movs	r3, #0
 80040ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80040ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80040f0:	4622      	mov	r2, r4
 80040f2:	462b      	mov	r3, r5
 80040f4:	f04f 0000 	mov.w	r0, #0
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	0159      	lsls	r1, r3, #5
 80040fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004102:	0150      	lsls	r0, r2, #5
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4621      	mov	r1, r4
 800410a:	1a51      	subs	r1, r2, r1
 800410c:	61b9      	str	r1, [r7, #24]
 800410e:	4629      	mov	r1, r5
 8004110:	eb63 0301 	sbc.w	r3, r3, r1
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004122:	4659      	mov	r1, fp
 8004124:	018b      	lsls	r3, r1, #6
 8004126:	4651      	mov	r1, sl
 8004128:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800412c:	4651      	mov	r1, sl
 800412e:	018a      	lsls	r2, r1, #6
 8004130:	4651      	mov	r1, sl
 8004132:	ebb2 0801 	subs.w	r8, r2, r1
 8004136:	4659      	mov	r1, fp
 8004138:	eb63 0901 	sbc.w	r9, r3, r1
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004148:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800414c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004150:	4690      	mov	r8, r2
 8004152:	4699      	mov	r9, r3
 8004154:	4623      	mov	r3, r4
 8004156:	eb18 0303 	adds.w	r3, r8, r3
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	462b      	mov	r3, r5
 800415e:	eb49 0303 	adc.w	r3, r9, r3
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004170:	4629      	mov	r1, r5
 8004172:	024b      	lsls	r3, r1, #9
 8004174:	4621      	mov	r1, r4
 8004176:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800417a:	4621      	mov	r1, r4
 800417c:	024a      	lsls	r2, r1, #9
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004186:	2200      	movs	r2, #0
 8004188:	65bb      	str	r3, [r7, #88]	@ 0x58
 800418a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800418c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004190:	f7fc fcf4 	bl	8000b7c <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4613      	mov	r3, r2
 800419a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800419e:	e065      	b.n	800426c <HAL_RCC_GetSysClockFreq+0x420>
 80041a0:	40023800 	.word	0x40023800
 80041a4:	00f42400 	.word	0x00f42400
 80041a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ac:	4b3d      	ldr	r3, [pc, #244]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	099b      	lsrs	r3, r3, #6
 80041b2:	2200      	movs	r2, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	4611      	mov	r1, r2
 80041b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80041be:	2300      	movs	r3, #0
 80041c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80041c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80041c6:	4642      	mov	r2, r8
 80041c8:	464b      	mov	r3, r9
 80041ca:	f04f 0000 	mov.w	r0, #0
 80041ce:	f04f 0100 	mov.w	r1, #0
 80041d2:	0159      	lsls	r1, r3, #5
 80041d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d8:	0150      	lsls	r0, r2, #5
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4641      	mov	r1, r8
 80041e0:	1a51      	subs	r1, r2, r1
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	4649      	mov	r1, r9
 80041e6:	eb63 0301 	sbc.w	r3, r3, r1
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041f8:	4659      	mov	r1, fp
 80041fa:	018b      	lsls	r3, r1, #6
 80041fc:	4651      	mov	r1, sl
 80041fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004202:	4651      	mov	r1, sl
 8004204:	018a      	lsls	r2, r1, #6
 8004206:	4651      	mov	r1, sl
 8004208:	1a54      	subs	r4, r2, r1
 800420a:	4659      	mov	r1, fp
 800420c:	eb63 0501 	sbc.w	r5, r3, r1
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	00eb      	lsls	r3, r5, #3
 800421a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800421e:	00e2      	lsls	r2, r4, #3
 8004220:	4614      	mov	r4, r2
 8004222:	461d      	mov	r5, r3
 8004224:	4643      	mov	r3, r8
 8004226:	18e3      	adds	r3, r4, r3
 8004228:	603b      	str	r3, [r7, #0]
 800422a:	464b      	mov	r3, r9
 800422c:	eb45 0303 	adc.w	r3, r5, r3
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800423e:	4629      	mov	r1, r5
 8004240:	028b      	lsls	r3, r1, #10
 8004242:	4621      	mov	r1, r4
 8004244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004248:	4621      	mov	r1, r4
 800424a:	028a      	lsls	r2, r1, #10
 800424c:	4610      	mov	r0, r2
 800424e:	4619      	mov	r1, r3
 8004250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004254:	2200      	movs	r2, #0
 8004256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004258:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800425a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800425e:	f7fc fc8d 	bl	8000b7c <__aeabi_uldivmod>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4613      	mov	r3, r2
 8004268:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800426c:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	0f1b      	lsrs	r3, r3, #28
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800427a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800427e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800428a:	e003      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800428c:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800428e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004292:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004294:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004298:	4618      	mov	r0, r3
 800429a:	37b8      	adds	r7, #184	@ 0xb8
 800429c:	46bd      	mov	sp, r7
 800429e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800
 80042a8:	00f42400 	.word	0x00f42400

080042ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e28d      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8083 	beq.w	80043d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042cc:	4b94      	ldr	r3, [pc, #592]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d019      	beq.n	800430c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042d8:	4b91      	ldr	r3, [pc, #580]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d106      	bne.n	80042f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042e4:	4b8e      	ldr	r3, [pc, #568]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042f0:	d00c      	beq.n	800430c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f2:	4b8b      	ldr	r3, [pc, #556]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d112      	bne.n	8004324 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042fe:	4b88      	ldr	r3, [pc, #544]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004306:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800430a:	d10b      	bne.n	8004324 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800430c:	4b84      	ldr	r3, [pc, #528]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d05b      	beq.n	80043d0 <HAL_RCC_OscConfig+0x124>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d157      	bne.n	80043d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e25a      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800432c:	d106      	bne.n	800433c <HAL_RCC_OscConfig+0x90>
 800432e:	4b7c      	ldr	r3, [pc, #496]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a7b      	ldr	r2, [pc, #492]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e01d      	b.n	8004378 <HAL_RCC_OscConfig+0xcc>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004344:	d10c      	bne.n	8004360 <HAL_RCC_OscConfig+0xb4>
 8004346:	4b76      	ldr	r3, [pc, #472]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a75      	ldr	r2, [pc, #468]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 800434c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	4b73      	ldr	r3, [pc, #460]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a72      	ldr	r2, [pc, #456]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	e00b      	b.n	8004378 <HAL_RCC_OscConfig+0xcc>
 8004360:	4b6f      	ldr	r3, [pc, #444]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a6e      	ldr	r2, [pc, #440]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	4b6c      	ldr	r3, [pc, #432]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a6b      	ldr	r2, [pc, #428]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d013      	beq.n	80043a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fe f992 	bl	80026a8 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004388:	f7fe f98e 	bl	80026a8 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b64      	cmp	r3, #100	@ 0x64
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e21f      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b61      	ldr	r3, [pc, #388]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0xdc>
 80043a6:	e014      	b.n	80043d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fe f97e 	bl	80026a8 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043b0:	f7fe f97a 	bl	80026a8 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	@ 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e20b      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c2:	4b57      	ldr	r3, [pc, #348]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x104>
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d06f      	beq.n	80044be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043de:	4b50      	ldr	r3, [pc, #320]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d017      	beq.n	800441a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043ea:	4b4d      	ldr	r3, [pc, #308]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d105      	bne.n	8004402 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004402:	4b47      	ldr	r3, [pc, #284]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800440a:	2b0c      	cmp	r3, #12
 800440c:	d11c      	bne.n	8004448 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800440e:	4b44      	ldr	r3, [pc, #272]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d116      	bne.n	8004448 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	4b41      	ldr	r3, [pc, #260]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_RCC_OscConfig+0x186>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e1d3      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004432:	4b3b      	ldr	r3, [pc, #236]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4937      	ldr	r1, [pc, #220]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004446:	e03a      	b.n	80044be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004450:	4b34      	ldr	r3, [pc, #208]	@ (8004524 <HAL_RCC_OscConfig+0x278>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fe f927 	bl	80026a8 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800445e:	f7fe f923 	bl	80026a8 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e1b4      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004470:	4b2b      	ldr	r3, [pc, #172]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447c:	4b28      	ldr	r3, [pc, #160]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4925      	ldr	r1, [pc, #148]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]
 8004490:	e015      	b.n	80044be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004492:	4b24      	ldr	r3, [pc, #144]	@ (8004524 <HAL_RCC_OscConfig+0x278>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fe f906 	bl	80026a8 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a0:	f7fe f902 	bl	80026a8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e193      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d036      	beq.n	8004538 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d2:	4b15      	ldr	r3, [pc, #84]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d8:	f7fe f8e6 	bl	80026a8 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e0:	f7fe f8e2 	bl	80026a8 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e173      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <HAL_RCC_OscConfig+0x274>)
 80044f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x234>
 80044fe:	e01b      	b.n	8004538 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004500:	4b09      	ldr	r3, [pc, #36]	@ (8004528 <HAL_RCC_OscConfig+0x27c>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004506:	f7fe f8cf 	bl	80026a8 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	e00e      	b.n	800452c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800450e:	f7fe f8cb 	bl	80026a8 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d907      	bls.n	800452c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e15c      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
 8004520:	40023800 	.word	0x40023800
 8004524:	42470000 	.word	0x42470000
 8004528:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452c:	4b8a      	ldr	r3, [pc, #552]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 800452e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1ea      	bne.n	800450e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8097 	beq.w	8004674 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454a:	4b83      	ldr	r3, [pc, #524]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10f      	bne.n	8004576 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004556:	2300      	movs	r3, #0
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	4b7f      	ldr	r3, [pc, #508]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	4a7e      	ldr	r2, [pc, #504]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004564:	6413      	str	r3, [r2, #64]	@ 0x40
 8004566:	4b7c      	ldr	r3, [pc, #496]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004576:	4b79      	ldr	r3, [pc, #484]	@ (800475c <HAL_RCC_OscConfig+0x4b0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d118      	bne.n	80045b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004582:	4b76      	ldr	r3, [pc, #472]	@ (800475c <HAL_RCC_OscConfig+0x4b0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a75      	ldr	r2, [pc, #468]	@ (800475c <HAL_RCC_OscConfig+0x4b0>)
 8004588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800458c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458e:	f7fe f88b 	bl	80026a8 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004596:	f7fe f887 	bl	80026a8 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e118      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a8:	4b6c      	ldr	r3, [pc, #432]	@ (800475c <HAL_RCC_OscConfig+0x4b0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_OscConfig+0x31e>
 80045bc:	4b66      	ldr	r3, [pc, #408]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c0:	4a65      	ldr	r2, [pc, #404]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c8:	e01c      	b.n	8004604 <HAL_RCC_OscConfig+0x358>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b05      	cmp	r3, #5
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x340>
 80045d2:	4b61      	ldr	r3, [pc, #388]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d6:	4a60      	ldr	r2, [pc, #384]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 80045d8:	f043 0304 	orr.w	r3, r3, #4
 80045dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045de:	4b5e      	ldr	r3, [pc, #376]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0x358>
 80045ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f0:	4a59      	ldr	r2, [pc, #356]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f8:	4b57      	ldr	r3, [pc, #348]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fc:	4a56      	ldr	r2, [pc, #344]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 80045fe:	f023 0304 	bic.w	r3, r3, #4
 8004602:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d015      	beq.n	8004638 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fe f84c 	bl	80026a8 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004612:	e00a      	b.n	800462a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fe f848 	bl	80026a8 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e0d7      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462a:	4b4b      	ldr	r3, [pc, #300]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0ee      	beq.n	8004614 <HAL_RCC_OscConfig+0x368>
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fe f836 	bl	80026a8 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463e:	e00a      	b.n	8004656 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004640:	f7fe f832 	bl	80026a8 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e0c1      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004656:	4b40      	ldr	r3, [pc, #256]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1ee      	bne.n	8004640 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d105      	bne.n	8004674 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004668:	4b3b      	ldr	r3, [pc, #236]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 800466a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466c:	4a3a      	ldr	r2, [pc, #232]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 800466e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004672:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80ad 	beq.w	80047d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800467e:	4b36      	ldr	r3, [pc, #216]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
 8004686:	2b08      	cmp	r3, #8
 8004688:	d060      	beq.n	800474c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d145      	bne.n	800471e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004692:	4b33      	ldr	r3, [pc, #204]	@ (8004760 <HAL_RCC_OscConfig+0x4b4>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fe f806 	bl	80026a8 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fe f802 	bl	80026a8 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e093      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b2:	4b29      	ldr	r3, [pc, #164]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69da      	ldr	r2, [r3, #28]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046cc:	019b      	lsls	r3, r3, #6
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	085b      	lsrs	r3, r3, #1
 80046d6:	3b01      	subs	r3, #1
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e0:	061b      	lsls	r3, r3, #24
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e8:	071b      	lsls	r3, r3, #28
 80046ea:	491b      	ldr	r1, [pc, #108]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004760 <HAL_RCC_OscConfig+0x4b4>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fd ffd7 	bl	80026a8 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fe:	f7fd ffd3 	bl	80026a8 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e064      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004710:	4b11      	ldr	r3, [pc, #68]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x452>
 800471c:	e05c      	b.n	80047d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471e:	4b10      	ldr	r3, [pc, #64]	@ (8004760 <HAL_RCC_OscConfig+0x4b4>)
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd ffc0 	bl	80026a8 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472c:	f7fd ffbc 	bl	80026a8 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e04d      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473e:	4b06      	ldr	r3, [pc, #24]	@ (8004758 <HAL_RCC_OscConfig+0x4ac>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x480>
 800474a:	e045      	b.n	80047d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d107      	bne.n	8004764 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e040      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
 8004758:	40023800 	.word	0x40023800
 800475c:	40007000 	.word	0x40007000
 8004760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004764:	4b1f      	ldr	r3, [pc, #124]	@ (80047e4 <HAL_RCC_OscConfig+0x538>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d030      	beq.n	80047d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d129      	bne.n	80047d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d122      	bne.n	80047d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004794:	4013      	ands	r3, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800479a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800479c:	4293      	cmp	r3, r2
 800479e:	d119      	bne.n	80047d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	3b01      	subs	r3, #1
 80047ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d10f      	bne.n	80047d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40023800 	.word	0x40023800

080047e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e07b      	b.n	80048f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d108      	bne.n	8004814 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800480a:	d009      	beq.n	8004820 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	61da      	str	r2, [r3, #28]
 8004812:	e005      	b.n	8004820 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fd fca0 	bl	8002180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004856:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a4:	ea42 0103 	orr.w	r1, r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	f003 0104 	and.w	r1, r3, #4
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	f003 0210 	and.w	r2, r3, #16
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	4613      	mov	r3, r2
 8004908:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d110      	bne.n	8004938 <HAL_SPI_Receive_DMA+0x3c>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800491e:	d10b      	bne.n	8004938 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2204      	movs	r2, #4
 8004924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f8ac 	bl	8004a8c <HAL_SPI_TransmitReceive_DMA>
 8004934:	4603      	mov	r3, r0
 8004936:	e09f      	b.n	8004a78 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_SPI_Receive_DMA+0x4a>
 8004942:	2302      	movs	r3, #2
 8004944:	e098      	b.n	8004a78 <HAL_SPI_Receive_DMA+0x17c>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b01      	cmp	r3, #1
 8004958:	d002      	beq.n	8004960 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800495a:	2302      	movs	r3, #2
 800495c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800495e:	e086      	b.n	8004a6e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <HAL_SPI_Receive_DMA+0x70>
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004970:	e07d      	b.n	8004a6e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2204      	movs	r2, #4
 8004976:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	88fa      	ldrh	r2, [r7, #6]
 800498a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	88fa      	ldrh	r2, [r7, #6]
 8004990:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049b2:	d10f      	bne.n	80049d4 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d8:	4a29      	ldr	r2, [pc, #164]	@ (8004a80 <HAL_SPI_Receive_DMA+0x184>)
 80049da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e0:	4a28      	ldr	r2, [pc, #160]	@ (8004a84 <HAL_SPI_Receive_DMA+0x188>)
 80049e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e8:	4a27      	ldr	r2, [pc, #156]	@ (8004a88 <HAL_SPI_Receive_DMA+0x18c>)
 80049ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f0:	2200      	movs	r2, #0
 80049f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	4619      	mov	r1, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a04:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004a0c:	f7fe f83c 	bl	8002a88 <HAL_DMA_Start_IT>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	f043 0210 	orr.w	r2, r3, #16
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8004a2e:	e01e      	b.n	8004a6e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3a:	2b40      	cmp	r3, #64	@ 0x40
 8004a3c:	d007      	beq.n	8004a4e <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a4c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0220 	orr.w	r2, r2, #32
 8004a5c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0201 	orr.w	r2, r2, #1
 8004a6c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	08004e05 	.word	0x08004e05
 8004a84:	08004ccd 	.word	0x08004ccd
 8004a88:	08004e3d 	.word	0x08004e3d

08004a8c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_SPI_TransmitReceive_DMA+0x20>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e0e3      	b.n	8004c74 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004aba:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004ac2:	7dbb      	ldrb	r3, [r7, #22]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d00d      	beq.n	8004ae4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ace:	d106      	bne.n	8004ade <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <HAL_SPI_TransmitReceive_DMA+0x52>
 8004ad8:	7dbb      	ldrb	r3, [r7, #22]
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d002      	beq.n	8004ae4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ae2:	e0c2      	b.n	8004c6a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004af0:	887b      	ldrh	r3, [r7, #2]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004afa:	e0b6      	b.n	8004c6a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d003      	beq.n	8004b10 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2205      	movs	r2, #5
 8004b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	887a      	ldrh	r2, [r7, #2]
 8004b20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	887a      	ldrh	r2, [r7, #2]
 8004b26:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	887a      	ldrh	r2, [r7, #2]
 8004b32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	887a      	ldrh	r2, [r7, #2]
 8004b38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d108      	bne.n	8004b64 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b56:	4a49      	ldr	r2, [pc, #292]	@ (8004c7c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004b58:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b5e:	4a48      	ldr	r2, [pc, #288]	@ (8004c80 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004b60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b62:	e007      	b.n	8004b74 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b68:	4a46      	ldr	r2, [pc, #280]	@ (8004c84 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8004b6a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b70:	4a45      	ldr	r2, [pc, #276]	@ (8004c88 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8004b72:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b78:	4a44      	ldr	r2, [pc, #272]	@ (8004c8c <HAL_SPI_TransmitReceive_DMA+0x200>)
 8004b7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b80:	2200      	movs	r2, #0
 8004b82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	4619      	mov	r1, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b94:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b9a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004b9c:	f7fd ff74 	bl	8002a88 <HAL_DMA_Start_IT>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00c      	beq.n	8004bc0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004baa:	f043 0210 	orr.w	r2, r3, #16
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8004bbe:	e054      	b.n	8004c6a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bdc:	2200      	movs	r2, #0
 8004bde:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004be4:	2200      	movs	r2, #0
 8004be6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bec:	2200      	movs	r2, #0
 8004bee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c06:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c08:	f7fd ff3e 	bl	8002a88 <HAL_DMA_Start_IT>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c16:	f043 0210 	orr.w	r2, r3, #16
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8004c2a:	e01e      	b.n	8004c6a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c36:	2b40      	cmp	r3, #64	@ 0x40
 8004c38:	d007      	beq.n	8004c4a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c48:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0220 	orr.w	r2, r2, #32
 8004c58:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0202 	orr.w	r2, r2, #2
 8004c68:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	08004e05 	.word	0x08004e05
 8004c80:	08004ccd 	.word	0x08004ccd
 8004c84:	08004e21 	.word	0x08004e21
 8004c88:	08004d75 	.word	0x08004d75
 8004c8c:	08004e3d 	.word	0x08004e3d

08004c90 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cda:	f7fd fce5 	bl	80026a8 <HAL_GetTick>
 8004cde:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cee:	d03b      	beq.n	8004d68 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0220 	bic.w	r2, r2, #32
 8004cfe:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10d      	bne.n	8004d24 <SPI_DMAReceiveCplt+0x58>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d10:	d108      	bne.n	8004d24 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0203 	bic.w	r2, r2, #3
 8004d20:	605a      	str	r2, [r3, #4]
 8004d22:	e007      	b.n	8004d34 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	2164      	movs	r1, #100	@ 0x64
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f927 	bl	8004f8c <SPI_EndRxTransaction>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff ffa9 	bl	8004cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d66:	e002      	b.n	8004d6e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7fc fe5f 	bl	8001a2c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d80:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d82:	f7fd fc91 	bl	80026a8 <HAL_GetTick>
 8004d86:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d96:	d02f      	beq.n	8004df8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0220 	bic.w	r2, r2, #32
 8004da6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	2164      	movs	r1, #100	@ 0x64
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 f953 	bl	8005058 <SPI_EndRxTxTransaction>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0203 	bic.w	r2, r2, #3
 8004dd2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7ff ff61 	bl	8004cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004df6:	e002      	b.n	8004dfe <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff ff49 	bl	8004c90 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7fc fde2 	bl	80019dc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e18:	bf00      	nop
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7ff ff38 	bl	8004ca4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0203 	bic.w	r2, r2, #3
 8004e58:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e5e:	f043 0210 	orr.w	r2, r3, #16
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7ff ff22 	bl	8004cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e8c:	f7fd fc0c 	bl	80026a8 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	4413      	add	r3, r2
 8004e9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e9c:	f7fd fc04 	bl	80026a8 <HAL_GetTick>
 8004ea0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ea2:	4b39      	ldr	r3, [pc, #228]	@ (8004f88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	015b      	lsls	r3, r3, #5
 8004ea8:	0d1b      	lsrs	r3, r3, #20
 8004eaa:	69fa      	ldr	r2, [r7, #28]
 8004eac:	fb02 f303 	mul.w	r3, r2, r3
 8004eb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eb2:	e054      	b.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eba:	d050      	beq.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ebc:	f7fd fbf4 	bl	80026a8 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d902      	bls.n	8004ed2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d13d      	bne.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eea:	d111      	bne.n	8004f10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ef4:	d004      	beq.n	8004f00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004efe:	d107      	bne.n	8004f10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f18:	d10f      	bne.n	8004f3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e017      	b.n	8004f7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4013      	ands	r3, r2
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	bf0c      	ite	eq
 8004f6e:	2301      	moveq	r3, #1
 8004f70:	2300      	movne	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d19b      	bne.n	8004eb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	200002d8 	.word	0x200002d8

08004f8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fa0:	d111      	bne.n	8004fc6 <SPI_EndRxTransaction+0x3a>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004faa:	d004      	beq.n	8004fb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fb4:	d107      	bne.n	8004fc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fc4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fce:	d12a      	bne.n	8005026 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd8:	d012      	beq.n	8005000 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2180      	movs	r1, #128	@ 0x80
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f7ff ff49 	bl	8004e7c <SPI_WaitFlagStateUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d02d      	beq.n	800504c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff4:	f043 0220 	orr.w	r2, r3, #32
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e026      	b.n	800504e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2200      	movs	r2, #0
 8005008:	2101      	movs	r1, #1
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7ff ff36 	bl	8004e7c <SPI_WaitFlagStateUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01a      	beq.n	800504c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800501a:	f043 0220 	orr.w	r2, r3, #32
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e013      	b.n	800504e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2200      	movs	r2, #0
 800502e:	2101      	movs	r1, #1
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff ff23 	bl	8004e7c <SPI_WaitFlagStateUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005040:	f043 0220 	orr.w	r2, r3, #32
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e000      	b.n	800504e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005064:	4b1b      	ldr	r3, [pc, #108]	@ (80050d4 <SPI_EndRxTxTransaction+0x7c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1b      	ldr	r2, [pc, #108]	@ (80050d8 <SPI_EndRxTxTransaction+0x80>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	0d5b      	lsrs	r3, r3, #21
 8005070:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005074:	fb02 f303 	mul.w	r3, r2, r3
 8005078:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005082:	d112      	bne.n	80050aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2200      	movs	r2, #0
 800508c:	2180      	movs	r1, #128	@ 0x80
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff fef4 	bl	8004e7c <SPI_WaitFlagStateUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e00f      	b.n	80050ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c0:	2b80      	cmp	r3, #128	@ 0x80
 80050c2:	d0f2      	beq.n	80050aa <SPI_EndRxTxTransaction+0x52>
 80050c4:	e000      	b.n	80050c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80050c6:	bf00      	nop
  }

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200002d8 	.word	0x200002d8
 80050d8:	165e9f81 	.word	0x165e9f81

080050dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e041      	b.n	8005172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fd f8b8 	bl	8002278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f000 fad8 	bl	80056d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e041      	b.n	8005210 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f839 	bl	8005218 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4619      	mov	r1, r3
 80051b8:	4610      	mov	r0, r2
 80051ba:	f000 fa89 	bl	80056d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <HAL_TIM_PWM_Start+0x24>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b01      	cmp	r3, #1
 8005246:	bf14      	ite	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2300      	moveq	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	e022      	b.n	8005296 <HAL_TIM_PWM_Start+0x6a>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b04      	cmp	r3, #4
 8005254:	d109      	bne.n	800526a <HAL_TIM_PWM_Start+0x3e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b01      	cmp	r3, #1
 8005260:	bf14      	ite	ne
 8005262:	2301      	movne	r3, #1
 8005264:	2300      	moveq	r3, #0
 8005266:	b2db      	uxtb	r3, r3
 8005268:	e015      	b.n	8005296 <HAL_TIM_PWM_Start+0x6a>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b08      	cmp	r3, #8
 800526e:	d109      	bne.n	8005284 <HAL_TIM_PWM_Start+0x58>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	bf14      	ite	ne
 800527c:	2301      	movne	r3, #1
 800527e:	2300      	moveq	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	e008      	b.n	8005296 <HAL_TIM_PWM_Start+0x6a>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	bf14      	ite	ne
 8005290:	2301      	movne	r3, #1
 8005292:	2300      	moveq	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e07c      	b.n	8005398 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_PWM_Start+0x82>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052ac:	e013      	b.n	80052d6 <HAL_TIM_PWM_Start+0xaa>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d104      	bne.n	80052be <HAL_TIM_PWM_Start+0x92>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052bc:	e00b      	b.n	80052d6 <HAL_TIM_PWM_Start+0xaa>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_PWM_Start+0xa2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052cc:	e003      	b.n	80052d6 <HAL_TIM_PWM_Start+0xaa>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2201      	movs	r2, #1
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fce0 	bl	8005ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a2d      	ldr	r2, [pc, #180]	@ (80053a0 <HAL_TIM_PWM_Start+0x174>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_TIM_PWM_Start+0xcc>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a2c      	ldr	r2, [pc, #176]	@ (80053a4 <HAL_TIM_PWM_Start+0x178>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d101      	bne.n	80052fc <HAL_TIM_PWM_Start+0xd0>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <HAL_TIM_PWM_Start+0xd2>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a22      	ldr	r2, [pc, #136]	@ (80053a0 <HAL_TIM_PWM_Start+0x174>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d022      	beq.n	8005362 <HAL_TIM_PWM_Start+0x136>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005324:	d01d      	beq.n	8005362 <HAL_TIM_PWM_Start+0x136>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1f      	ldr	r2, [pc, #124]	@ (80053a8 <HAL_TIM_PWM_Start+0x17c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d018      	beq.n	8005362 <HAL_TIM_PWM_Start+0x136>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1d      	ldr	r2, [pc, #116]	@ (80053ac <HAL_TIM_PWM_Start+0x180>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d013      	beq.n	8005362 <HAL_TIM_PWM_Start+0x136>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1c      	ldr	r2, [pc, #112]	@ (80053b0 <HAL_TIM_PWM_Start+0x184>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00e      	beq.n	8005362 <HAL_TIM_PWM_Start+0x136>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a16      	ldr	r2, [pc, #88]	@ (80053a4 <HAL_TIM_PWM_Start+0x178>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_TIM_PWM_Start+0x136>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a18      	ldr	r2, [pc, #96]	@ (80053b4 <HAL_TIM_PWM_Start+0x188>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_TIM_PWM_Start+0x136>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a16      	ldr	r2, [pc, #88]	@ (80053b8 <HAL_TIM_PWM_Start+0x18c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d111      	bne.n	8005386 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b06      	cmp	r3, #6
 8005372:	d010      	beq.n	8005396 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005384:	e007      	b.n	8005396 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0201 	orr.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40010400 	.word	0x40010400
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800
 80053b0:	40000c00 	.word	0x40000c00
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40001800 	.word	0x40001800

080053bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e0ae      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b0c      	cmp	r3, #12
 80053e6:	f200 809f 	bhi.w	8005528 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053ea:	a201      	add	r2, pc, #4	@ (adr r2, 80053f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005425 	.word	0x08005425
 80053f4:	08005529 	.word	0x08005529
 80053f8:	08005529 	.word	0x08005529
 80053fc:	08005529 	.word	0x08005529
 8005400:	08005465 	.word	0x08005465
 8005404:	08005529 	.word	0x08005529
 8005408:	08005529 	.word	0x08005529
 800540c:	08005529 	.word	0x08005529
 8005410:	080054a7 	.word	0x080054a7
 8005414:	08005529 	.word	0x08005529
 8005418:	08005529 	.word	0x08005529
 800541c:	08005529 	.word	0x08005529
 8005420:	080054e7 	.word	0x080054e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f9f0 	bl	8005810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0208 	orr.w	r2, r2, #8
 800543e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0204 	bic.w	r2, r2, #4
 800544e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6999      	ldr	r1, [r3, #24]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	619a      	str	r2, [r3, #24]
      break;
 8005462:	e064      	b.n	800552e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fa40 	bl	80058f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800547e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800548e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6999      	ldr	r1, [r3, #24]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	021a      	lsls	r2, r3, #8
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	619a      	str	r2, [r3, #24]
      break;
 80054a4:	e043      	b.n	800552e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fa95 	bl	80059dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0208 	orr.w	r2, r2, #8
 80054c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0204 	bic.w	r2, r2, #4
 80054d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69d9      	ldr	r1, [r3, #28]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	61da      	str	r2, [r3, #28]
      break;
 80054e4:	e023      	b.n	800552e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fae9 	bl	8005ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69d9      	ldr	r1, [r3, #28]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	021a      	lsls	r2, r3, #8
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	61da      	str	r2, [r3, #28]
      break;
 8005526:	e002      	b.n	800552e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	75fb      	strb	r3, [r7, #23]
      break;
 800552c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005536:	7dfb      	ldrb	r3, [r7, #23]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_TIM_ConfigClockSource+0x1c>
 8005558:	2302      	movs	r3, #2
 800555a:	e0b4      	b.n	80056c6 <HAL_TIM_ConfigClockSource+0x186>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800557a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005594:	d03e      	beq.n	8005614 <HAL_TIM_ConfigClockSource+0xd4>
 8005596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800559a:	f200 8087 	bhi.w	80056ac <HAL_TIM_ConfigClockSource+0x16c>
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a2:	f000 8086 	beq.w	80056b2 <HAL_TIM_ConfigClockSource+0x172>
 80055a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055aa:	d87f      	bhi.n	80056ac <HAL_TIM_ConfigClockSource+0x16c>
 80055ac:	2b70      	cmp	r3, #112	@ 0x70
 80055ae:	d01a      	beq.n	80055e6 <HAL_TIM_ConfigClockSource+0xa6>
 80055b0:	2b70      	cmp	r3, #112	@ 0x70
 80055b2:	d87b      	bhi.n	80056ac <HAL_TIM_ConfigClockSource+0x16c>
 80055b4:	2b60      	cmp	r3, #96	@ 0x60
 80055b6:	d050      	beq.n	800565a <HAL_TIM_ConfigClockSource+0x11a>
 80055b8:	2b60      	cmp	r3, #96	@ 0x60
 80055ba:	d877      	bhi.n	80056ac <HAL_TIM_ConfigClockSource+0x16c>
 80055bc:	2b50      	cmp	r3, #80	@ 0x50
 80055be:	d03c      	beq.n	800563a <HAL_TIM_ConfigClockSource+0xfa>
 80055c0:	2b50      	cmp	r3, #80	@ 0x50
 80055c2:	d873      	bhi.n	80056ac <HAL_TIM_ConfigClockSource+0x16c>
 80055c4:	2b40      	cmp	r3, #64	@ 0x40
 80055c6:	d058      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x13a>
 80055c8:	2b40      	cmp	r3, #64	@ 0x40
 80055ca:	d86f      	bhi.n	80056ac <HAL_TIM_ConfigClockSource+0x16c>
 80055cc:	2b30      	cmp	r3, #48	@ 0x30
 80055ce:	d064      	beq.n	800569a <HAL_TIM_ConfigClockSource+0x15a>
 80055d0:	2b30      	cmp	r3, #48	@ 0x30
 80055d2:	d86b      	bhi.n	80056ac <HAL_TIM_ConfigClockSource+0x16c>
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d060      	beq.n	800569a <HAL_TIM_ConfigClockSource+0x15a>
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d867      	bhi.n	80056ac <HAL_TIM_ConfigClockSource+0x16c>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d05c      	beq.n	800569a <HAL_TIM_ConfigClockSource+0x15a>
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d05a      	beq.n	800569a <HAL_TIM_ConfigClockSource+0x15a>
 80055e4:	e062      	b.n	80056ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	6899      	ldr	r1, [r3, #8]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f000 fb35 	bl	8005c64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	609a      	str	r2, [r3, #8]
      break;
 8005612:	e04f      	b.n	80056b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	6899      	ldr	r1, [r3, #8]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f000 fb1e 	bl	8005c64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005636:	609a      	str	r2, [r3, #8]
      break;
 8005638:	e03c      	b.n	80056b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6859      	ldr	r1, [r3, #4]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	461a      	mov	r2, r3
 8005648:	f000 fa92 	bl	8005b70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2150      	movs	r1, #80	@ 0x50
 8005652:	4618      	mov	r0, r3
 8005654:	f000 faeb 	bl	8005c2e <TIM_ITRx_SetConfig>
      break;
 8005658:	e02c      	b.n	80056b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6859      	ldr	r1, [r3, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	461a      	mov	r2, r3
 8005668:	f000 fab1 	bl	8005bce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2160      	movs	r1, #96	@ 0x60
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fadb 	bl	8005c2e <TIM_ITRx_SetConfig>
      break;
 8005678:	e01c      	b.n	80056b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	6859      	ldr	r1, [r3, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	461a      	mov	r2, r3
 8005688:	f000 fa72 	bl	8005b70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2140      	movs	r1, #64	@ 0x40
 8005692:	4618      	mov	r0, r3
 8005694:	f000 facb 	bl	8005c2e <TIM_ITRx_SetConfig>
      break;
 8005698:	e00c      	b.n	80056b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4619      	mov	r1, r3
 80056a4:	4610      	mov	r0, r2
 80056a6:	f000 fac2 	bl	8005c2e <TIM_ITRx_SetConfig>
      break;
 80056aa:	e003      	b.n	80056b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	73fb      	strb	r3, [r7, #15]
      break;
 80056b0:	e000      	b.n	80056b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a40      	ldr	r2, [pc, #256]	@ (80057e4 <TIM_Base_SetConfig+0x114>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d013      	beq.n	8005710 <TIM_Base_SetConfig+0x40>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ee:	d00f      	beq.n	8005710 <TIM_Base_SetConfig+0x40>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a3d      	ldr	r2, [pc, #244]	@ (80057e8 <TIM_Base_SetConfig+0x118>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00b      	beq.n	8005710 <TIM_Base_SetConfig+0x40>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3c      	ldr	r2, [pc, #240]	@ (80057ec <TIM_Base_SetConfig+0x11c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d007      	beq.n	8005710 <TIM_Base_SetConfig+0x40>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a3b      	ldr	r2, [pc, #236]	@ (80057f0 <TIM_Base_SetConfig+0x120>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_Base_SetConfig+0x40>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a3a      	ldr	r2, [pc, #232]	@ (80057f4 <TIM_Base_SetConfig+0x124>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d108      	bne.n	8005722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2f      	ldr	r2, [pc, #188]	@ (80057e4 <TIM_Base_SetConfig+0x114>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d02b      	beq.n	8005782 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005730:	d027      	beq.n	8005782 <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a2c      	ldr	r2, [pc, #176]	@ (80057e8 <TIM_Base_SetConfig+0x118>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d023      	beq.n	8005782 <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2b      	ldr	r2, [pc, #172]	@ (80057ec <TIM_Base_SetConfig+0x11c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d01f      	beq.n	8005782 <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2a      	ldr	r2, [pc, #168]	@ (80057f0 <TIM_Base_SetConfig+0x120>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d01b      	beq.n	8005782 <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a29      	ldr	r2, [pc, #164]	@ (80057f4 <TIM_Base_SetConfig+0x124>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d017      	beq.n	8005782 <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a28      	ldr	r2, [pc, #160]	@ (80057f8 <TIM_Base_SetConfig+0x128>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a27      	ldr	r2, [pc, #156]	@ (80057fc <TIM_Base_SetConfig+0x12c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00f      	beq.n	8005782 <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a26      	ldr	r2, [pc, #152]	@ (8005800 <TIM_Base_SetConfig+0x130>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00b      	beq.n	8005782 <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a25      	ldr	r2, [pc, #148]	@ (8005804 <TIM_Base_SetConfig+0x134>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d007      	beq.n	8005782 <TIM_Base_SetConfig+0xb2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a24      	ldr	r2, [pc, #144]	@ (8005808 <TIM_Base_SetConfig+0x138>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_Base_SetConfig+0xb2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a23      	ldr	r2, [pc, #140]	@ (800580c <TIM_Base_SetConfig+0x13c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d108      	bne.n	8005794 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a0a      	ldr	r2, [pc, #40]	@ (80057e4 <TIM_Base_SetConfig+0x114>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_Base_SetConfig+0xf8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a0c      	ldr	r2, [pc, #48]	@ (80057f4 <TIM_Base_SetConfig+0x124>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d103      	bne.n	80057d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	615a      	str	r2, [r3, #20]
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40010000 	.word	0x40010000
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800
 80057f0:	40000c00 	.word	0x40000c00
 80057f4:	40010400 	.word	0x40010400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800
 8005804:	40001800 	.word	0x40001800
 8005808:	40001c00 	.word	0x40001c00
 800580c:	40002000 	.word	0x40002000

08005810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f023 0201 	bic.w	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0303 	bic.w	r3, r3, #3
 8005846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f023 0302 	bic.w	r3, r3, #2
 8005858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a20      	ldr	r2, [pc, #128]	@ (80058e8 <TIM_OC1_SetConfig+0xd8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d003      	beq.n	8005874 <TIM_OC1_SetConfig+0x64>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a1f      	ldr	r2, [pc, #124]	@ (80058ec <TIM_OC1_SetConfig+0xdc>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d10c      	bne.n	800588e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f023 0308 	bic.w	r3, r3, #8
 800587a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f023 0304 	bic.w	r3, r3, #4
 800588c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a15      	ldr	r2, [pc, #84]	@ (80058e8 <TIM_OC1_SetConfig+0xd8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d003      	beq.n	800589e <TIM_OC1_SetConfig+0x8e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a14      	ldr	r2, [pc, #80]	@ (80058ec <TIM_OC1_SetConfig+0xdc>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d111      	bne.n	80058c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	621a      	str	r2, [r3, #32]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40010400 	.word	0x40010400

080058f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f023 0210 	bic.w	r2, r3, #16
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800591e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f023 0320 	bic.w	r3, r3, #32
 800593a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a22      	ldr	r2, [pc, #136]	@ (80059d4 <TIM_OC2_SetConfig+0xe4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_OC2_SetConfig+0x68>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a21      	ldr	r2, [pc, #132]	@ (80059d8 <TIM_OC2_SetConfig+0xe8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d10d      	bne.n	8005974 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800595e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a17      	ldr	r2, [pc, #92]	@ (80059d4 <TIM_OC2_SetConfig+0xe4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_OC2_SetConfig+0x94>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a16      	ldr	r2, [pc, #88]	@ (80059d8 <TIM_OC2_SetConfig+0xe8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d113      	bne.n	80059ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800598a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	621a      	str	r2, [r3, #32]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40010000 	.word	0x40010000
 80059d8:	40010400 	.word	0x40010400

080059dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a21      	ldr	r2, [pc, #132]	@ (8005abc <TIM_OC3_SetConfig+0xe0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d003      	beq.n	8005a42 <TIM_OC3_SetConfig+0x66>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a20      	ldr	r2, [pc, #128]	@ (8005ac0 <TIM_OC3_SetConfig+0xe4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d10d      	bne.n	8005a5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a16      	ldr	r2, [pc, #88]	@ (8005abc <TIM_OC3_SetConfig+0xe0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_OC3_SetConfig+0x92>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a15      	ldr	r2, [pc, #84]	@ (8005ac0 <TIM_OC3_SetConfig+0xe4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d113      	bne.n	8005a96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	621a      	str	r2, [r3, #32]
}
 8005ab0:	bf00      	nop
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	40010000 	.word	0x40010000
 8005ac0:	40010400 	.word	0x40010400

08005ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	031b      	lsls	r3, r3, #12
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a12      	ldr	r2, [pc, #72]	@ (8005b68 <TIM_OC4_SetConfig+0xa4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_OC4_SetConfig+0x68>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a11      	ldr	r2, [pc, #68]	@ (8005b6c <TIM_OC4_SetConfig+0xa8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d109      	bne.n	8005b40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	019b      	lsls	r3, r3, #6
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40010000 	.word	0x40010000
 8005b6c:	40010400 	.word	0x40010400

08005b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	f023 0201 	bic.w	r2, r3, #1
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f023 030a 	bic.w	r3, r3, #10
 8005bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b087      	sub	sp, #28
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f023 0210 	bic.w	r2, r3, #16
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	031b      	lsls	r3, r3, #12
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f043 0307 	orr.w	r3, r3, #7
 8005c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	021a      	lsls	r2, r3, #8
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	609a      	str	r2, [r3, #8]
}
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a1a      	ldr	r2, [r3, #32]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a1a      	ldr	r2, [r3, #32]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 031f 	and.w	r3, r3, #31
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e05a      	b.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a21      	ldr	r2, [pc, #132]	@ (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d022      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d54:	d01d      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d018      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00e      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a18      	ldr	r2, [pc, #96]	@ (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a17      	ldr	r2, [pc, #92]	@ (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a15      	ldr	r2, [pc, #84]	@ (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d10c      	bne.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40010400 	.word	0x40010400
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40001800 	.word	0x40001800

08005de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e03f      	b.n	8005e7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fc fa8e 	bl	8002330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2224      	movs	r2, #36	@ 0x24
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f929 	bl	8006084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695a      	ldr	r2, [r3, #20]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b08a      	sub	sp, #40	@ 0x28
 8005e86:	af02      	add	r7, sp, #8
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	603b      	str	r3, [r7, #0]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d17c      	bne.n	8005f9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_UART_Transmit+0x2c>
 8005ea8:	88fb      	ldrh	r3, [r7, #6]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e075      	b.n	8005f9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_UART_Transmit+0x3e>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e06e      	b.n	8005f9e <HAL_UART_Transmit+0x11c>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2221      	movs	r2, #33	@ 0x21
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ed6:	f7fc fbe7 	bl	80026a8 <HAL_GetTick>
 8005eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	88fa      	ldrh	r2, [r7, #6]
 8005ee6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ef0:	d108      	bne.n	8005f04 <HAL_UART_Transmit+0x82>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e003      	b.n	8005f0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8005f14:	e02a      	b.n	8005f6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2180      	movs	r1, #128	@ 0x80
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f840 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e036      	b.n	8005f9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	3302      	adds	r3, #2
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	e007      	b.n	8005f5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1cf      	bne.n	8005f16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2140      	movs	r1, #64	@ 0x40
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f810 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e006      	b.n	8005f9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e000      	b.n	8005f9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f9c:	2302      	movs	r3, #2
  }
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b090      	sub	sp, #64	@ 0x40
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	603b      	str	r3, [r7, #0]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb6:	e050      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fbe:	d04c      	beq.n	800605a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fc6:	f7fc fb6f 	bl	80026a8 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d241      	bcs.n	800605a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ff6:	637a      	str	r2, [r7, #52]	@ 0x34
 8005ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ffc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e5      	bne.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3314      	adds	r3, #20
 8006010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	613b      	str	r3, [r7, #16]
   return(result);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f023 0301 	bic.w	r3, r3, #1
 8006020:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800602a:	623a      	str	r2, [r7, #32]
 800602c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	69f9      	ldr	r1, [r7, #28]
 8006030:	6a3a      	ldr	r2, [r7, #32]
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	61bb      	str	r3, [r7, #24]
   return(result);
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e5      	bne.n	800600a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e00f      	b.n	800607a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4013      	ands	r3, r2
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	429a      	cmp	r2, r3
 8006068:	bf0c      	ite	eq
 800606a:	2301      	moveq	r3, #1
 800606c:	2300      	movne	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	429a      	cmp	r2, r3
 8006076:	d09f      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3740      	adds	r7, #64	@ 0x40
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006088:	b0c0      	sub	sp, #256	@ 0x100
 800608a:	af00      	add	r7, sp, #0
 800608c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800609c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a0:	68d9      	ldr	r1, [r3, #12]
 80060a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	ea40 0301 	orr.w	r3, r0, r1
 80060ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	431a      	orrs	r2, r3
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060dc:	f021 010c 	bic.w	r1, r1, #12
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060ea:	430b      	orrs	r3, r1
 80060ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fe:	6999      	ldr	r1, [r3, #24]
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	ea40 0301 	orr.w	r3, r0, r1
 800610a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b8f      	ldr	r3, [pc, #572]	@ (8006350 <UART_SetConfig+0x2cc>)
 8006114:	429a      	cmp	r2, r3
 8006116:	d005      	beq.n	8006124 <UART_SetConfig+0xa0>
 8006118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4b8d      	ldr	r3, [pc, #564]	@ (8006354 <UART_SetConfig+0x2d0>)
 8006120:	429a      	cmp	r2, r3
 8006122:	d104      	bne.n	800612e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006124:	f7fd fb54 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 8006128:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800612c:	e003      	b.n	8006136 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800612e:	f7fd fb3b 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8006132:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006140:	f040 810c 	bne.w	800635c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006148:	2200      	movs	r2, #0
 800614a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800614e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006152:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006156:	4622      	mov	r2, r4
 8006158:	462b      	mov	r3, r5
 800615a:	1891      	adds	r1, r2, r2
 800615c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800615e:	415b      	adcs	r3, r3
 8006160:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006162:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006166:	4621      	mov	r1, r4
 8006168:	eb12 0801 	adds.w	r8, r2, r1
 800616c:	4629      	mov	r1, r5
 800616e:	eb43 0901 	adc.w	r9, r3, r1
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	f04f 0300 	mov.w	r3, #0
 800617a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800617e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006186:	4690      	mov	r8, r2
 8006188:	4699      	mov	r9, r3
 800618a:	4623      	mov	r3, r4
 800618c:	eb18 0303 	adds.w	r3, r8, r3
 8006190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006194:	462b      	mov	r3, r5
 8006196:	eb49 0303 	adc.w	r3, r9, r3
 800619a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800619e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061b2:	460b      	mov	r3, r1
 80061b4:	18db      	adds	r3, r3, r3
 80061b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80061b8:	4613      	mov	r3, r2
 80061ba:	eb42 0303 	adc.w	r3, r2, r3
 80061be:	657b      	str	r3, [r7, #84]	@ 0x54
 80061c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061c8:	f7fa fcd8 	bl	8000b7c <__aeabi_uldivmod>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4b61      	ldr	r3, [pc, #388]	@ (8006358 <UART_SetConfig+0x2d4>)
 80061d2:	fba3 2302 	umull	r2, r3, r3, r2
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	011c      	lsls	r4, r3, #4
 80061da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061ec:	4642      	mov	r2, r8
 80061ee:	464b      	mov	r3, r9
 80061f0:	1891      	adds	r1, r2, r2
 80061f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061f4:	415b      	adcs	r3, r3
 80061f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061fc:	4641      	mov	r1, r8
 80061fe:	eb12 0a01 	adds.w	sl, r2, r1
 8006202:	4649      	mov	r1, r9
 8006204:	eb43 0b01 	adc.w	fp, r3, r1
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006214:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800621c:	4692      	mov	sl, r2
 800621e:	469b      	mov	fp, r3
 8006220:	4643      	mov	r3, r8
 8006222:	eb1a 0303 	adds.w	r3, sl, r3
 8006226:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800622a:	464b      	mov	r3, r9
 800622c:	eb4b 0303 	adc.w	r3, fp, r3
 8006230:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006240:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006244:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006248:	460b      	mov	r3, r1
 800624a:	18db      	adds	r3, r3, r3
 800624c:	643b      	str	r3, [r7, #64]	@ 0x40
 800624e:	4613      	mov	r3, r2
 8006250:	eb42 0303 	adc.w	r3, r2, r3
 8006254:	647b      	str	r3, [r7, #68]	@ 0x44
 8006256:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800625a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800625e:	f7fa fc8d 	bl	8000b7c <__aeabi_uldivmod>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4611      	mov	r1, r2
 8006268:	4b3b      	ldr	r3, [pc, #236]	@ (8006358 <UART_SetConfig+0x2d4>)
 800626a:	fba3 2301 	umull	r2, r3, r3, r1
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	2264      	movs	r2, #100	@ 0x64
 8006272:	fb02 f303 	mul.w	r3, r2, r3
 8006276:	1acb      	subs	r3, r1, r3
 8006278:	00db      	lsls	r3, r3, #3
 800627a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800627e:	4b36      	ldr	r3, [pc, #216]	@ (8006358 <UART_SetConfig+0x2d4>)
 8006280:	fba3 2302 	umull	r2, r3, r3, r2
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800628c:	441c      	add	r4, r3
 800628e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006292:	2200      	movs	r2, #0
 8006294:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006298:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800629c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	1891      	adds	r1, r2, r2
 80062a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062a8:	415b      	adcs	r3, r3
 80062aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062b0:	4641      	mov	r1, r8
 80062b2:	1851      	adds	r1, r2, r1
 80062b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80062b6:	4649      	mov	r1, r9
 80062b8:	414b      	adcs	r3, r1
 80062ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062c8:	4659      	mov	r1, fp
 80062ca:	00cb      	lsls	r3, r1, #3
 80062cc:	4651      	mov	r1, sl
 80062ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062d2:	4651      	mov	r1, sl
 80062d4:	00ca      	lsls	r2, r1, #3
 80062d6:	4610      	mov	r0, r2
 80062d8:	4619      	mov	r1, r3
 80062da:	4603      	mov	r3, r0
 80062dc:	4642      	mov	r2, r8
 80062de:	189b      	adds	r3, r3, r2
 80062e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062e4:	464b      	mov	r3, r9
 80062e6:	460a      	mov	r2, r1
 80062e8:	eb42 0303 	adc.w	r3, r2, r3
 80062ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006300:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006304:	460b      	mov	r3, r1
 8006306:	18db      	adds	r3, r3, r3
 8006308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800630a:	4613      	mov	r3, r2
 800630c:	eb42 0303 	adc.w	r3, r2, r3
 8006310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006316:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800631a:	f7fa fc2f 	bl	8000b7c <__aeabi_uldivmod>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	4b0d      	ldr	r3, [pc, #52]	@ (8006358 <UART_SetConfig+0x2d4>)
 8006324:	fba3 1302 	umull	r1, r3, r3, r2
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	2164      	movs	r1, #100	@ 0x64
 800632c:	fb01 f303 	mul.w	r3, r1, r3
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	3332      	adds	r3, #50	@ 0x32
 8006336:	4a08      	ldr	r2, [pc, #32]	@ (8006358 <UART_SetConfig+0x2d4>)
 8006338:	fba2 2303 	umull	r2, r3, r2, r3
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	f003 0207 	and.w	r2, r3, #7
 8006342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4422      	add	r2, r4
 800634a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800634c:	e106      	b.n	800655c <UART_SetConfig+0x4d8>
 800634e:	bf00      	nop
 8006350:	40011000 	.word	0x40011000
 8006354:	40011400 	.word	0x40011400
 8006358:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800635c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006360:	2200      	movs	r2, #0
 8006362:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006366:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800636a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800636e:	4642      	mov	r2, r8
 8006370:	464b      	mov	r3, r9
 8006372:	1891      	adds	r1, r2, r2
 8006374:	6239      	str	r1, [r7, #32]
 8006376:	415b      	adcs	r3, r3
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24
 800637a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800637e:	4641      	mov	r1, r8
 8006380:	1854      	adds	r4, r2, r1
 8006382:	4649      	mov	r1, r9
 8006384:	eb43 0501 	adc.w	r5, r3, r1
 8006388:	f04f 0200 	mov.w	r2, #0
 800638c:	f04f 0300 	mov.w	r3, #0
 8006390:	00eb      	lsls	r3, r5, #3
 8006392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006396:	00e2      	lsls	r2, r4, #3
 8006398:	4614      	mov	r4, r2
 800639a:	461d      	mov	r5, r3
 800639c:	4643      	mov	r3, r8
 800639e:	18e3      	adds	r3, r4, r3
 80063a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063a4:	464b      	mov	r3, r9
 80063a6:	eb45 0303 	adc.w	r3, r5, r3
 80063aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	f04f 0300 	mov.w	r3, #0
 80063c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063ca:	4629      	mov	r1, r5
 80063cc:	008b      	lsls	r3, r1, #2
 80063ce:	4621      	mov	r1, r4
 80063d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063d4:	4621      	mov	r1, r4
 80063d6:	008a      	lsls	r2, r1, #2
 80063d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063dc:	f7fa fbce 	bl	8000b7c <__aeabi_uldivmod>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	4b60      	ldr	r3, [pc, #384]	@ (8006568 <UART_SetConfig+0x4e4>)
 80063e6:	fba3 2302 	umull	r2, r3, r3, r2
 80063ea:	095b      	lsrs	r3, r3, #5
 80063ec:	011c      	lsls	r4, r3, #4
 80063ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006400:	4642      	mov	r2, r8
 8006402:	464b      	mov	r3, r9
 8006404:	1891      	adds	r1, r2, r2
 8006406:	61b9      	str	r1, [r7, #24]
 8006408:	415b      	adcs	r3, r3
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006410:	4641      	mov	r1, r8
 8006412:	1851      	adds	r1, r2, r1
 8006414:	6139      	str	r1, [r7, #16]
 8006416:	4649      	mov	r1, r9
 8006418:	414b      	adcs	r3, r1
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	f04f 0300 	mov.w	r3, #0
 8006424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006428:	4659      	mov	r1, fp
 800642a:	00cb      	lsls	r3, r1, #3
 800642c:	4651      	mov	r1, sl
 800642e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006432:	4651      	mov	r1, sl
 8006434:	00ca      	lsls	r2, r1, #3
 8006436:	4610      	mov	r0, r2
 8006438:	4619      	mov	r1, r3
 800643a:	4603      	mov	r3, r0
 800643c:	4642      	mov	r2, r8
 800643e:	189b      	adds	r3, r3, r2
 8006440:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006444:	464b      	mov	r3, r9
 8006446:	460a      	mov	r2, r1
 8006448:	eb42 0303 	adc.w	r3, r2, r3
 800644c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	67bb      	str	r3, [r7, #120]	@ 0x78
 800645a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006468:	4649      	mov	r1, r9
 800646a:	008b      	lsls	r3, r1, #2
 800646c:	4641      	mov	r1, r8
 800646e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006472:	4641      	mov	r1, r8
 8006474:	008a      	lsls	r2, r1, #2
 8006476:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800647a:	f7fa fb7f 	bl	8000b7c <__aeabi_uldivmod>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4611      	mov	r1, r2
 8006484:	4b38      	ldr	r3, [pc, #224]	@ (8006568 <UART_SetConfig+0x4e4>)
 8006486:	fba3 2301 	umull	r2, r3, r3, r1
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	2264      	movs	r2, #100	@ 0x64
 800648e:	fb02 f303 	mul.w	r3, r2, r3
 8006492:	1acb      	subs	r3, r1, r3
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	3332      	adds	r3, #50	@ 0x32
 8006498:	4a33      	ldr	r2, [pc, #204]	@ (8006568 <UART_SetConfig+0x4e4>)
 800649a:	fba2 2303 	umull	r2, r3, r2, r3
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064a4:	441c      	add	r4, r3
 80064a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064aa:	2200      	movs	r2, #0
 80064ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80064ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80064b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064b4:	4642      	mov	r2, r8
 80064b6:	464b      	mov	r3, r9
 80064b8:	1891      	adds	r1, r2, r2
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	415b      	adcs	r3, r3
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064c4:	4641      	mov	r1, r8
 80064c6:	1851      	adds	r1, r2, r1
 80064c8:	6039      	str	r1, [r7, #0]
 80064ca:	4649      	mov	r1, r9
 80064cc:	414b      	adcs	r3, r1
 80064ce:	607b      	str	r3, [r7, #4]
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064dc:	4659      	mov	r1, fp
 80064de:	00cb      	lsls	r3, r1, #3
 80064e0:	4651      	mov	r1, sl
 80064e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064e6:	4651      	mov	r1, sl
 80064e8:	00ca      	lsls	r2, r1, #3
 80064ea:	4610      	mov	r0, r2
 80064ec:	4619      	mov	r1, r3
 80064ee:	4603      	mov	r3, r0
 80064f0:	4642      	mov	r2, r8
 80064f2:	189b      	adds	r3, r3, r2
 80064f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064f6:	464b      	mov	r3, r9
 80064f8:	460a      	mov	r2, r1
 80064fa:	eb42 0303 	adc.w	r3, r2, r3
 80064fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	663b      	str	r3, [r7, #96]	@ 0x60
 800650a:	667a      	str	r2, [r7, #100]	@ 0x64
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006518:	4649      	mov	r1, r9
 800651a:	008b      	lsls	r3, r1, #2
 800651c:	4641      	mov	r1, r8
 800651e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006522:	4641      	mov	r1, r8
 8006524:	008a      	lsls	r2, r1, #2
 8006526:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800652a:	f7fa fb27 	bl	8000b7c <__aeabi_uldivmod>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4b0d      	ldr	r3, [pc, #52]	@ (8006568 <UART_SetConfig+0x4e4>)
 8006534:	fba3 1302 	umull	r1, r3, r3, r2
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	2164      	movs	r1, #100	@ 0x64
 800653c:	fb01 f303 	mul.w	r3, r1, r3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	3332      	adds	r3, #50	@ 0x32
 8006546:	4a08      	ldr	r2, [pc, #32]	@ (8006568 <UART_SetConfig+0x4e4>)
 8006548:	fba2 2303 	umull	r2, r3, r2, r3
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	f003 020f 	and.w	r2, r3, #15
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4422      	add	r2, r4
 800655a:	609a      	str	r2, [r3, #8]
}
 800655c:	bf00      	nop
 800655e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006562:	46bd      	mov	sp, r7
 8006564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006568:	51eb851f 	.word	0x51eb851f

0800656c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800656c:	b084      	sub	sp, #16
 800656e:	b580      	push	{r7, lr}
 8006570:	b084      	sub	sp, #16
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	f107 001c 	add.w	r0, r7, #28
 800657a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	2b01      	cmp	r3, #1
 8006582:	d122      	bne.n	80065ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006588:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d105      	bne.n	80065be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fa9c 	bl	8006afc <USB_CoreReset>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
 80065c8:	e01a      	b.n	8006600 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa90 	bl	8006afc <USB_CoreReset>
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80065f2:	e005      	b.n	8006600 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006602:	2b01      	cmp	r3, #1
 8006604:	d10b      	bne.n	800661e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f043 0206 	orr.w	r2, r3, #6
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f043 0220 	orr.w	r2, r3, #32
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800661e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800662a:	b004      	add	sp, #16
 800662c:	4770      	bx	lr

0800662e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f023 0201 	bic.w	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d115      	bne.n	800669e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800667e:	2001      	movs	r0, #1
 8006680:	f7fc f81e 	bl	80026c0 <HAL_Delay>
      ms++;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3301      	adds	r3, #1
 8006688:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fa28 	bl	8006ae0 <USB_GetMode>
 8006690:	4603      	mov	r3, r0
 8006692:	2b01      	cmp	r3, #1
 8006694:	d01e      	beq.n	80066d4 <USB_SetCurrentMode+0x84>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b31      	cmp	r3, #49	@ 0x31
 800669a:	d9f0      	bls.n	800667e <USB_SetCurrentMode+0x2e>
 800669c:	e01a      	b.n	80066d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d115      	bne.n	80066d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066b0:	2001      	movs	r0, #1
 80066b2:	f7fc f805 	bl	80026c0 <HAL_Delay>
      ms++;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3301      	adds	r3, #1
 80066ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fa0f 	bl	8006ae0 <USB_GetMode>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <USB_SetCurrentMode+0x84>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b31      	cmp	r3, #49	@ 0x31
 80066cc:	d9f0      	bls.n	80066b0 <USB_SetCurrentMode+0x60>
 80066ce:	e001      	b.n	80066d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e005      	b.n	80066e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b32      	cmp	r3, #50	@ 0x32
 80066d8:	d101      	bne.n	80066de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066e8:	b084      	sub	sp, #16
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b086      	sub	sp, #24
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80066f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006702:	2300      	movs	r3, #0
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	e009      	b.n	800671c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	3340      	adds	r3, #64	@ 0x40
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	2200      	movs	r2, #0
 8006714:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	3301      	adds	r3, #1
 800671a:	613b      	str	r3, [r7, #16]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	2b0e      	cmp	r3, #14
 8006720:	d9f2      	bls.n	8006708 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d11c      	bne.n	8006762 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006736:	f043 0302 	orr.w	r3, r3, #2
 800673a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006740:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	e005      	b.n	800676e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006766:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006774:	461a      	mov	r2, r3
 8006776:	2300      	movs	r3, #0
 8006778:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006780:	4619      	mov	r1, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006788:	461a      	mov	r2, r3
 800678a:	680b      	ldr	r3, [r1, #0]
 800678c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800678e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006790:	2b01      	cmp	r3, #1
 8006792:	d10c      	bne.n	80067ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d104      	bne.n	80067a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800679a:	2100      	movs	r1, #0
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f965 	bl	8006a6c <USB_SetDevSpeed>
 80067a2:	e008      	b.n	80067b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067a4:	2101      	movs	r1, #1
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f960 	bl	8006a6c <USB_SetDevSpeed>
 80067ac:	e003      	b.n	80067b6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067ae:	2103      	movs	r1, #3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f95b 	bl	8006a6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067b6:	2110      	movs	r1, #16
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f8f3 	bl	80069a4 <USB_FlushTxFifo>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f91f 	bl	8006a0c <USB_FlushRxFifo>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067de:	461a      	mov	r2, r3
 80067e0:	2300      	movs	r3, #0
 80067e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ea:	461a      	mov	r2, r3
 80067ec:	2300      	movs	r3, #0
 80067ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f6:	461a      	mov	r2, r3
 80067f8:	2300      	movs	r3, #0
 80067fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067fc:	2300      	movs	r3, #0
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	e043      	b.n	800688a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4413      	add	r3, r2
 800680a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006814:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006818:	d118      	bne.n	800684c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800682c:	461a      	mov	r2, r3
 800682e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	e013      	b.n	800685e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006842:	461a      	mov	r2, r3
 8006844:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	e008      	b.n	800685e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006858:	461a      	mov	r2, r3
 800685a:	2300      	movs	r3, #0
 800685c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800686a:	461a      	mov	r2, r3
 800686c:	2300      	movs	r3, #0
 800686e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800687c:	461a      	mov	r2, r3
 800687e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006882:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	3301      	adds	r3, #1
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	429a      	cmp	r2, r3
 8006890:	d3b7      	bcc.n	8006802 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006892:	2300      	movs	r3, #0
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	e043      	b.n	8006920 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068ae:	d118      	bne.n	80068e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c2:	461a      	mov	r2, r3
 80068c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	e013      	b.n	80068f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d8:	461a      	mov	r2, r3
 80068da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	e008      	b.n	80068f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ee:	461a      	mov	r2, r3
 80068f0:	2300      	movs	r3, #0
 80068f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006900:	461a      	mov	r2, r3
 8006902:	2300      	movs	r3, #0
 8006904:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006912:	461a      	mov	r2, r3
 8006914:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006918:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	3301      	adds	r3, #1
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	429a      	cmp	r2, r3
 8006926:	d3b7      	bcc.n	8006898 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006936:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800693a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006948:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	2b00      	cmp	r3, #0
 800694e:	d105      	bne.n	800695c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	f043 0210 	orr.w	r2, r3, #16
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	699a      	ldr	r2, [r3, #24]
 8006960:	4b0f      	ldr	r3, [pc, #60]	@ (80069a0 <USB_DevInit+0x2b8>)
 8006962:	4313      	orrs	r3, r2
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	f043 0208 	orr.w	r2, r3, #8
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800697a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800697c:	2b01      	cmp	r3, #1
 800697e:	d107      	bne.n	8006990 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006988:	f043 0304 	orr.w	r3, r3, #4
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006990:	7dfb      	ldrb	r3, [r7, #23]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800699c:	b004      	add	sp, #16
 800699e:	4770      	bx	lr
 80069a0:	803c3800 	.word	0x803c3800

080069a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4a13      	ldr	r2, [pc, #76]	@ (8006a08 <USB_FlushTxFifo+0x64>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d901      	bls.n	80069c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e01b      	b.n	80069fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	daf2      	bge.n	80069b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	019b      	lsls	r3, r3, #6
 80069d4:	f043 0220 	orr.w	r2, r3, #32
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3301      	adds	r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a08      	ldr	r2, [pc, #32]	@ (8006a08 <USB_FlushTxFifo+0x64>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e006      	b.n	80069fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	d0f0      	beq.n	80069dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	00030d40 	.word	0x00030d40

08006a0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4a11      	ldr	r2, [pc, #68]	@ (8006a68 <USB_FlushRxFifo+0x5c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d901      	bls.n	8006a2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e018      	b.n	8006a5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	daf2      	bge.n	8006a18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2210      	movs	r2, #16
 8006a3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4a08      	ldr	r2, [pc, #32]	@ (8006a68 <USB_FlushRxFifo+0x5c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d901      	bls.n	8006a4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e006      	b.n	8006a5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	2b10      	cmp	r3, #16
 8006a58:	d0f0      	beq.n	8006a3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	00030d40 	.word	0x00030d40

08006a6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ab8:	f023 0303 	bic.w	r3, r3, #3
 8006abc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006acc:	f043 0302 	orr.w	r3, r3, #2
 8006ad0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	f003 0301 	and.w	r3, r3, #1
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4a13      	ldr	r2, [pc, #76]	@ (8006b60 <USB_CoreReset+0x64>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d901      	bls.n	8006b1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e01b      	b.n	8006b52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	daf2      	bge.n	8006b08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f043 0201 	orr.w	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3301      	adds	r3, #1
 8006b36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4a09      	ldr	r2, [pc, #36]	@ (8006b60 <USB_CoreReset+0x64>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d901      	bls.n	8006b44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e006      	b.n	8006b52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d0f0      	beq.n	8006b32 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	00030d40 	.word	0x00030d40

08006b64 <malloc>:
 8006b64:	4b02      	ldr	r3, [pc, #8]	@ (8006b70 <malloc+0xc>)
 8006b66:	4601      	mov	r1, r0
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	f000 b82d 	b.w	8006bc8 <_malloc_r>
 8006b6e:	bf00      	nop
 8006b70:	200002e4 	.word	0x200002e4

08006b74 <free>:
 8006b74:	4b02      	ldr	r3, [pc, #8]	@ (8006b80 <free+0xc>)
 8006b76:	4601      	mov	r1, r0
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	f000 b91b 	b.w	8006db4 <_free_r>
 8006b7e:	bf00      	nop
 8006b80:	200002e4 	.word	0x200002e4

08006b84 <sbrk_aligned>:
 8006b84:	b570      	push	{r4, r5, r6, lr}
 8006b86:	4e0f      	ldr	r6, [pc, #60]	@ (8006bc4 <sbrk_aligned+0x40>)
 8006b88:	460c      	mov	r4, r1
 8006b8a:	6831      	ldr	r1, [r6, #0]
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	b911      	cbnz	r1, 8006b96 <sbrk_aligned+0x12>
 8006b90:	f000 f8c6 	bl	8006d20 <_sbrk_r>
 8006b94:	6030      	str	r0, [r6, #0]
 8006b96:	4621      	mov	r1, r4
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f000 f8c1 	bl	8006d20 <_sbrk_r>
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	d103      	bne.n	8006baa <sbrk_aligned+0x26>
 8006ba2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	bd70      	pop	{r4, r5, r6, pc}
 8006baa:	1cc4      	adds	r4, r0, #3
 8006bac:	f024 0403 	bic.w	r4, r4, #3
 8006bb0:	42a0      	cmp	r0, r4
 8006bb2:	d0f8      	beq.n	8006ba6 <sbrk_aligned+0x22>
 8006bb4:	1a21      	subs	r1, r4, r0
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 f8b2 	bl	8006d20 <_sbrk_r>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d1f2      	bne.n	8006ba6 <sbrk_aligned+0x22>
 8006bc0:	e7ef      	b.n	8006ba2 <sbrk_aligned+0x1e>
 8006bc2:	bf00      	nop
 8006bc4:	200069c8 	.word	0x200069c8

08006bc8 <_malloc_r>:
 8006bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bcc:	1ccd      	adds	r5, r1, #3
 8006bce:	f025 0503 	bic.w	r5, r5, #3
 8006bd2:	3508      	adds	r5, #8
 8006bd4:	2d0c      	cmp	r5, #12
 8006bd6:	bf38      	it	cc
 8006bd8:	250c      	movcc	r5, #12
 8006bda:	2d00      	cmp	r5, #0
 8006bdc:	4606      	mov	r6, r0
 8006bde:	db01      	blt.n	8006be4 <_malloc_r+0x1c>
 8006be0:	42a9      	cmp	r1, r5
 8006be2:	d904      	bls.n	8006bee <_malloc_r+0x26>
 8006be4:	230c      	movs	r3, #12
 8006be6:	6033      	str	r3, [r6, #0]
 8006be8:	2000      	movs	r0, #0
 8006bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bee:	4f31      	ldr	r7, [pc, #196]	@ (8006cb4 <_malloc_r+0xec>)
 8006bf0:	f000 f862 	bl	8006cb8 <__malloc_lock>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	461c      	mov	r4, r3
 8006bf8:	bb44      	cbnz	r4, 8006c4c <_malloc_r+0x84>
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f7ff ffc1 	bl	8006b84 <sbrk_aligned>
 8006c02:	1c43      	adds	r3, r0, #1
 8006c04:	4604      	mov	r4, r0
 8006c06:	d150      	bne.n	8006caa <_malloc_r+0xe2>
 8006c08:	683c      	ldr	r4, [r7, #0]
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	2900      	cmp	r1, #0
 8006c0e:	d141      	bne.n	8006c94 <_malloc_r+0xcc>
 8006c10:	2c00      	cmp	r4, #0
 8006c12:	d044      	beq.n	8006c9e <_malloc_r+0xd6>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	4630      	mov	r0, r6
 8006c18:	eb04 0803 	add.w	r8, r4, r3
 8006c1c:	f000 f880 	bl	8006d20 <_sbrk_r>
 8006c20:	4580      	cmp	r8, r0
 8006c22:	d13c      	bne.n	8006c9e <_malloc_r+0xd6>
 8006c24:	6821      	ldr	r1, [r4, #0]
 8006c26:	1a6d      	subs	r5, r5, r1
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f7ff ffaa 	bl	8006b84 <sbrk_aligned>
 8006c30:	3001      	adds	r0, #1
 8006c32:	d034      	beq.n	8006c9e <_malloc_r+0xd6>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	442b      	add	r3, r5
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d036      	beq.n	8006cae <_malloc_r+0xe6>
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	42a2      	cmp	r2, r4
 8006c44:	d129      	bne.n	8006c9a <_malloc_r+0xd2>
 8006c46:	2200      	movs	r2, #0
 8006c48:	605a      	str	r2, [r3, #4]
 8006c4a:	e00e      	b.n	8006c6a <_malloc_r+0xa2>
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	1b52      	subs	r2, r2, r5
 8006c50:	d41d      	bmi.n	8006c8e <_malloc_r+0xc6>
 8006c52:	2a0b      	cmp	r2, #11
 8006c54:	d916      	bls.n	8006c84 <_malloc_r+0xbc>
 8006c56:	1961      	adds	r1, r4, r5
 8006c58:	42a3      	cmp	r3, r4
 8006c5a:	6025      	str	r5, [r4, #0]
 8006c5c:	bf18      	it	ne
 8006c5e:	6059      	strne	r1, [r3, #4]
 8006c60:	6863      	ldr	r3, [r4, #4]
 8006c62:	bf08      	it	eq
 8006c64:	6039      	streq	r1, [r7, #0]
 8006c66:	5162      	str	r2, [r4, r5]
 8006c68:	604b      	str	r3, [r1, #4]
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f000 f82a 	bl	8006cc4 <__malloc_unlock>
 8006c70:	f104 000b 	add.w	r0, r4, #11
 8006c74:	1d23      	adds	r3, r4, #4
 8006c76:	f020 0007 	bic.w	r0, r0, #7
 8006c7a:	1ac2      	subs	r2, r0, r3
 8006c7c:	d0b5      	beq.n	8006bea <_malloc_r+0x22>
 8006c7e:	1a1b      	subs	r3, r3, r0
 8006c80:	50a3      	str	r3, [r4, r2]
 8006c82:	e7b2      	b.n	8006bea <_malloc_r+0x22>
 8006c84:	42a3      	cmp	r3, r4
 8006c86:	6862      	ldr	r2, [r4, #4]
 8006c88:	d1de      	bne.n	8006c48 <_malloc_r+0x80>
 8006c8a:	603a      	str	r2, [r7, #0]
 8006c8c:	e7ed      	b.n	8006c6a <_malloc_r+0xa2>
 8006c8e:	4623      	mov	r3, r4
 8006c90:	6864      	ldr	r4, [r4, #4]
 8006c92:	e7b1      	b.n	8006bf8 <_malloc_r+0x30>
 8006c94:	460c      	mov	r4, r1
 8006c96:	6849      	ldr	r1, [r1, #4]
 8006c98:	e7b8      	b.n	8006c0c <_malloc_r+0x44>
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	e7ce      	b.n	8006c3c <_malloc_r+0x74>
 8006c9e:	230c      	movs	r3, #12
 8006ca0:	6033      	str	r3, [r6, #0]
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f000 f80e 	bl	8006cc4 <__malloc_unlock>
 8006ca8:	e79e      	b.n	8006be8 <_malloc_r+0x20>
 8006caa:	6005      	str	r5, [r0, #0]
 8006cac:	e7dd      	b.n	8006c6a <_malloc_r+0xa2>
 8006cae:	605b      	str	r3, [r3, #4]
 8006cb0:	deff      	udf	#255	@ 0xff
 8006cb2:	bf00      	nop
 8006cb4:	200069cc 	.word	0x200069cc

08006cb8 <__malloc_lock>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	@ (8006cc0 <__malloc_lock+0x8>)
 8006cba:	f000 b86b 	b.w	8006d94 <__retarget_lock_acquire_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	20006b0c 	.word	0x20006b0c

08006cc4 <__malloc_unlock>:
 8006cc4:	4801      	ldr	r0, [pc, #4]	@ (8006ccc <__malloc_unlock+0x8>)
 8006cc6:	f000 b866 	b.w	8006d96 <__retarget_lock_release_recursive>
 8006cca:	bf00      	nop
 8006ccc:	20006b0c 	.word	0x20006b0c

08006cd0 <siprintf>:
 8006cd0:	b40e      	push	{r1, r2, r3}
 8006cd2:	b500      	push	{lr}
 8006cd4:	b09c      	sub	sp, #112	@ 0x70
 8006cd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8006cd8:	9002      	str	r0, [sp, #8]
 8006cda:	9006      	str	r0, [sp, #24]
 8006cdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ce0:	4809      	ldr	r0, [pc, #36]	@ (8006d08 <siprintf+0x38>)
 8006ce2:	9107      	str	r1, [sp, #28]
 8006ce4:	9104      	str	r1, [sp, #16]
 8006ce6:	4909      	ldr	r1, [pc, #36]	@ (8006d0c <siprintf+0x3c>)
 8006ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cec:	9105      	str	r1, [sp, #20]
 8006cee:	6800      	ldr	r0, [r0, #0]
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	a902      	add	r1, sp, #8
 8006cf4:	f000 f904 	bl	8006f00 <_svfiprintf_r>
 8006cf8:	9b02      	ldr	r3, [sp, #8]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	b01c      	add	sp, #112	@ 0x70
 8006d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d04:	b003      	add	sp, #12
 8006d06:	4770      	bx	lr
 8006d08:	200002e4 	.word	0x200002e4
 8006d0c:	ffff0208 	.word	0xffff0208

08006d10 <memset>:
 8006d10:	4402      	add	r2, r0
 8006d12:	4603      	mov	r3, r0
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d100      	bne.n	8006d1a <memset+0xa>
 8006d18:	4770      	bx	lr
 8006d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d1e:	e7f9      	b.n	8006d14 <memset+0x4>

08006d20 <_sbrk_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4d06      	ldr	r5, [pc, #24]	@ (8006d3c <_sbrk_r+0x1c>)
 8006d24:	2300      	movs	r3, #0
 8006d26:	4604      	mov	r4, r0
 8006d28:	4608      	mov	r0, r1
 8006d2a:	602b      	str	r3, [r5, #0]
 8006d2c:	f7fb fbe4 	bl	80024f8 <_sbrk>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d102      	bne.n	8006d3a <_sbrk_r+0x1a>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	b103      	cbz	r3, 8006d3a <_sbrk_r+0x1a>
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	20006b08 	.word	0x20006b08

08006d40 <__errno>:
 8006d40:	4b01      	ldr	r3, [pc, #4]	@ (8006d48 <__errno+0x8>)
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	200002e4 	.word	0x200002e4

08006d4c <__libc_init_array>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8006d84 <__libc_init_array+0x38>)
 8006d50:	4c0d      	ldr	r4, [pc, #52]	@ (8006d88 <__libc_init_array+0x3c>)
 8006d52:	1b64      	subs	r4, r4, r5
 8006d54:	10a4      	asrs	r4, r4, #2
 8006d56:	2600      	movs	r6, #0
 8006d58:	42a6      	cmp	r6, r4
 8006d5a:	d109      	bne.n	8006d70 <__libc_init_array+0x24>
 8006d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8006d8c <__libc_init_array+0x40>)
 8006d5e:	4c0c      	ldr	r4, [pc, #48]	@ (8006d90 <__libc_init_array+0x44>)
 8006d60:	f000 fd06 	bl	8007770 <_init>
 8006d64:	1b64      	subs	r4, r4, r5
 8006d66:	10a4      	asrs	r4, r4, #2
 8006d68:	2600      	movs	r6, #0
 8006d6a:	42a6      	cmp	r6, r4
 8006d6c:	d105      	bne.n	8006d7a <__libc_init_array+0x2e>
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d74:	4798      	blx	r3
 8006d76:	3601      	adds	r6, #1
 8006d78:	e7ee      	b.n	8006d58 <__libc_init_array+0xc>
 8006d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7e:	4798      	blx	r3
 8006d80:	3601      	adds	r6, #1
 8006d82:	e7f2      	b.n	8006d6a <__libc_init_array+0x1e>
 8006d84:	08007804 	.word	0x08007804
 8006d88:	08007804 	.word	0x08007804
 8006d8c:	08007804 	.word	0x08007804
 8006d90:	08007808 	.word	0x08007808

08006d94 <__retarget_lock_acquire_recursive>:
 8006d94:	4770      	bx	lr

08006d96 <__retarget_lock_release_recursive>:
 8006d96:	4770      	bx	lr

08006d98 <memcpy>:
 8006d98:	440a      	add	r2, r1
 8006d9a:	4291      	cmp	r1, r2
 8006d9c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006da0:	d100      	bne.n	8006da4 <memcpy+0xc>
 8006da2:	4770      	bx	lr
 8006da4:	b510      	push	{r4, lr}
 8006da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dae:	4291      	cmp	r1, r2
 8006db0:	d1f9      	bne.n	8006da6 <memcpy+0xe>
 8006db2:	bd10      	pop	{r4, pc}

08006db4 <_free_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4605      	mov	r5, r0
 8006db8:	2900      	cmp	r1, #0
 8006dba:	d041      	beq.n	8006e40 <_free_r+0x8c>
 8006dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc0:	1f0c      	subs	r4, r1, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bfb8      	it	lt
 8006dc6:	18e4      	addlt	r4, r4, r3
 8006dc8:	f7ff ff76 	bl	8006cb8 <__malloc_lock>
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8006e44 <_free_r+0x90>)
 8006dce:	6813      	ldr	r3, [r2, #0]
 8006dd0:	b933      	cbnz	r3, 8006de0 <_free_r+0x2c>
 8006dd2:	6063      	str	r3, [r4, #4]
 8006dd4:	6014      	str	r4, [r2, #0]
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ddc:	f7ff bf72 	b.w	8006cc4 <__malloc_unlock>
 8006de0:	42a3      	cmp	r3, r4
 8006de2:	d908      	bls.n	8006df6 <_free_r+0x42>
 8006de4:	6820      	ldr	r0, [r4, #0]
 8006de6:	1821      	adds	r1, r4, r0
 8006de8:	428b      	cmp	r3, r1
 8006dea:	bf01      	itttt	eq
 8006dec:	6819      	ldreq	r1, [r3, #0]
 8006dee:	685b      	ldreq	r3, [r3, #4]
 8006df0:	1809      	addeq	r1, r1, r0
 8006df2:	6021      	streq	r1, [r4, #0]
 8006df4:	e7ed      	b.n	8006dd2 <_free_r+0x1e>
 8006df6:	461a      	mov	r2, r3
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	b10b      	cbz	r3, 8006e00 <_free_r+0x4c>
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	d9fa      	bls.n	8006df6 <_free_r+0x42>
 8006e00:	6811      	ldr	r1, [r2, #0]
 8006e02:	1850      	adds	r0, r2, r1
 8006e04:	42a0      	cmp	r0, r4
 8006e06:	d10b      	bne.n	8006e20 <_free_r+0x6c>
 8006e08:	6820      	ldr	r0, [r4, #0]
 8006e0a:	4401      	add	r1, r0
 8006e0c:	1850      	adds	r0, r2, r1
 8006e0e:	4283      	cmp	r3, r0
 8006e10:	6011      	str	r1, [r2, #0]
 8006e12:	d1e0      	bne.n	8006dd6 <_free_r+0x22>
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	6053      	str	r3, [r2, #4]
 8006e1a:	4408      	add	r0, r1
 8006e1c:	6010      	str	r0, [r2, #0]
 8006e1e:	e7da      	b.n	8006dd6 <_free_r+0x22>
 8006e20:	d902      	bls.n	8006e28 <_free_r+0x74>
 8006e22:	230c      	movs	r3, #12
 8006e24:	602b      	str	r3, [r5, #0]
 8006e26:	e7d6      	b.n	8006dd6 <_free_r+0x22>
 8006e28:	6820      	ldr	r0, [r4, #0]
 8006e2a:	1821      	adds	r1, r4, r0
 8006e2c:	428b      	cmp	r3, r1
 8006e2e:	bf04      	itt	eq
 8006e30:	6819      	ldreq	r1, [r3, #0]
 8006e32:	685b      	ldreq	r3, [r3, #4]
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	bf04      	itt	eq
 8006e38:	1809      	addeq	r1, r1, r0
 8006e3a:	6021      	streq	r1, [r4, #0]
 8006e3c:	6054      	str	r4, [r2, #4]
 8006e3e:	e7ca      	b.n	8006dd6 <_free_r+0x22>
 8006e40:	bd38      	pop	{r3, r4, r5, pc}
 8006e42:	bf00      	nop
 8006e44:	200069cc 	.word	0x200069cc

08006e48 <__ssputs_r>:
 8006e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e4c:	688e      	ldr	r6, [r1, #8]
 8006e4e:	461f      	mov	r7, r3
 8006e50:	42be      	cmp	r6, r7
 8006e52:	680b      	ldr	r3, [r1, #0]
 8006e54:	4682      	mov	sl, r0
 8006e56:	460c      	mov	r4, r1
 8006e58:	4690      	mov	r8, r2
 8006e5a:	d82d      	bhi.n	8006eb8 <__ssputs_r+0x70>
 8006e5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e64:	d026      	beq.n	8006eb4 <__ssputs_r+0x6c>
 8006e66:	6965      	ldr	r5, [r4, #20]
 8006e68:	6909      	ldr	r1, [r1, #16]
 8006e6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e6e:	eba3 0901 	sub.w	r9, r3, r1
 8006e72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e76:	1c7b      	adds	r3, r7, #1
 8006e78:	444b      	add	r3, r9
 8006e7a:	106d      	asrs	r5, r5, #1
 8006e7c:	429d      	cmp	r5, r3
 8006e7e:	bf38      	it	cc
 8006e80:	461d      	movcc	r5, r3
 8006e82:	0553      	lsls	r3, r2, #21
 8006e84:	d527      	bpl.n	8006ed6 <__ssputs_r+0x8e>
 8006e86:	4629      	mov	r1, r5
 8006e88:	f7ff fe9e 	bl	8006bc8 <_malloc_r>
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	b360      	cbz	r0, 8006eea <__ssputs_r+0xa2>
 8006e90:	6921      	ldr	r1, [r4, #16]
 8006e92:	464a      	mov	r2, r9
 8006e94:	f7ff ff80 	bl	8006d98 <memcpy>
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ea2:	81a3      	strh	r3, [r4, #12]
 8006ea4:	6126      	str	r6, [r4, #16]
 8006ea6:	6165      	str	r5, [r4, #20]
 8006ea8:	444e      	add	r6, r9
 8006eaa:	eba5 0509 	sub.w	r5, r5, r9
 8006eae:	6026      	str	r6, [r4, #0]
 8006eb0:	60a5      	str	r5, [r4, #8]
 8006eb2:	463e      	mov	r6, r7
 8006eb4:	42be      	cmp	r6, r7
 8006eb6:	d900      	bls.n	8006eba <__ssputs_r+0x72>
 8006eb8:	463e      	mov	r6, r7
 8006eba:	6820      	ldr	r0, [r4, #0]
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	4641      	mov	r1, r8
 8006ec0:	f000 fab6 	bl	8007430 <memmove>
 8006ec4:	68a3      	ldr	r3, [r4, #8]
 8006ec6:	1b9b      	subs	r3, r3, r6
 8006ec8:	60a3      	str	r3, [r4, #8]
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	4433      	add	r3, r6
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed6:	462a      	mov	r2, r5
 8006ed8:	f000 fac4 	bl	8007464 <_realloc_r>
 8006edc:	4606      	mov	r6, r0
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d1e0      	bne.n	8006ea4 <__ssputs_r+0x5c>
 8006ee2:	6921      	ldr	r1, [r4, #16]
 8006ee4:	4650      	mov	r0, sl
 8006ee6:	f7ff ff65 	bl	8006db4 <_free_r>
 8006eea:	230c      	movs	r3, #12
 8006eec:	f8ca 3000 	str.w	r3, [sl]
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006efc:	e7e9      	b.n	8006ed2 <__ssputs_r+0x8a>
	...

08006f00 <_svfiprintf_r>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	4698      	mov	r8, r3
 8006f06:	898b      	ldrh	r3, [r1, #12]
 8006f08:	061b      	lsls	r3, r3, #24
 8006f0a:	b09d      	sub	sp, #116	@ 0x74
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	460d      	mov	r5, r1
 8006f10:	4614      	mov	r4, r2
 8006f12:	d510      	bpl.n	8006f36 <_svfiprintf_r+0x36>
 8006f14:	690b      	ldr	r3, [r1, #16]
 8006f16:	b973      	cbnz	r3, 8006f36 <_svfiprintf_r+0x36>
 8006f18:	2140      	movs	r1, #64	@ 0x40
 8006f1a:	f7ff fe55 	bl	8006bc8 <_malloc_r>
 8006f1e:	6028      	str	r0, [r5, #0]
 8006f20:	6128      	str	r0, [r5, #16]
 8006f22:	b930      	cbnz	r0, 8006f32 <_svfiprintf_r+0x32>
 8006f24:	230c      	movs	r3, #12
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f2c:	b01d      	add	sp, #116	@ 0x74
 8006f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f32:	2340      	movs	r3, #64	@ 0x40
 8006f34:	616b      	str	r3, [r5, #20]
 8006f36:	2300      	movs	r3, #0
 8006f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f3a:	2320      	movs	r3, #32
 8006f3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f44:	2330      	movs	r3, #48	@ 0x30
 8006f46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80070e4 <_svfiprintf_r+0x1e4>
 8006f4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f4e:	f04f 0901 	mov.w	r9, #1
 8006f52:	4623      	mov	r3, r4
 8006f54:	469a      	mov	sl, r3
 8006f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f5a:	b10a      	cbz	r2, 8006f60 <_svfiprintf_r+0x60>
 8006f5c:	2a25      	cmp	r2, #37	@ 0x25
 8006f5e:	d1f9      	bne.n	8006f54 <_svfiprintf_r+0x54>
 8006f60:	ebba 0b04 	subs.w	fp, sl, r4
 8006f64:	d00b      	beq.n	8006f7e <_svfiprintf_r+0x7e>
 8006f66:	465b      	mov	r3, fp
 8006f68:	4622      	mov	r2, r4
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	4638      	mov	r0, r7
 8006f6e:	f7ff ff6b 	bl	8006e48 <__ssputs_r>
 8006f72:	3001      	adds	r0, #1
 8006f74:	f000 80a7 	beq.w	80070c6 <_svfiprintf_r+0x1c6>
 8006f78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f7a:	445a      	add	r2, fp
 8006f7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 809f 	beq.w	80070c6 <_svfiprintf_r+0x1c6>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f92:	f10a 0a01 	add.w	sl, sl, #1
 8006f96:	9304      	str	r3, [sp, #16]
 8006f98:	9307      	str	r3, [sp, #28]
 8006f9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fa0:	4654      	mov	r4, sl
 8006fa2:	2205      	movs	r2, #5
 8006fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa8:	484e      	ldr	r0, [pc, #312]	@ (80070e4 <_svfiprintf_r+0x1e4>)
 8006faa:	f7f9 f919 	bl	80001e0 <memchr>
 8006fae:	9a04      	ldr	r2, [sp, #16]
 8006fb0:	b9d8      	cbnz	r0, 8006fea <_svfiprintf_r+0xea>
 8006fb2:	06d0      	lsls	r0, r2, #27
 8006fb4:	bf44      	itt	mi
 8006fb6:	2320      	movmi	r3, #32
 8006fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fbc:	0711      	lsls	r1, r2, #28
 8006fbe:	bf44      	itt	mi
 8006fc0:	232b      	movmi	r3, #43	@ 0x2b
 8006fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8006fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fcc:	d015      	beq.n	8006ffa <_svfiprintf_r+0xfa>
 8006fce:	9a07      	ldr	r2, [sp, #28]
 8006fd0:	4654      	mov	r4, sl
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	f04f 0c0a 	mov.w	ip, #10
 8006fd8:	4621      	mov	r1, r4
 8006fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fde:	3b30      	subs	r3, #48	@ 0x30
 8006fe0:	2b09      	cmp	r3, #9
 8006fe2:	d94b      	bls.n	800707c <_svfiprintf_r+0x17c>
 8006fe4:	b1b0      	cbz	r0, 8007014 <_svfiprintf_r+0x114>
 8006fe6:	9207      	str	r2, [sp, #28]
 8006fe8:	e014      	b.n	8007014 <_svfiprintf_r+0x114>
 8006fea:	eba0 0308 	sub.w	r3, r0, r8
 8006fee:	fa09 f303 	lsl.w	r3, r9, r3
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	46a2      	mov	sl, r4
 8006ff8:	e7d2      	b.n	8006fa0 <_svfiprintf_r+0xa0>
 8006ffa:	9b03      	ldr	r3, [sp, #12]
 8006ffc:	1d19      	adds	r1, r3, #4
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	9103      	str	r1, [sp, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	bfbb      	ittet	lt
 8007006:	425b      	neglt	r3, r3
 8007008:	f042 0202 	orrlt.w	r2, r2, #2
 800700c:	9307      	strge	r3, [sp, #28]
 800700e:	9307      	strlt	r3, [sp, #28]
 8007010:	bfb8      	it	lt
 8007012:	9204      	strlt	r2, [sp, #16]
 8007014:	7823      	ldrb	r3, [r4, #0]
 8007016:	2b2e      	cmp	r3, #46	@ 0x2e
 8007018:	d10a      	bne.n	8007030 <_svfiprintf_r+0x130>
 800701a:	7863      	ldrb	r3, [r4, #1]
 800701c:	2b2a      	cmp	r3, #42	@ 0x2a
 800701e:	d132      	bne.n	8007086 <_svfiprintf_r+0x186>
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	1d1a      	adds	r2, r3, #4
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	9203      	str	r2, [sp, #12]
 8007028:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800702c:	3402      	adds	r4, #2
 800702e:	9305      	str	r3, [sp, #20]
 8007030:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80070f4 <_svfiprintf_r+0x1f4>
 8007034:	7821      	ldrb	r1, [r4, #0]
 8007036:	2203      	movs	r2, #3
 8007038:	4650      	mov	r0, sl
 800703a:	f7f9 f8d1 	bl	80001e0 <memchr>
 800703e:	b138      	cbz	r0, 8007050 <_svfiprintf_r+0x150>
 8007040:	9b04      	ldr	r3, [sp, #16]
 8007042:	eba0 000a 	sub.w	r0, r0, sl
 8007046:	2240      	movs	r2, #64	@ 0x40
 8007048:	4082      	lsls	r2, r0
 800704a:	4313      	orrs	r3, r2
 800704c:	3401      	adds	r4, #1
 800704e:	9304      	str	r3, [sp, #16]
 8007050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007054:	4824      	ldr	r0, [pc, #144]	@ (80070e8 <_svfiprintf_r+0x1e8>)
 8007056:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800705a:	2206      	movs	r2, #6
 800705c:	f7f9 f8c0 	bl	80001e0 <memchr>
 8007060:	2800      	cmp	r0, #0
 8007062:	d036      	beq.n	80070d2 <_svfiprintf_r+0x1d2>
 8007064:	4b21      	ldr	r3, [pc, #132]	@ (80070ec <_svfiprintf_r+0x1ec>)
 8007066:	bb1b      	cbnz	r3, 80070b0 <_svfiprintf_r+0x1b0>
 8007068:	9b03      	ldr	r3, [sp, #12]
 800706a:	3307      	adds	r3, #7
 800706c:	f023 0307 	bic.w	r3, r3, #7
 8007070:	3308      	adds	r3, #8
 8007072:	9303      	str	r3, [sp, #12]
 8007074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007076:	4433      	add	r3, r6
 8007078:	9309      	str	r3, [sp, #36]	@ 0x24
 800707a:	e76a      	b.n	8006f52 <_svfiprintf_r+0x52>
 800707c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007080:	460c      	mov	r4, r1
 8007082:	2001      	movs	r0, #1
 8007084:	e7a8      	b.n	8006fd8 <_svfiprintf_r+0xd8>
 8007086:	2300      	movs	r3, #0
 8007088:	3401      	adds	r4, #1
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	4619      	mov	r1, r3
 800708e:	f04f 0c0a 	mov.w	ip, #10
 8007092:	4620      	mov	r0, r4
 8007094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007098:	3a30      	subs	r2, #48	@ 0x30
 800709a:	2a09      	cmp	r2, #9
 800709c:	d903      	bls.n	80070a6 <_svfiprintf_r+0x1a6>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0c6      	beq.n	8007030 <_svfiprintf_r+0x130>
 80070a2:	9105      	str	r1, [sp, #20]
 80070a4:	e7c4      	b.n	8007030 <_svfiprintf_r+0x130>
 80070a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80070aa:	4604      	mov	r4, r0
 80070ac:	2301      	movs	r3, #1
 80070ae:	e7f0      	b.n	8007092 <_svfiprintf_r+0x192>
 80070b0:	ab03      	add	r3, sp, #12
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	462a      	mov	r2, r5
 80070b6:	4b0e      	ldr	r3, [pc, #56]	@ (80070f0 <_svfiprintf_r+0x1f0>)
 80070b8:	a904      	add	r1, sp, #16
 80070ba:	4638      	mov	r0, r7
 80070bc:	f3af 8000 	nop.w
 80070c0:	1c42      	adds	r2, r0, #1
 80070c2:	4606      	mov	r6, r0
 80070c4:	d1d6      	bne.n	8007074 <_svfiprintf_r+0x174>
 80070c6:	89ab      	ldrh	r3, [r5, #12]
 80070c8:	065b      	lsls	r3, r3, #25
 80070ca:	f53f af2d 	bmi.w	8006f28 <_svfiprintf_r+0x28>
 80070ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070d0:	e72c      	b.n	8006f2c <_svfiprintf_r+0x2c>
 80070d2:	ab03      	add	r3, sp, #12
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	462a      	mov	r2, r5
 80070d8:	4b05      	ldr	r3, [pc, #20]	@ (80070f0 <_svfiprintf_r+0x1f0>)
 80070da:	a904      	add	r1, sp, #16
 80070dc:	4638      	mov	r0, r7
 80070de:	f000 f879 	bl	80071d4 <_printf_i>
 80070e2:	e7ed      	b.n	80070c0 <_svfiprintf_r+0x1c0>
 80070e4:	080077c8 	.word	0x080077c8
 80070e8:	080077d2 	.word	0x080077d2
 80070ec:	00000000 	.word	0x00000000
 80070f0:	08006e49 	.word	0x08006e49
 80070f4:	080077ce 	.word	0x080077ce

080070f8 <_printf_common>:
 80070f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070fc:	4616      	mov	r6, r2
 80070fe:	4698      	mov	r8, r3
 8007100:	688a      	ldr	r2, [r1, #8]
 8007102:	690b      	ldr	r3, [r1, #16]
 8007104:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007108:	4293      	cmp	r3, r2
 800710a:	bfb8      	it	lt
 800710c:	4613      	movlt	r3, r2
 800710e:	6033      	str	r3, [r6, #0]
 8007110:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007114:	4607      	mov	r7, r0
 8007116:	460c      	mov	r4, r1
 8007118:	b10a      	cbz	r2, 800711e <_printf_common+0x26>
 800711a:	3301      	adds	r3, #1
 800711c:	6033      	str	r3, [r6, #0]
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	0699      	lsls	r1, r3, #26
 8007122:	bf42      	ittt	mi
 8007124:	6833      	ldrmi	r3, [r6, #0]
 8007126:	3302      	addmi	r3, #2
 8007128:	6033      	strmi	r3, [r6, #0]
 800712a:	6825      	ldr	r5, [r4, #0]
 800712c:	f015 0506 	ands.w	r5, r5, #6
 8007130:	d106      	bne.n	8007140 <_printf_common+0x48>
 8007132:	f104 0a19 	add.w	sl, r4, #25
 8007136:	68e3      	ldr	r3, [r4, #12]
 8007138:	6832      	ldr	r2, [r6, #0]
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	42ab      	cmp	r3, r5
 800713e:	dc26      	bgt.n	800718e <_printf_common+0x96>
 8007140:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007144:	6822      	ldr	r2, [r4, #0]
 8007146:	3b00      	subs	r3, #0
 8007148:	bf18      	it	ne
 800714a:	2301      	movne	r3, #1
 800714c:	0692      	lsls	r2, r2, #26
 800714e:	d42b      	bmi.n	80071a8 <_printf_common+0xb0>
 8007150:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007154:	4641      	mov	r1, r8
 8007156:	4638      	mov	r0, r7
 8007158:	47c8      	blx	r9
 800715a:	3001      	adds	r0, #1
 800715c:	d01e      	beq.n	800719c <_printf_common+0xa4>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	6922      	ldr	r2, [r4, #16]
 8007162:	f003 0306 	and.w	r3, r3, #6
 8007166:	2b04      	cmp	r3, #4
 8007168:	bf02      	ittt	eq
 800716a:	68e5      	ldreq	r5, [r4, #12]
 800716c:	6833      	ldreq	r3, [r6, #0]
 800716e:	1aed      	subeq	r5, r5, r3
 8007170:	68a3      	ldr	r3, [r4, #8]
 8007172:	bf0c      	ite	eq
 8007174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007178:	2500      	movne	r5, #0
 800717a:	4293      	cmp	r3, r2
 800717c:	bfc4      	itt	gt
 800717e:	1a9b      	subgt	r3, r3, r2
 8007180:	18ed      	addgt	r5, r5, r3
 8007182:	2600      	movs	r6, #0
 8007184:	341a      	adds	r4, #26
 8007186:	42b5      	cmp	r5, r6
 8007188:	d11a      	bne.n	80071c0 <_printf_common+0xc8>
 800718a:	2000      	movs	r0, #0
 800718c:	e008      	b.n	80071a0 <_printf_common+0xa8>
 800718e:	2301      	movs	r3, #1
 8007190:	4652      	mov	r2, sl
 8007192:	4641      	mov	r1, r8
 8007194:	4638      	mov	r0, r7
 8007196:	47c8      	blx	r9
 8007198:	3001      	adds	r0, #1
 800719a:	d103      	bne.n	80071a4 <_printf_common+0xac>
 800719c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a4:	3501      	adds	r5, #1
 80071a6:	e7c6      	b.n	8007136 <_printf_common+0x3e>
 80071a8:	18e1      	adds	r1, r4, r3
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	2030      	movs	r0, #48	@ 0x30
 80071ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071b2:	4422      	add	r2, r4
 80071b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071bc:	3302      	adds	r3, #2
 80071be:	e7c7      	b.n	8007150 <_printf_common+0x58>
 80071c0:	2301      	movs	r3, #1
 80071c2:	4622      	mov	r2, r4
 80071c4:	4641      	mov	r1, r8
 80071c6:	4638      	mov	r0, r7
 80071c8:	47c8      	blx	r9
 80071ca:	3001      	adds	r0, #1
 80071cc:	d0e6      	beq.n	800719c <_printf_common+0xa4>
 80071ce:	3601      	adds	r6, #1
 80071d0:	e7d9      	b.n	8007186 <_printf_common+0x8e>
	...

080071d4 <_printf_i>:
 80071d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d8:	7e0f      	ldrb	r7, [r1, #24]
 80071da:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80071dc:	2f78      	cmp	r7, #120	@ 0x78
 80071de:	4691      	mov	r9, r2
 80071e0:	4680      	mov	r8, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	469a      	mov	sl, r3
 80071e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071ea:	d807      	bhi.n	80071fc <_printf_i+0x28>
 80071ec:	2f62      	cmp	r7, #98	@ 0x62
 80071ee:	d80a      	bhi.n	8007206 <_printf_i+0x32>
 80071f0:	2f00      	cmp	r7, #0
 80071f2:	f000 80e0 	beq.w	80073b6 <_printf_i+0x1e2>
 80071f6:	2f58      	cmp	r7, #88	@ 0x58
 80071f8:	f000 80bb 	beq.w	8007372 <_printf_i+0x19e>
 80071fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007200:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007204:	e03a      	b.n	800727c <_printf_i+0xa8>
 8007206:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800720a:	2b15      	cmp	r3, #21
 800720c:	d8f6      	bhi.n	80071fc <_printf_i+0x28>
 800720e:	a101      	add	r1, pc, #4	@ (adr r1, 8007214 <_printf_i+0x40>)
 8007210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007214:	0800726d 	.word	0x0800726d
 8007218:	08007281 	.word	0x08007281
 800721c:	080071fd 	.word	0x080071fd
 8007220:	080071fd 	.word	0x080071fd
 8007224:	080071fd 	.word	0x080071fd
 8007228:	080071fd 	.word	0x080071fd
 800722c:	08007281 	.word	0x08007281
 8007230:	080071fd 	.word	0x080071fd
 8007234:	080071fd 	.word	0x080071fd
 8007238:	080071fd 	.word	0x080071fd
 800723c:	080071fd 	.word	0x080071fd
 8007240:	0800739d 	.word	0x0800739d
 8007244:	08007311 	.word	0x08007311
 8007248:	08007353 	.word	0x08007353
 800724c:	080071fd 	.word	0x080071fd
 8007250:	080071fd 	.word	0x080071fd
 8007254:	080073bf 	.word	0x080073bf
 8007258:	080071fd 	.word	0x080071fd
 800725c:	08007311 	.word	0x08007311
 8007260:	080071fd 	.word	0x080071fd
 8007264:	080071fd 	.word	0x080071fd
 8007268:	0800735b 	.word	0x0800735b
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	1d1a      	adds	r2, r3, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	602a      	str	r2, [r5, #0]
 8007274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007278:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800727c:	2301      	movs	r3, #1
 800727e:	e0ab      	b.n	80073d8 <_printf_i+0x204>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	6829      	ldr	r1, [r5, #0]
 8007284:	061f      	lsls	r7, r3, #24
 8007286:	f101 0004 	add.w	r0, r1, #4
 800728a:	6028      	str	r0, [r5, #0]
 800728c:	d501      	bpl.n	8007292 <_printf_i+0xbe>
 800728e:	680d      	ldr	r5, [r1, #0]
 8007290:	e003      	b.n	800729a <_printf_i+0xc6>
 8007292:	065e      	lsls	r6, r3, #25
 8007294:	d5fb      	bpl.n	800728e <_printf_i+0xba>
 8007296:	f9b1 5000 	ldrsh.w	r5, [r1]
 800729a:	6861      	ldr	r1, [r4, #4]
 800729c:	2d00      	cmp	r5, #0
 800729e:	da7a      	bge.n	8007396 <_printf_i+0x1c2>
 80072a0:	202d      	movs	r0, #45	@ 0x2d
 80072a2:	2900      	cmp	r1, #0
 80072a4:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 80072a8:	60a1      	str	r1, [r4, #8]
 80072aa:	da2d      	bge.n	8007308 <_printf_i+0x134>
 80072ac:	485e      	ldr	r0, [pc, #376]	@ (8007428 <_printf_i+0x254>)
 80072ae:	426d      	negs	r5, r5
 80072b0:	230a      	movs	r3, #10
 80072b2:	4616      	mov	r6, r2
 80072b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80072b8:	fb03 5711 	mls	r7, r3, r1, r5
 80072bc:	5dc7      	ldrb	r7, [r0, r7]
 80072be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072c2:	462f      	mov	r7, r5
 80072c4:	42bb      	cmp	r3, r7
 80072c6:	460d      	mov	r5, r1
 80072c8:	d9f4      	bls.n	80072b4 <_printf_i+0xe0>
 80072ca:	2b08      	cmp	r3, #8
 80072cc:	d10b      	bne.n	80072e6 <_printf_i+0x112>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	07df      	lsls	r7, r3, #31
 80072d2:	d508      	bpl.n	80072e6 <_printf_i+0x112>
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	6861      	ldr	r1, [r4, #4]
 80072d8:	4299      	cmp	r1, r3
 80072da:	bfde      	ittt	le
 80072dc:	2330      	movle	r3, #48	@ 0x30
 80072de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072e2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80072e6:	1b92      	subs	r2, r2, r6
 80072e8:	6122      	str	r2, [r4, #16]
 80072ea:	f8cd a000 	str.w	sl, [sp]
 80072ee:	464b      	mov	r3, r9
 80072f0:	aa03      	add	r2, sp, #12
 80072f2:	4621      	mov	r1, r4
 80072f4:	4640      	mov	r0, r8
 80072f6:	f7ff feff 	bl	80070f8 <_printf_common>
 80072fa:	3001      	adds	r0, #1
 80072fc:	d171      	bne.n	80073e2 <_printf_i+0x20e>
 80072fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007302:	b004      	add	sp, #16
 8007304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007308:	f023 0304 	bic.w	r3, r3, #4
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	e7cd      	b.n	80072ac <_printf_i+0xd8>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	6820      	ldr	r0, [r4, #0]
 8007314:	1d19      	adds	r1, r3, #4
 8007316:	6029      	str	r1, [r5, #0]
 8007318:	0605      	lsls	r5, r0, #24
 800731a:	d501      	bpl.n	8007320 <_printf_i+0x14c>
 800731c:	681d      	ldr	r5, [r3, #0]
 800731e:	e002      	b.n	8007326 <_printf_i+0x152>
 8007320:	0641      	lsls	r1, r0, #25
 8007322:	d5fb      	bpl.n	800731c <_printf_i+0x148>
 8007324:	881d      	ldrh	r5, [r3, #0]
 8007326:	4840      	ldr	r0, [pc, #256]	@ (8007428 <_printf_i+0x254>)
 8007328:	2f6f      	cmp	r7, #111	@ 0x6f
 800732a:	bf14      	ite	ne
 800732c:	230a      	movne	r3, #10
 800732e:	2308      	moveq	r3, #8
 8007330:	2100      	movs	r1, #0
 8007332:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007336:	6866      	ldr	r6, [r4, #4]
 8007338:	60a6      	str	r6, [r4, #8]
 800733a:	2e00      	cmp	r6, #0
 800733c:	dbb9      	blt.n	80072b2 <_printf_i+0xde>
 800733e:	6821      	ldr	r1, [r4, #0]
 8007340:	f021 0104 	bic.w	r1, r1, #4
 8007344:	6021      	str	r1, [r4, #0]
 8007346:	2d00      	cmp	r5, #0
 8007348:	d1b3      	bne.n	80072b2 <_printf_i+0xde>
 800734a:	2e00      	cmp	r6, #0
 800734c:	d1b1      	bne.n	80072b2 <_printf_i+0xde>
 800734e:	4616      	mov	r6, r2
 8007350:	e7bb      	b.n	80072ca <_printf_i+0xf6>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	f043 0320 	orr.w	r3, r3, #32
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	4834      	ldr	r0, [pc, #208]	@ (800742c <_printf_i+0x258>)
 800735c:	2778      	movs	r7, #120	@ 0x78
 800735e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007362:	6829      	ldr	r1, [r5, #0]
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	1d0e      	adds	r6, r1, #4
 8007368:	602e      	str	r6, [r5, #0]
 800736a:	061e      	lsls	r6, r3, #24
 800736c:	d503      	bpl.n	8007376 <_printf_i+0x1a2>
 800736e:	680d      	ldr	r5, [r1, #0]
 8007370:	e004      	b.n	800737c <_printf_i+0x1a8>
 8007372:	482d      	ldr	r0, [pc, #180]	@ (8007428 <_printf_i+0x254>)
 8007374:	e7f3      	b.n	800735e <_printf_i+0x18a>
 8007376:	065d      	lsls	r5, r3, #25
 8007378:	d5f9      	bpl.n	800736e <_printf_i+0x19a>
 800737a:	880d      	ldrh	r5, [r1, #0]
 800737c:	07d9      	lsls	r1, r3, #31
 800737e:	bf44      	itt	mi
 8007380:	f043 0320 	orrmi.w	r3, r3, #32
 8007384:	6023      	strmi	r3, [r4, #0]
 8007386:	b10d      	cbz	r5, 800738c <_printf_i+0x1b8>
 8007388:	2310      	movs	r3, #16
 800738a:	e7d1      	b.n	8007330 <_printf_i+0x15c>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	f023 0320 	bic.w	r3, r3, #32
 8007392:	6023      	str	r3, [r4, #0]
 8007394:	e7f8      	b.n	8007388 <_printf_i+0x1b4>
 8007396:	4824      	ldr	r0, [pc, #144]	@ (8007428 <_printf_i+0x254>)
 8007398:	230a      	movs	r3, #10
 800739a:	e7cc      	b.n	8007336 <_printf_i+0x162>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	6826      	ldr	r6, [r4, #0]
 80073a0:	6961      	ldr	r1, [r4, #20]
 80073a2:	1d18      	adds	r0, r3, #4
 80073a4:	6028      	str	r0, [r5, #0]
 80073a6:	0635      	lsls	r5, r6, #24
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	d501      	bpl.n	80073b0 <_printf_i+0x1dc>
 80073ac:	6019      	str	r1, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <_printf_i+0x1e2>
 80073b0:	0670      	lsls	r0, r6, #25
 80073b2:	d5fb      	bpl.n	80073ac <_printf_i+0x1d8>
 80073b4:	8019      	strh	r1, [r3, #0]
 80073b6:	2300      	movs	r3, #0
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	4616      	mov	r6, r2
 80073bc:	e795      	b.n	80072ea <_printf_i+0x116>
 80073be:	682b      	ldr	r3, [r5, #0]
 80073c0:	1d1a      	adds	r2, r3, #4
 80073c2:	602a      	str	r2, [r5, #0]
 80073c4:	681e      	ldr	r6, [r3, #0]
 80073c6:	6862      	ldr	r2, [r4, #4]
 80073c8:	2100      	movs	r1, #0
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7f8 ff08 	bl	80001e0 <memchr>
 80073d0:	b108      	cbz	r0, 80073d6 <_printf_i+0x202>
 80073d2:	1b80      	subs	r0, r0, r6
 80073d4:	6060      	str	r0, [r4, #4]
 80073d6:	6863      	ldr	r3, [r4, #4]
 80073d8:	6123      	str	r3, [r4, #16]
 80073da:	2300      	movs	r3, #0
 80073dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073e0:	e783      	b.n	80072ea <_printf_i+0x116>
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	4632      	mov	r2, r6
 80073e6:	4649      	mov	r1, r9
 80073e8:	4640      	mov	r0, r8
 80073ea:	47d0      	blx	sl
 80073ec:	3001      	adds	r0, #1
 80073ee:	d086      	beq.n	80072fe <_printf_i+0x12a>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	079b      	lsls	r3, r3, #30
 80073f4:	d414      	bmi.n	8007420 <_printf_i+0x24c>
 80073f6:	68e0      	ldr	r0, [r4, #12]
 80073f8:	9b03      	ldr	r3, [sp, #12]
 80073fa:	4298      	cmp	r0, r3
 80073fc:	bfb8      	it	lt
 80073fe:	4618      	movlt	r0, r3
 8007400:	e77f      	b.n	8007302 <_printf_i+0x12e>
 8007402:	2301      	movs	r3, #1
 8007404:	4632      	mov	r2, r6
 8007406:	4649      	mov	r1, r9
 8007408:	4640      	mov	r0, r8
 800740a:	47d0      	blx	sl
 800740c:	3001      	adds	r0, #1
 800740e:	f43f af76 	beq.w	80072fe <_printf_i+0x12a>
 8007412:	3501      	adds	r5, #1
 8007414:	68e3      	ldr	r3, [r4, #12]
 8007416:	9903      	ldr	r1, [sp, #12]
 8007418:	1a5b      	subs	r3, r3, r1
 800741a:	42ab      	cmp	r3, r5
 800741c:	dcf1      	bgt.n	8007402 <_printf_i+0x22e>
 800741e:	e7ea      	b.n	80073f6 <_printf_i+0x222>
 8007420:	2500      	movs	r5, #0
 8007422:	f104 0619 	add.w	r6, r4, #25
 8007426:	e7f5      	b.n	8007414 <_printf_i+0x240>
 8007428:	080077d9 	.word	0x080077d9
 800742c:	080077ea 	.word	0x080077ea

08007430 <memmove>:
 8007430:	4288      	cmp	r0, r1
 8007432:	b510      	push	{r4, lr}
 8007434:	eb01 0402 	add.w	r4, r1, r2
 8007438:	d902      	bls.n	8007440 <memmove+0x10>
 800743a:	4284      	cmp	r4, r0
 800743c:	4623      	mov	r3, r4
 800743e:	d807      	bhi.n	8007450 <memmove+0x20>
 8007440:	1e43      	subs	r3, r0, #1
 8007442:	42a1      	cmp	r1, r4
 8007444:	d008      	beq.n	8007458 <memmove+0x28>
 8007446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800744a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800744e:	e7f8      	b.n	8007442 <memmove+0x12>
 8007450:	4402      	add	r2, r0
 8007452:	4601      	mov	r1, r0
 8007454:	428a      	cmp	r2, r1
 8007456:	d100      	bne.n	800745a <memmove+0x2a>
 8007458:	bd10      	pop	{r4, pc}
 800745a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800745e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007462:	e7f7      	b.n	8007454 <memmove+0x24>

08007464 <_realloc_r>:
 8007464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007468:	4680      	mov	r8, r0
 800746a:	4615      	mov	r5, r2
 800746c:	460c      	mov	r4, r1
 800746e:	b921      	cbnz	r1, 800747a <_realloc_r+0x16>
 8007470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007474:	4611      	mov	r1, r2
 8007476:	f7ff bba7 	b.w	8006bc8 <_malloc_r>
 800747a:	b92a      	cbnz	r2, 8007488 <_realloc_r+0x24>
 800747c:	f7ff fc9a 	bl	8006db4 <_free_r>
 8007480:	2400      	movs	r4, #0
 8007482:	4620      	mov	r0, r4
 8007484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007488:	f000 f81a 	bl	80074c0 <_malloc_usable_size_r>
 800748c:	4285      	cmp	r5, r0
 800748e:	4606      	mov	r6, r0
 8007490:	d802      	bhi.n	8007498 <_realloc_r+0x34>
 8007492:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007496:	d8f4      	bhi.n	8007482 <_realloc_r+0x1e>
 8007498:	4629      	mov	r1, r5
 800749a:	4640      	mov	r0, r8
 800749c:	f7ff fb94 	bl	8006bc8 <_malloc_r>
 80074a0:	4607      	mov	r7, r0
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d0ec      	beq.n	8007480 <_realloc_r+0x1c>
 80074a6:	42b5      	cmp	r5, r6
 80074a8:	462a      	mov	r2, r5
 80074aa:	4621      	mov	r1, r4
 80074ac:	bf28      	it	cs
 80074ae:	4632      	movcs	r2, r6
 80074b0:	f7ff fc72 	bl	8006d98 <memcpy>
 80074b4:	4621      	mov	r1, r4
 80074b6:	4640      	mov	r0, r8
 80074b8:	f7ff fc7c 	bl	8006db4 <_free_r>
 80074bc:	463c      	mov	r4, r7
 80074be:	e7e0      	b.n	8007482 <_realloc_r+0x1e>

080074c0 <_malloc_usable_size_r>:
 80074c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c4:	1f18      	subs	r0, r3, #4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	bfbc      	itt	lt
 80074ca:	580b      	ldrlt	r3, [r1, r0]
 80074cc:	18c0      	addlt	r0, r0, r3
 80074ce:	4770      	bx	lr

080074d0 <__udivmoddi4>:
 80074d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d4:	4686      	mov	lr, r0
 80074d6:	468c      	mov	ip, r1
 80074d8:	4608      	mov	r0, r1
 80074da:	9e08      	ldr	r6, [sp, #32]
 80074dc:	4615      	mov	r5, r2
 80074de:	4674      	mov	r4, lr
 80074e0:	4619      	mov	r1, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f040 80c2 	bne.w	800766c <__udivmoddi4+0x19c>
 80074e8:	4285      	cmp	r5, r0
 80074ea:	fab2 f282 	clz	r2, r2
 80074ee:	d945      	bls.n	800757c <__udivmoddi4+0xac>
 80074f0:	b14a      	cbz	r2, 8007506 <__udivmoddi4+0x36>
 80074f2:	f1c2 0320 	rsb	r3, r2, #32
 80074f6:	fa00 fc02 	lsl.w	ip, r0, r2
 80074fa:	fa2e f303 	lsr.w	r3, lr, r3
 80074fe:	4095      	lsls	r5, r2
 8007500:	ea43 0c0c 	orr.w	ip, r3, ip
 8007504:	4094      	lsls	r4, r2
 8007506:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800750a:	b2a8      	uxth	r0, r5
 800750c:	fbbc f8fe 	udiv	r8, ip, lr
 8007510:	0c23      	lsrs	r3, r4, #16
 8007512:	fb0e cc18 	mls	ip, lr, r8, ip
 8007516:	fb08 f900 	mul.w	r9, r8, r0
 800751a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800751e:	4599      	cmp	r9, r3
 8007520:	d928      	bls.n	8007574 <__udivmoddi4+0xa4>
 8007522:	18eb      	adds	r3, r5, r3
 8007524:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 8007528:	d204      	bcs.n	8007534 <__udivmoddi4+0x64>
 800752a:	4599      	cmp	r9, r3
 800752c:	d902      	bls.n	8007534 <__udivmoddi4+0x64>
 800752e:	f1a8 0702 	sub.w	r7, r8, #2
 8007532:	442b      	add	r3, r5
 8007534:	eba3 0309 	sub.w	r3, r3, r9
 8007538:	b2a4      	uxth	r4, r4
 800753a:	fbb3 fcfe 	udiv	ip, r3, lr
 800753e:	fb0e 331c 	mls	r3, lr, ip, r3
 8007542:	fb0c f000 	mul.w	r0, ip, r0
 8007546:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800754a:	42a0      	cmp	r0, r4
 800754c:	d914      	bls.n	8007578 <__udivmoddi4+0xa8>
 800754e:	192c      	adds	r4, r5, r4
 8007550:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8007554:	d204      	bcs.n	8007560 <__udivmoddi4+0x90>
 8007556:	42a0      	cmp	r0, r4
 8007558:	d902      	bls.n	8007560 <__udivmoddi4+0x90>
 800755a:	f1ac 0302 	sub.w	r3, ip, #2
 800755e:	442c      	add	r4, r5
 8007560:	1a24      	subs	r4, r4, r0
 8007562:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8007566:	b11e      	cbz	r6, 8007570 <__udivmoddi4+0xa0>
 8007568:	40d4      	lsrs	r4, r2
 800756a:	2300      	movs	r3, #0
 800756c:	6034      	str	r4, [r6, #0]
 800756e:	6073      	str	r3, [r6, #4]
 8007570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007574:	4647      	mov	r7, r8
 8007576:	e7dd      	b.n	8007534 <__udivmoddi4+0x64>
 8007578:	4663      	mov	r3, ip
 800757a:	e7f1      	b.n	8007560 <__udivmoddi4+0x90>
 800757c:	bb92      	cbnz	r2, 80075e4 <__udivmoddi4+0x114>
 800757e:	1b43      	subs	r3, r0, r5
 8007580:	2101      	movs	r1, #1
 8007582:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007586:	b2af      	uxth	r7, r5
 8007588:	fbb3 fcfe 	udiv	ip, r3, lr
 800758c:	0c20      	lsrs	r0, r4, #16
 800758e:	fb0e 331c 	mls	r3, lr, ip, r3
 8007592:	fb0c f807 	mul.w	r8, ip, r7
 8007596:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800759a:	4598      	cmp	r8, r3
 800759c:	d962      	bls.n	8007664 <__udivmoddi4+0x194>
 800759e:	18eb      	adds	r3, r5, r3
 80075a0:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 80075a4:	d204      	bcs.n	80075b0 <__udivmoddi4+0xe0>
 80075a6:	4598      	cmp	r8, r3
 80075a8:	d902      	bls.n	80075b0 <__udivmoddi4+0xe0>
 80075aa:	f1ac 0002 	sub.w	r0, ip, #2
 80075ae:	442b      	add	r3, r5
 80075b0:	eba3 0308 	sub.w	r3, r3, r8
 80075b4:	b2a4      	uxth	r4, r4
 80075b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80075ba:	fb0e 331c 	mls	r3, lr, ip, r3
 80075be:	fb0c f707 	mul.w	r7, ip, r7
 80075c2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80075c6:	42a7      	cmp	r7, r4
 80075c8:	d94e      	bls.n	8007668 <__udivmoddi4+0x198>
 80075ca:	192c      	adds	r4, r5, r4
 80075cc:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 80075d0:	d204      	bcs.n	80075dc <__udivmoddi4+0x10c>
 80075d2:	42a7      	cmp	r7, r4
 80075d4:	d902      	bls.n	80075dc <__udivmoddi4+0x10c>
 80075d6:	f1ac 0302 	sub.w	r3, ip, #2
 80075da:	442c      	add	r4, r5
 80075dc:	1be4      	subs	r4, r4, r7
 80075de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80075e2:	e7c0      	b.n	8007566 <__udivmoddi4+0x96>
 80075e4:	f1c2 0320 	rsb	r3, r2, #32
 80075e8:	fa20 f103 	lsr.w	r1, r0, r3
 80075ec:	4095      	lsls	r5, r2
 80075ee:	4090      	lsls	r0, r2
 80075f0:	fa2e f303 	lsr.w	r3, lr, r3
 80075f4:	4303      	orrs	r3, r0
 80075f6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80075fa:	b2af      	uxth	r7, r5
 80075fc:	fbb1 fcfe 	udiv	ip, r1, lr
 8007600:	fb0e 101c 	mls	r0, lr, ip, r1
 8007604:	0c19      	lsrs	r1, r3, #16
 8007606:	fb0c f807 	mul.w	r8, ip, r7
 800760a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800760e:	4588      	cmp	r8, r1
 8007610:	fa04 f402 	lsl.w	r4, r4, r2
 8007614:	d922      	bls.n	800765c <__udivmoddi4+0x18c>
 8007616:	1869      	adds	r1, r5, r1
 8007618:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 800761c:	d204      	bcs.n	8007628 <__udivmoddi4+0x158>
 800761e:	4588      	cmp	r8, r1
 8007620:	d902      	bls.n	8007628 <__udivmoddi4+0x158>
 8007622:	f1ac 0002 	sub.w	r0, ip, #2
 8007626:	4429      	add	r1, r5
 8007628:	eba1 0108 	sub.w	r1, r1, r8
 800762c:	b29b      	uxth	r3, r3
 800762e:	fbb1 fcfe 	udiv	ip, r1, lr
 8007632:	fb0e 111c 	mls	r1, lr, ip, r1
 8007636:	fb0c f707 	mul.w	r7, ip, r7
 800763a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800763e:	429f      	cmp	r7, r3
 8007640:	d90e      	bls.n	8007660 <__udivmoddi4+0x190>
 8007642:	18eb      	adds	r3, r5, r3
 8007644:	f10c 31ff 	add.w	r1, ip, #4294967295	@ 0xffffffff
 8007648:	d204      	bcs.n	8007654 <__udivmoddi4+0x184>
 800764a:	429f      	cmp	r7, r3
 800764c:	d902      	bls.n	8007654 <__udivmoddi4+0x184>
 800764e:	f1ac 0102 	sub.w	r1, ip, #2
 8007652:	442b      	add	r3, r5
 8007654:	1bdb      	subs	r3, r3, r7
 8007656:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800765a:	e792      	b.n	8007582 <__udivmoddi4+0xb2>
 800765c:	4660      	mov	r0, ip
 800765e:	e7e3      	b.n	8007628 <__udivmoddi4+0x158>
 8007660:	4661      	mov	r1, ip
 8007662:	e7f7      	b.n	8007654 <__udivmoddi4+0x184>
 8007664:	4660      	mov	r0, ip
 8007666:	e7a3      	b.n	80075b0 <__udivmoddi4+0xe0>
 8007668:	4663      	mov	r3, ip
 800766a:	e7b7      	b.n	80075dc <__udivmoddi4+0x10c>
 800766c:	4283      	cmp	r3, r0
 800766e:	d906      	bls.n	800767e <__udivmoddi4+0x1ae>
 8007670:	b916      	cbnz	r6, 8007678 <__udivmoddi4+0x1a8>
 8007672:	2100      	movs	r1, #0
 8007674:	4608      	mov	r0, r1
 8007676:	e77b      	b.n	8007570 <__udivmoddi4+0xa0>
 8007678:	e9c6 e000 	strd	lr, r0, [r6]
 800767c:	e7f9      	b.n	8007672 <__udivmoddi4+0x1a2>
 800767e:	fab3 f783 	clz	r7, r3
 8007682:	b98f      	cbnz	r7, 80076a8 <__udivmoddi4+0x1d8>
 8007684:	4283      	cmp	r3, r0
 8007686:	d301      	bcc.n	800768c <__udivmoddi4+0x1bc>
 8007688:	4572      	cmp	r2, lr
 800768a:	d808      	bhi.n	800769e <__udivmoddi4+0x1ce>
 800768c:	ebbe 0402 	subs.w	r4, lr, r2
 8007690:	eb60 0303 	sbc.w	r3, r0, r3
 8007694:	2001      	movs	r0, #1
 8007696:	469c      	mov	ip, r3
 8007698:	b91e      	cbnz	r6, 80076a2 <__udivmoddi4+0x1d2>
 800769a:	2100      	movs	r1, #0
 800769c:	e768      	b.n	8007570 <__udivmoddi4+0xa0>
 800769e:	4638      	mov	r0, r7
 80076a0:	e7fa      	b.n	8007698 <__udivmoddi4+0x1c8>
 80076a2:	e9c6 4c00 	strd	r4, ip, [r6]
 80076a6:	e7f8      	b.n	800769a <__udivmoddi4+0x1ca>
 80076a8:	f1c7 0c20 	rsb	ip, r7, #32
 80076ac:	40bb      	lsls	r3, r7
 80076ae:	fa22 f40c 	lsr.w	r4, r2, ip
 80076b2:	431c      	orrs	r4, r3
 80076b4:	fa2e f10c 	lsr.w	r1, lr, ip
 80076b8:	fa20 f30c 	lsr.w	r3, r0, ip
 80076bc:	40b8      	lsls	r0, r7
 80076be:	4301      	orrs	r1, r0
 80076c0:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80076c4:	fa0e f507 	lsl.w	r5, lr, r7
 80076c8:	fbb3 f8f9 	udiv	r8, r3, r9
 80076cc:	fa1f fe84 	uxth.w	lr, r4
 80076d0:	fb09 3018 	mls	r0, r9, r8, r3
 80076d4:	0c0b      	lsrs	r3, r1, #16
 80076d6:	fb08 fa0e 	mul.w	sl, r8, lr
 80076da:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80076de:	459a      	cmp	sl, r3
 80076e0:	fa02 f207 	lsl.w	r2, r2, r7
 80076e4:	d940      	bls.n	8007768 <__udivmoddi4+0x298>
 80076e6:	18e3      	adds	r3, r4, r3
 80076e8:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 80076ec:	d204      	bcs.n	80076f8 <__udivmoddi4+0x228>
 80076ee:	459a      	cmp	sl, r3
 80076f0:	d902      	bls.n	80076f8 <__udivmoddi4+0x228>
 80076f2:	f1a8 0002 	sub.w	r0, r8, #2
 80076f6:	4423      	add	r3, r4
 80076f8:	eba3 030a 	sub.w	r3, r3, sl
 80076fc:	b289      	uxth	r1, r1
 80076fe:	fbb3 f8f9 	udiv	r8, r3, r9
 8007702:	fb09 3318 	mls	r3, r9, r8, r3
 8007706:	fb08 fe0e 	mul.w	lr, r8, lr
 800770a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800770e:	458e      	cmp	lr, r1
 8007710:	d92c      	bls.n	800776c <__udivmoddi4+0x29c>
 8007712:	1861      	adds	r1, r4, r1
 8007714:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8007718:	d204      	bcs.n	8007724 <__udivmoddi4+0x254>
 800771a:	458e      	cmp	lr, r1
 800771c:	d902      	bls.n	8007724 <__udivmoddi4+0x254>
 800771e:	f1a8 0302 	sub.w	r3, r8, #2
 8007722:	4421      	add	r1, r4
 8007724:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007728:	fba0 9802 	umull	r9, r8, r0, r2
 800772c:	eba1 010e 	sub.w	r1, r1, lr
 8007730:	4541      	cmp	r1, r8
 8007732:	46ce      	mov	lr, r9
 8007734:	4643      	mov	r3, r8
 8007736:	d302      	bcc.n	800773e <__udivmoddi4+0x26e>
 8007738:	d106      	bne.n	8007748 <__udivmoddi4+0x278>
 800773a:	454d      	cmp	r5, r9
 800773c:	d204      	bcs.n	8007748 <__udivmoddi4+0x278>
 800773e:	ebb9 0e02 	subs.w	lr, r9, r2
 8007742:	eb68 0304 	sbc.w	r3, r8, r4
 8007746:	3801      	subs	r0, #1
 8007748:	2e00      	cmp	r6, #0
 800774a:	d0a6      	beq.n	800769a <__udivmoddi4+0x1ca>
 800774c:	ebb5 020e 	subs.w	r2, r5, lr
 8007750:	eb61 0103 	sbc.w	r1, r1, r3
 8007754:	fa01 fc0c 	lsl.w	ip, r1, ip
 8007758:	fa22 f307 	lsr.w	r3, r2, r7
 800775c:	ea4c 0303 	orr.w	r3, ip, r3
 8007760:	40f9      	lsrs	r1, r7
 8007762:	e9c6 3100 	strd	r3, r1, [r6]
 8007766:	e798      	b.n	800769a <__udivmoddi4+0x1ca>
 8007768:	4640      	mov	r0, r8
 800776a:	e7c5      	b.n	80076f8 <__udivmoddi4+0x228>
 800776c:	4643      	mov	r3, r8
 800776e:	e7d9      	b.n	8007724 <__udivmoddi4+0x254>

08007770 <_init>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr

0800777c <_fini>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	bf00      	nop
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr
